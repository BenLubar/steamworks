// This code is generated by go generate; DO NOT EDIT
#pragma once

#include <stdbool.h>
#include <stdint.h>
typedef int CallbackID_t;
typedef uint8_t uint8;
typedef uint8_t uint8;
typedef int8_t int8;
typedef int16_t int16;
typedef uint16_t uint16;
typedef int32_t int32;
typedef uint32_t uint32;
typedef int64_t int64;
typedef uint64_t uint64;
typedef int64_t lint64;
typedef uint64_t ulint64;
typedef intptr_t intp;
typedef uintptr_t uintp;
typedef uint64 GID_t;
typedef uint64 JobID_t;
typedef GID_t TxnID_t;
typedef uint32 PackageId_t;
typedef uint32 BundleId_t;
typedef uint32 AppId_t;
typedef uint64 AssetClassId_t;
typedef uint32 PhysicalItemId_t;
typedef uint32 DepotId_t;
typedef uint32 RTime32;
typedef uint32 CellID_t;
typedef uint64 SteamAPICall_t;
typedef uint32 AccountID_t;
typedef uint32 PartnerId_t;
typedef uint64 ManifestId_t;
typedef uint64 SiteId_t;
typedef uint32 HAuthTicket;
typedef void * BREAKPAD_HANDLE;
typedef int32 HSteamPipe;
typedef int32 HSteamUser;
typedef int16 FriendsGroupID_t;
typedef void * HServerListRequest;
typedef int HServerQuery;
typedef uint64 UGCHandle_t;
typedef uint64 PublishedFileUpdateHandle_t;
typedef uint64 PublishedFileId_t;
typedef uint64 UGCFileWriteStreamHandle_t;
typedef uint64 SteamLeaderboard_t;
typedef uint64 SteamLeaderboardEntries_t;
typedef uint32 SNetSocket_t;
typedef uint32 SNetListenSocket_t;
typedef uint32 ScreenshotHandle;
typedef uint32 HTTPRequestHandle;
typedef uint32 HTTPCookieContainerHandle;
typedef uint64 ControllerHandle_t;
typedef uint64 ControllerActionSetHandle_t;
typedef uint64 ControllerDigitalActionHandle_t;
typedef uint64 ControllerAnalogActionHandle_t;
typedef uint64 UGCQueryHandle_t;
typedef uint64 UGCUpdateHandle_t;
typedef uint32 HHTMLBrowser;
typedef uint64 SteamItemInstanceID_t;
typedef int32 SteamItemDef_t;
typedef int32 SteamInventoryResult_t;
typedef uint64 SteamInventoryUpdateHandle_t;
typedef uint64 CSteamID;
typedef uint64 CGameID;
typedef int EUniverse;
typedef int EResult;
typedef int EVoiceResult;
typedef int EDenyReason;
typedef int EBeginAuthSessionResult;
typedef int EAuthSessionResponse;
typedef int EUserHasLicenseForAppResult;
typedef int EAccountType;
typedef int EAppReleaseState;
typedef int EAppOwnershipFlags;
typedef int EAppType;
typedef int ESteamUserStatType;
typedef int EChatEntryType;
typedef int EChatRoomEnterResponse;
typedef int EChatSteamIDInstanceFlags;
typedef int EMarketingMessageFlags;
typedef int ENotificationPosition;
typedef int EBroadcastUploadResult;
typedef int ELaunchOptionType;
typedef int EVRHMDType;
typedef int EGameIDType;
typedef int EFailureType;
typedef int EFriendRelationship;
typedef int EPersonaState;
typedef int EFriendFlags;
typedef int EUserRestriction;
typedef int EOverlayToStoreFlag;
typedef int EPersonaChange;
typedef int ESteamAPICallFailure;
typedef int EGamepadTextInputMode;
typedef int EGamepadTextInputLineMode;
typedef int ECheckFileSignature;
typedef int EMatchMakingServerResponse;
typedef int ELobbyType;
typedef int ELobbyComparison;
typedef int ELobbyDistanceFilter;
typedef int EChatMemberStateChange;
typedef int ERemoteStoragePlatform;
typedef int ERemoteStoragePublishedFileVisibility;
typedef int EWorkshopFileType;
typedef int EWorkshopVote;
typedef int EWorkshopFileAction;
typedef int EWorkshopEnumerationType;
typedef int EWorkshopVideoProvider;
typedef int EUGCReadAction;
typedef int ELeaderboardDataRequest;
typedef int ELeaderboardSortMethod;
typedef int ELeaderboardDisplayType;
typedef int ELeaderboardUploadScoreMethod;
typedef int ERegisterActivationCodeResult;
typedef int EP2PSessionError;
typedef int EP2PSend;
typedef int ESNetSocketState;
typedef int ESNetSocketConnectionType;
typedef int EVRScreenshotType;
typedef int EAudioPlayback;
typedef int EHTTPMethod;
typedef int EHTTPStatusCode;
typedef int ESteamControllerPad;
typedef int EControllerSource;
typedef int EControllerSourceMode;
typedef int EControllerActionOrigin;
typedef int ESteamControllerLEDFlag;
typedef int ESteamInputType;
typedef int EUGCMatchingUGCType;
typedef int EUserUGCList;
typedef int EUserUGCListSortOrder;
typedef int EUGCQuery;
typedef int EItemUpdateStatus;
typedef int EItemState;
typedef int EItemStatistic;
typedef int EItemPreviewType;
typedef int EHTMLMouseButton;
typedef int EMouseCursor;
typedef int EHTMLKeyModifiers;
typedef int ESteamItemFlags;
typedef int EParentalFeature;
typedef int EServerMode;
typedef struct ValvePackingSentinel_t ValvePackingSentinel_t;
typedef struct CallbackMsg_t CallbackMsg_t;
typedef struct SteamServerConnectFailure_t SteamServerConnectFailure_t;
typedef struct SteamServersDisconnected_t SteamServersDisconnected_t;
typedef struct ClientGameServerDeny_t ClientGameServerDeny_t;
typedef struct ValidateAuthTicketResponse_t ValidateAuthTicketResponse_t;
typedef struct MicroTxnAuthorizationResponse_t MicroTxnAuthorizationResponse_t;
typedef struct EncryptedAppTicketResponse_t EncryptedAppTicketResponse_t;
typedef struct GetAuthSessionTicketResponse_t GetAuthSessionTicketResponse_t;
typedef struct GameWebCallback_t GameWebCallback_t;
typedef struct StoreAuthURLResponse_t StoreAuthURLResponse_t;
typedef struct FriendGameInfo_t FriendGameInfo_t;
typedef struct FriendSessionStateInfo_t FriendSessionStateInfo_t;
typedef struct PersonaStateChange_t PersonaStateChange_t;
typedef struct GameOverlayActivated_t GameOverlayActivated_t;
typedef struct GameServerChangeRequested_t GameServerChangeRequested_t;
typedef struct GameLobbyJoinRequested_t GameLobbyJoinRequested_t;
typedef struct AvatarImageLoaded_t AvatarImageLoaded_t;
typedef struct ClanOfficerListResponse_t ClanOfficerListResponse_t;
typedef struct FriendRichPresenceUpdate_t FriendRichPresenceUpdate_t;
typedef struct GameRichPresenceJoinRequested_t GameRichPresenceJoinRequested_t;
typedef struct GameConnectedClanChatMsg_t GameConnectedClanChatMsg_t;
typedef struct GameConnectedChatJoin_t GameConnectedChatJoin_t;
typedef struct GameConnectedChatLeave_t GameConnectedChatLeave_t;
typedef struct DownloadClanActivityCountsResult_t DownloadClanActivityCountsResult_t;
typedef struct JoinClanChatRoomCompletionResult_t JoinClanChatRoomCompletionResult_t;
typedef struct GameConnectedFriendChatMsg_t GameConnectedFriendChatMsg_t;
typedef struct FriendsGetFollowerCount_t FriendsGetFollowerCount_t;
typedef struct FriendsIsFollowing_t FriendsIsFollowing_t;
typedef struct FriendsEnumerateFollowingList_t FriendsEnumerateFollowingList_t;
typedef struct SetPersonaNameResponse_t SetPersonaNameResponse_t;
typedef struct LowBatteryPower_t LowBatteryPower_t;
typedef struct SteamAPICallCompleted_t SteamAPICallCompleted_t;
typedef struct CheckFileSignature_t CheckFileSignature_t;
typedef struct GamepadTextInputDismissed_t GamepadTextInputDismissed_t;
typedef struct MatchMakingKeyValuePair_t MatchMakingKeyValuePair_t;
typedef struct servernetadr_t servernetadr_t;
typedef struct gameserveritem_t gameserveritem_t;
typedef struct FavoritesListChanged_t FavoritesListChanged_t;
typedef struct LobbyInvite_t LobbyInvite_t;
typedef struct LobbyEnter_t LobbyEnter_t;
typedef struct LobbyDataUpdate_t LobbyDataUpdate_t;
typedef struct LobbyChatUpdate_t LobbyChatUpdate_t;
typedef struct LobbyChatMsg_t LobbyChatMsg_t;
typedef struct LobbyGameCreated_t LobbyGameCreated_t;
typedef struct LobbyMatchList_t LobbyMatchList_t;
typedef struct LobbyKicked_t LobbyKicked_t;
typedef struct LobbyCreated_t LobbyCreated_t;
typedef struct PSNGameBootInviteResult_t PSNGameBootInviteResult_t;
typedef struct FavoritesListAccountsUpdated_t FavoritesListAccountsUpdated_t;
typedef struct SteamParamStringArray_t SteamParamStringArray_t;
typedef struct RemoteStorageAppSyncedClient_t RemoteStorageAppSyncedClient_t;
typedef struct RemoteStorageAppSyncedServer_t RemoteStorageAppSyncedServer_t;
typedef struct RemoteStorageAppSyncProgress_t RemoteStorageAppSyncProgress_t;
typedef struct RemoteStorageAppSyncStatusCheck_t RemoteStorageAppSyncStatusCheck_t;
typedef struct RemoteStorageFileShareResult_t RemoteStorageFileShareResult_t;
typedef struct RemoteStoragePublishFileResult_t RemoteStoragePublishFileResult_t;
typedef struct RemoteStorageDeletePublishedFileResult_t RemoteStorageDeletePublishedFileResult_t;
typedef struct RemoteStorageEnumerateUserPublishedFilesResult_t RemoteStorageEnumerateUserPublishedFilesResult_t;
typedef struct RemoteStorageSubscribePublishedFileResult_t RemoteStorageSubscribePublishedFileResult_t;
typedef struct RemoteStorageEnumerateUserSubscribedFilesResult_t RemoteStorageEnumerateUserSubscribedFilesResult_t;
typedef struct RemoteStorageUnsubscribePublishedFileResult_t RemoteStorageUnsubscribePublishedFileResult_t;
typedef struct RemoteStorageUpdatePublishedFileResult_t RemoteStorageUpdatePublishedFileResult_t;
typedef struct RemoteStorageDownloadUGCResult_t RemoteStorageDownloadUGCResult_t;
typedef struct RemoteStorageGetPublishedFileDetailsResult_t RemoteStorageGetPublishedFileDetailsResult_t;
typedef struct RemoteStorageEnumerateWorkshopFilesResult_t RemoteStorageEnumerateWorkshopFilesResult_t;
typedef struct RemoteStorageGetPublishedItemVoteDetailsResult_t RemoteStorageGetPublishedItemVoteDetailsResult_t;
typedef struct RemoteStoragePublishedFileSubscribed_t RemoteStoragePublishedFileSubscribed_t;
typedef struct RemoteStoragePublishedFileUnsubscribed_t RemoteStoragePublishedFileUnsubscribed_t;
typedef struct RemoteStoragePublishedFileDeleted_t RemoteStoragePublishedFileDeleted_t;
typedef struct RemoteStorageUpdateUserPublishedItemVoteResult_t RemoteStorageUpdateUserPublishedItemVoteResult_t;
typedef struct RemoteStorageUserVoteDetails_t RemoteStorageUserVoteDetails_t;
typedef struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t RemoteStorageEnumerateUserSharedWorkshopFilesResult_t;
typedef struct RemoteStorageSetUserPublishedFileActionResult_t RemoteStorageSetUserPublishedFileActionResult_t;
typedef struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t RemoteStorageEnumeratePublishedFilesByUserActionResult_t;
typedef struct RemoteStoragePublishFileProgress_t RemoteStoragePublishFileProgress_t;
typedef struct RemoteStoragePublishedFileUpdated_t RemoteStoragePublishedFileUpdated_t;
typedef struct RemoteStorageFileWriteAsyncComplete_t RemoteStorageFileWriteAsyncComplete_t;
typedef struct RemoteStorageFileReadAsyncComplete_t RemoteStorageFileReadAsyncComplete_t;
typedef struct LeaderboardEntry_t LeaderboardEntry_t;
typedef struct UserStatsReceived_t UserStatsReceived_t;
typedef struct UserStatsStored_t UserStatsStored_t;
typedef struct UserAchievementStored_t UserAchievementStored_t;
typedef struct LeaderboardFindResult_t LeaderboardFindResult_t;
typedef struct LeaderboardScoresDownloaded_t LeaderboardScoresDownloaded_t;
typedef struct LeaderboardScoreUploaded_t LeaderboardScoreUploaded_t;
typedef struct NumberOfCurrentPlayers_t NumberOfCurrentPlayers_t;
typedef struct UserStatsUnloaded_t UserStatsUnloaded_t;
typedef struct UserAchievementIconFetched_t UserAchievementIconFetched_t;
typedef struct GlobalAchievementPercentagesReady_t GlobalAchievementPercentagesReady_t;
typedef struct LeaderboardUGCSet_t LeaderboardUGCSet_t;
typedef struct PS3TrophiesInstalled_t PS3TrophiesInstalled_t;
typedef struct GlobalStatsReceived_t GlobalStatsReceived_t;
typedef struct DlcInstalled_t DlcInstalled_t;
typedef struct RegisterActivationCodeResponse_t RegisterActivationCodeResponse_t;
typedef struct AppProofOfPurchaseKeyResponse_t AppProofOfPurchaseKeyResponse_t;
typedef struct FileDetailsResult_t FileDetailsResult_t;
typedef struct P2PSessionState_t P2PSessionState_t;
typedef struct P2PSessionRequest_t P2PSessionRequest_t;
typedef struct P2PSessionConnectFail_t P2PSessionConnectFail_t;
typedef struct SocketStatusCallback_t SocketStatusCallback_t;
typedef struct ScreenshotReady_t ScreenshotReady_t;
typedef struct VolumeHasChanged_t VolumeHasChanged_t;
typedef struct MusicPlayerWantsShuffled_t MusicPlayerWantsShuffled_t;
typedef struct MusicPlayerWantsLooped_t MusicPlayerWantsLooped_t;
typedef struct MusicPlayerWantsVolume_t MusicPlayerWantsVolume_t;
typedef struct MusicPlayerSelectsQueueEntry_t MusicPlayerSelectsQueueEntry_t;
typedef struct MusicPlayerSelectsPlaylistEntry_t MusicPlayerSelectsPlaylistEntry_t;
typedef struct MusicPlayerWantsPlayingRepeatStatus_t MusicPlayerWantsPlayingRepeatStatus_t;
typedef struct HTTPRequestCompleted_t HTTPRequestCompleted_t;
typedef struct HTTPRequestHeadersReceived_t HTTPRequestHeadersReceived_t;
typedef struct HTTPRequestDataReceived_t HTTPRequestDataReceived_t;
typedef struct ControllerAnalogActionData_t ControllerAnalogActionData_t;
typedef struct ControllerDigitalActionData_t ControllerDigitalActionData_t;
typedef struct ControllerMotionData_t ControllerMotionData_t;
typedef struct SteamUGCDetails_t SteamUGCDetails_t;
typedef struct SteamUGCQueryCompleted_t SteamUGCQueryCompleted_t;
typedef struct SteamUGCRequestUGCDetailsResult_t SteamUGCRequestUGCDetailsResult_t;
typedef struct CreateItemResult_t CreateItemResult_t;
typedef struct SubmitItemUpdateResult_t SubmitItemUpdateResult_t;
typedef struct DownloadItemResult_t DownloadItemResult_t;
typedef struct UserFavoriteItemsListChanged_t UserFavoriteItemsListChanged_t;
typedef struct SetUserItemVoteResult_t SetUserItemVoteResult_t;
typedef struct GetUserItemVoteResult_t GetUserItemVoteResult_t;
typedef struct StartPlaytimeTrackingResult_t StartPlaytimeTrackingResult_t;
typedef struct StopPlaytimeTrackingResult_t StopPlaytimeTrackingResult_t;
typedef struct AddUGCDependencyResult_t AddUGCDependencyResult_t;
typedef struct RemoveUGCDependencyResult_t RemoveUGCDependencyResult_t;
typedef struct AddAppDependencyResult_t AddAppDependencyResult_t;
typedef struct RemoveAppDependencyResult_t RemoveAppDependencyResult_t;
typedef struct GetAppDependenciesResult_t GetAppDependenciesResult_t;
typedef struct DeleteItemResult_t DeleteItemResult_t;
typedef struct SteamAppInstalled_t SteamAppInstalled_t;
typedef struct SteamAppUninstalled_t SteamAppUninstalled_t;
typedef struct HTML_BrowserReady_t HTML_BrowserReady_t;
typedef struct HTML_NeedsPaint_t HTML_NeedsPaint_t;
typedef struct HTML_StartRequest_t HTML_StartRequest_t;
typedef struct HTML_CloseBrowser_t HTML_CloseBrowser_t;
typedef struct HTML_URLChanged_t HTML_URLChanged_t;
typedef struct HTML_FinishedRequest_t HTML_FinishedRequest_t;
typedef struct HTML_OpenLinkInNewTab_t HTML_OpenLinkInNewTab_t;
typedef struct HTML_ChangedTitle_t HTML_ChangedTitle_t;
typedef struct HTML_SearchResults_t HTML_SearchResults_t;
typedef struct HTML_CanGoBackAndForward_t HTML_CanGoBackAndForward_t;
typedef struct HTML_HorizontalScroll_t HTML_HorizontalScroll_t;
typedef struct HTML_VerticalScroll_t HTML_VerticalScroll_t;
typedef struct HTML_LinkAtPosition_t HTML_LinkAtPosition_t;
typedef struct HTML_JSAlert_t HTML_JSAlert_t;
typedef struct HTML_JSConfirm_t HTML_JSConfirm_t;
typedef struct HTML_FileOpenDialog_t HTML_FileOpenDialog_t;
typedef struct HTML_NewWindow_t HTML_NewWindow_t;
typedef struct HTML_SetCursor_t HTML_SetCursor_t;
typedef struct HTML_StatusText_t HTML_StatusText_t;
typedef struct HTML_ShowToolTip_t HTML_ShowToolTip_t;
typedef struct HTML_UpdateToolTip_t HTML_UpdateToolTip_t;
typedef struct HTML_HideToolTip_t HTML_HideToolTip_t;
typedef struct HTML_BrowserRestarted_t HTML_BrowserRestarted_t;
typedef struct SteamItemDetails_t SteamItemDetails_t;
typedef struct SteamInventoryResultReady_t SteamInventoryResultReady_t;
typedef struct SteamInventoryFullUpdate_t SteamInventoryFullUpdate_t;
typedef struct SteamInventoryEligiblePromoItemDefIDs_t SteamInventoryEligiblePromoItemDefIDs_t;
typedef struct SteamInventoryStartPurchaseResult_t SteamInventoryStartPurchaseResult_t;
typedef struct SteamInventoryRequestPricesResult_t SteamInventoryRequestPricesResult_t;
typedef struct BroadcastUploadStop_t BroadcastUploadStop_t;
typedef struct GetVideoURLResult_t GetVideoURLResult_t;
typedef struct GetOPFSettingsResult_t GetOPFSettingsResult_t;
typedef struct GSClientApprove_t GSClientApprove_t;
typedef struct GSClientDeny_t GSClientDeny_t;
typedef struct GSClientKick_t GSClientKick_t;
typedef struct GSClientAchievementStatus_t GSClientAchievementStatus_t;
typedef struct GSPolicyResponse_t GSPolicyResponse_t;
typedef struct GSGameplayStats_t GSGameplayStats_t;
typedef struct GSClientGroupStatus_t GSClientGroupStatus_t;
typedef struct GSReputation_t GSReputation_t;
typedef struct AssociateWithClanResult_t AssociateWithClanResult_t;
typedef struct ComputeNewPlayerCompatibilityResult_t ComputeNewPlayerCompatibilityResult_t;
typedef struct GSStatsReceived_t GSStatsReceived_t;
typedef struct GSStatsStored_t GSStatsStored_t;
typedef struct GSStatsUnloaded_t GSStatsUnloaded_t;
typedef struct NewLaunchQueryParameters_t NewLaunchQueryParameters_t;
typedef struct GCMessageAvailable_t GCMessageAvailable_t;
typedef struct GCMessageFailed_t GCMessageFailed_t;
typedef struct SteamInventoryDefinitionUpdate_t SteamInventoryDefinitionUpdate_t;
typedef struct PlaybackStatusHasChanged_t PlaybackStatusHasChanged_t;
typedef struct MusicPlayerRemoteWillActivate_t MusicPlayerRemoteWillActivate_t;
typedef struct MusicPlayerRemoteWillDeactivate_t MusicPlayerRemoteWillDeactivate_t;
typedef struct MusicPlayerRemoteToFront_t MusicPlayerRemoteToFront_t;
typedef struct MusicPlayerWillQuit_t MusicPlayerWillQuit_t;
typedef struct MusicPlayerWantsPlay_t MusicPlayerWantsPlay_t;
typedef struct MusicPlayerWantsPause_t MusicPlayerWantsPause_t;
typedef struct MusicPlayerWantsPlayPrevious_t MusicPlayerWantsPlayPrevious_t;
typedef struct MusicPlayerWantsPlayNext_t MusicPlayerWantsPlayNext_t;
typedef struct ScreenshotRequested_t ScreenshotRequested_t;
typedef struct ItemInstalled_t ItemInstalled_t;
typedef struct SteamServersConnected_t SteamServersConnected_t;
typedef struct IPCFailure_t IPCFailure_t;
typedef struct LicensesUpdated_t LicensesUpdated_t;
typedef struct IPCountry_t IPCountry_t;
typedef struct SteamShutdown_t SteamShutdown_t;
typedef struct BroadcastUploadStart_t BroadcastUploadStart_t;
#if defined(__linux__) || defined(__APPLE__)
#pragma pack(push, 4)
typedef struct uint64aligned { uint32_t value[2]; } uint64aligned;
typedef struct int64aligned { uint32_t value[2]; } int64aligned;
#else
#pragma pack(push, 8)
typedef struct uint64aligned { uint64_t value[1]; } uint64aligned;
typedef struct int64aligned { int64_t value[1]; } int64aligned;
#endif
struct ValvePackingSentinel_t {
	uint32 U32;
	uint64aligned U64;
	uint16 U16;
	double D;
};
struct CallbackMsg_t {
	HSteamUser HSteamUser;
	int ICallback;
	uint8 * PubParam;
	int CubParam;
};
struct SteamServerConnectFailure_t {
	EResult EResult;
	bool BStillRetrying;
};
struct SteamServersDisconnected_t {
	EResult EResult;
};
struct ClientGameServerDeny_t {
	uint32 UAppID;
	uint32 UnGameServerIP;
	uint16 UsGameServerPort;
	uint16 BSecure;
	uint32 UReason;
};
struct ValidateAuthTicketResponse_t {
	uint64aligned SteamID;
	EAuthSessionResponse EAuthSessionResponse;
	uint64aligned OwnerSteamID;
};
struct MicroTxnAuthorizationResponse_t {
	uint32 UnAppID;
	uint64aligned UlOrderID;
	uint8 BAuthorized;
};
struct EncryptedAppTicketResponse_t {
	EResult EResult;
};
struct GetAuthSessionTicketResponse_t {
	HAuthTicket HAuthTicket;
	EResult EResult;
};
struct GameWebCallback_t {
	char SzURL[256];
};
struct StoreAuthURLResponse_t {
	char SzURL[512];
};
struct FriendGameInfo_t {
	uint64aligned GameID;
	uint32 UnGameIP;
	uint16 UsGamePort;
	uint16 UsQueryPort;
	uint64aligned SteamIDLobby;
};
struct FriendSessionStateInfo_t {
	uint32 UiOnlineSessionInstances;
	uint8 UiPublishedToFriendsSessionInstance;
};
struct PersonaStateChange_t {
	uint64aligned UlSteamID;
	int NChangeFlags;
};
struct GameOverlayActivated_t {
	uint8 BActive;
};
struct GameServerChangeRequested_t {
	char RgchServer[64];
	char RgchPassword[64];
};
struct GameLobbyJoinRequested_t {
	uint64aligned SteamIDLobby;
	uint64aligned SteamIDFriend;
};
struct AvatarImageLoaded_t {
	uint64aligned SteamID;
	int IImage;
	int IWide;
	int ITall;
};
struct ClanOfficerListResponse_t {
	uint64aligned SteamIDClan;
	int COfficers;
	uint8 BSuccess;
};
struct FriendRichPresenceUpdate_t {
	uint64aligned SteamIDFriend;
	AppId_t NAppID;
};
struct GameRichPresenceJoinRequested_t {
	uint64aligned SteamIDFriend;
	char RgchConnect[256];
};
struct GameConnectedClanChatMsg_t {
	uint64aligned SteamIDClanChat;
	uint64aligned SteamIDUser;
	int IMessageID;
};
struct GameConnectedChatJoin_t {
	uint64aligned SteamIDClanChat;
	uint64aligned SteamIDUser;
};
struct GameConnectedChatLeave_t {
	uint64aligned SteamIDClanChat;
	uint64aligned SteamIDUser;
	bool BKicked;
	bool BDropped;
};
struct DownloadClanActivityCountsResult_t {
	bool BSuccess;
};
struct JoinClanChatRoomCompletionResult_t {
	uint64aligned SteamIDClanChat;
	EChatRoomEnterResponse EChatRoomEnterResponse;
};
struct GameConnectedFriendChatMsg_t {
	uint64aligned SteamIDUser;
	int IMessageID;
};
struct FriendsGetFollowerCount_t {
	EResult EResult;
	uint64aligned SteamID;
	int NCount;
};
struct FriendsIsFollowing_t {
	EResult EResult;
	uint64aligned SteamID;
	bool BIsFollowing;
};
struct FriendsEnumerateFollowingList_t {
	EResult EResult;
	uint64aligned RgSteamID[50];
	int32 NResultsReturned;
	int32 NTotalResultCount;
};
struct SetPersonaNameResponse_t {
	bool BSuccess;
	bool BLocalSuccess;
	EResult Result;
};
struct LowBatteryPower_t {
	uint8 NMinutesBatteryLeft;
};
struct SteamAPICallCompleted_t {
	uint64aligned HAsyncCall;
	int ICallback;
	uint32 CubParam;
};
struct CheckFileSignature_t {
	ECheckFileSignature ECheckFileSignature;
};
struct GamepadTextInputDismissed_t {
	bool BSubmitted;
	uint32 UnSubmittedText;
};
struct MatchMakingKeyValuePair_t {
	char SzKey[256];
	char SzValue[256];
};
struct servernetadr_t {
	uint16 UsConnectionPort;
	uint16 UsQueryPort;
	uint32 UnIP;
};
struct gameserveritem_t {
	servernetadr_t NetAdr;
	int NPing;
	bool BHadSuccessfulResponse;
	bool BDoNotRefresh;
	char SzGameDir[32];
	char SzMap[32];
	char SzGameDescription[64];
	uint32 NAppID;
	int NPlayers;
	int NMaxPlayers;
	int NBotPlayers;
	bool BPassword;
	bool BSecure;
	uint32 UlTimeLastPlayed;
	int NServerVersion;
	char SzServerName[64];
	char SzGameTags[128];
	uint64aligned SteamID;
};
struct FavoritesListChanged_t {
	uint32 NIP;
	uint32 NQueryPort;
	uint32 NConnPort;
	uint32 NAppID;
	uint32 NFlags;
	bool BAdd;
	AccountID_t UnAccountId;
};
struct LobbyInvite_t {
	uint64aligned UlSteamIDUser;
	uint64aligned UlSteamIDLobby;
	uint64aligned UlGameID;
};
struct LobbyEnter_t {
	uint64aligned UlSteamIDLobby;
	uint32 RgfChatPermissions;
	bool BLocked;
	uint32 EChatRoomEnterResponse;
};
struct LobbyDataUpdate_t {
	uint64aligned UlSteamIDLobby;
	uint64aligned UlSteamIDMember;
	uint8 BSuccess;
};
struct LobbyChatUpdate_t {
	uint64aligned UlSteamIDLobby;
	uint64aligned UlSteamIDUserChanged;
	uint64aligned UlSteamIDMakingChange;
	uint32 RgfChatMemberStateChange;
};
struct LobbyChatMsg_t {
	uint64aligned UlSteamIDLobby;
	uint64aligned UlSteamIDUser;
	uint8 EChatEntryType;
	uint32 IChatID;
};
struct LobbyGameCreated_t {
	uint64aligned UlSteamIDLobby;
	uint64aligned UlSteamIDGameServer;
	uint32 UnIP;
	uint16 UsPort;
};
struct LobbyMatchList_t {
	uint32 NLobbiesMatching;
};
struct LobbyKicked_t {
	uint64aligned UlSteamIDLobby;
	uint64aligned UlSteamIDAdmin;
	uint8 BKickedDueToDisconnect;
};
struct LobbyCreated_t {
	EResult EResult;
	uint64aligned UlSteamIDLobby;
};
struct PSNGameBootInviteResult_t {
	bool BGameBootInviteExists;
	uint64aligned SteamIDLobby;
};
struct FavoritesListAccountsUpdated_t {
	EResult EResult;
};
struct SteamParamStringArray_t {
	const char ** PpStrings;
	int32 NNumStrings;
};
struct RemoteStorageAppSyncedClient_t {
	AppId_t NAppID;
	EResult EResult;
	int UnNumDownloads;
};
struct RemoteStorageAppSyncedServer_t {
	AppId_t NAppID;
	EResult EResult;
	int UnNumUploads;
};
struct RemoteStorageAppSyncProgress_t {
	char RgchCurrentFile[260];
	AppId_t NAppID;
	uint32 UBytesTransferredThisChunk;
	double DAppPercentComplete;
	bool BUploading;
};
struct RemoteStorageAppSyncStatusCheck_t {
	AppId_t NAppID;
	EResult EResult;
};
struct RemoteStorageFileShareResult_t {
	EResult EResult;
	uint64aligned HFile;
	char RgchFilename[260];
};
struct RemoteStoragePublishFileResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	bool BUserNeedsToAcceptWorkshopLegalAgreement;
};
struct RemoteStorageDeletePublishedFileResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
};
struct RemoteStorageEnumerateUserPublishedFilesResult_t {
	EResult EResult;
	int32 NResultsReturned;
	int32 NTotalResultCount;
	uint64aligned RgPublishedFileId[50];
};
struct RemoteStorageSubscribePublishedFileResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
};
struct RemoteStorageEnumerateUserSubscribedFilesResult_t {
	EResult EResult;
	int32 NResultsReturned;
	int32 NTotalResultCount;
	uint64aligned RgPublishedFileId[50];
	uint32 RgRTimeSubscribed[50];
};
struct RemoteStorageUnsubscribePublishedFileResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
};
struct RemoteStorageUpdatePublishedFileResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	bool BUserNeedsToAcceptWorkshopLegalAgreement;
};
struct RemoteStorageDownloadUGCResult_t {
	EResult EResult;
	uint64aligned HFile;
	AppId_t NAppID;
	int32 NSizeInBytes;
	char PchFileName[260];
	uint64aligned UlSteamIDOwner;
};
struct RemoteStorageGetPublishedFileDetailsResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	AppId_t NCreatorAppID;
	AppId_t NConsumerAppID;
	char RgchTitle[129];
	char RgchDescription[8000];
	uint64aligned HFile;
	uint64aligned HPreviewFile;
	uint64aligned UlSteamIDOwner;
	uint32 RtimeCreated;
	uint32 RtimeUpdated;
	ERemoteStoragePublishedFileVisibility EVisibility;
	bool BBanned;
	char RgchTags[1025];
	bool BTagsTruncated;
	char PchFileName[260];
	int32 NFileSize;
	int32 NPreviewFileSize;
	char RgchURL[256];
	EWorkshopFileType EFileType;
	bool BAcceptedForUse;
};
struct RemoteStorageEnumerateWorkshopFilesResult_t {
	EResult EResult;
	int32 NResultsReturned;
	int32 NTotalResultCount;
	uint64aligned RgPublishedFileId[50];
	float RgScore[50];
	AppId_t NAppId;
	uint32 UnStartIndex;
};
struct RemoteStorageGetPublishedItemVoteDetailsResult_t {
	EResult EResult;
	uint64aligned UnPublishedFileId;
	int32 NVotesFor;
	int32 NVotesAgainst;
	int32 NReports;
	float FScore;
};
struct RemoteStoragePublishedFileSubscribed_t {
	uint64aligned NPublishedFileId;
	AppId_t NAppID;
};
struct RemoteStoragePublishedFileUnsubscribed_t {
	uint64aligned NPublishedFileId;
	AppId_t NAppID;
};
struct RemoteStoragePublishedFileDeleted_t {
	uint64aligned NPublishedFileId;
	AppId_t NAppID;
};
struct RemoteStorageUpdateUserPublishedItemVoteResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
};
struct RemoteStorageUserVoteDetails_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	EWorkshopVote EVote;
};
struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t {
	EResult EResult;
	int32 NResultsReturned;
	int32 NTotalResultCount;
	uint64aligned RgPublishedFileId[50];
};
struct RemoteStorageSetUserPublishedFileActionResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	EWorkshopFileAction EAction;
};
struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t {
	EResult EResult;
	EWorkshopFileAction EAction;
	int32 NResultsReturned;
	int32 NTotalResultCount;
	uint64aligned RgPublishedFileId[50];
	uint32 RgRTimeUpdated[50];
};
struct RemoteStoragePublishFileProgress_t {
	double DPercentFile;
	bool BPreview;
};
struct RemoteStoragePublishedFileUpdated_t {
	uint64aligned NPublishedFileId;
	AppId_t NAppID;
	uint64aligned UlUnused;
};
struct RemoteStorageFileWriteAsyncComplete_t {
	EResult EResult;
};
struct RemoteStorageFileReadAsyncComplete_t {
	uint64aligned HFileReadAsync;
	EResult EResult;
	uint32 NOffset;
	uint32 CubRead;
};
struct LeaderboardEntry_t {
	uint64aligned SteamIDUser;
	int32 NGlobalRank;
	int32 NScore;
	int32 CDetails;
	uint64aligned HUGC;
};
struct UserStatsReceived_t {
	uint64aligned NGameID;
	EResult EResult;
	uint64aligned SteamIDUser;
};
struct UserStatsStored_t {
	uint64aligned NGameID;
	EResult EResult;
};
struct UserAchievementStored_t {
	uint64aligned NGameID;
	bool BGroupAchievement;
	char RgchAchievementName[128];
	uint32 NCurProgress;
	uint32 NMaxProgress;
};
struct LeaderboardFindResult_t {
	uint64aligned HSteamLeaderboard;
	uint8 BLeaderboardFound;
};
struct LeaderboardScoresDownloaded_t {
	uint64aligned HSteamLeaderboard;
	uint64aligned HSteamLeaderboardEntries;
	int CEntryCount;
};
struct LeaderboardScoreUploaded_t {
	uint8 BSuccess;
	uint64aligned HSteamLeaderboard;
	int32 NScore;
	uint8 BScoreChanged;
	int NGlobalRankNew;
	int NGlobalRankPrevious;
};
struct NumberOfCurrentPlayers_t {
	uint8 BSuccess;
	int32 CPlayers;
};
struct UserStatsUnloaded_t {
	uint64aligned SteamIDUser;
};
struct UserAchievementIconFetched_t {
	uint64aligned NGameID;
	char RgchAchievementName[128];
	bool BAchieved;
	int NIconHandle;
};
struct GlobalAchievementPercentagesReady_t {
	uint64aligned NGameID;
	EResult EResult;
};
struct LeaderboardUGCSet_t {
	EResult EResult;
	uint64aligned HSteamLeaderboard;
};
struct PS3TrophiesInstalled_t {
	uint64aligned NGameID;
	EResult EResult;
	uint64aligned UlRequiredDiskSpace;
};
struct GlobalStatsReceived_t {
	uint64aligned NGameID;
	EResult EResult;
};
struct DlcInstalled_t {
	AppId_t NAppID;
};
struct RegisterActivationCodeResponse_t {
	ERegisterActivationCodeResult EResult;
	uint32 UnPackageRegistered;
};
struct AppProofOfPurchaseKeyResponse_t {
	EResult EResult;
	uint32 NAppID;
	uint32 CchKeyLength;
	char RgchKey[240];
};
struct FileDetailsResult_t {
	EResult EResult;
	uint64aligned UlFileSize;
	uint8 FileSHA[20];
	uint32 UnFlags;
};
struct P2PSessionState_t {
	uint8 BConnectionActive;
	uint8 BConnecting;
	uint8 EP2PSessionError;
	uint8 BUsingRelay;
	int32 NBytesQueuedForSend;
	int32 NPacketsQueuedForSend;
	uint32 NRemoteIP;
	uint16 NRemotePort;
};
struct P2PSessionRequest_t {
	uint64aligned SteamIDRemote;
};
struct P2PSessionConnectFail_t {
	uint64aligned SteamIDRemote;
	uint8 EP2PSessionError;
};
struct SocketStatusCallback_t {
	SNetSocket_t HSocket;
	SNetListenSocket_t HListenSocket;
	uint64aligned SteamIDRemote;
	int ESNetSocketState;
};
struct ScreenshotReady_t {
	ScreenshotHandle HLocal;
	EResult EResult;
};
struct VolumeHasChanged_t {
	float FlNewVolume;
};
struct MusicPlayerWantsShuffled_t {
	bool BShuffled;
};
struct MusicPlayerWantsLooped_t {
	bool BLooped;
};
struct MusicPlayerWantsVolume_t {
	float FlNewVolume;
};
struct MusicPlayerSelectsQueueEntry_t {
	int NID;
};
struct MusicPlayerSelectsPlaylistEntry_t {
	int NID;
};
struct MusicPlayerWantsPlayingRepeatStatus_t {
	int NPlayingRepeatStatus;
};
struct HTTPRequestCompleted_t {
	HTTPRequestHandle HRequest;
	uint64aligned UlContextValue;
	bool BRequestSuccessful;
	EHTTPStatusCode EStatusCode;
	uint32 UnBodySize;
};
struct HTTPRequestHeadersReceived_t {
	HTTPRequestHandle HRequest;
	uint64aligned UlContextValue;
};
struct HTTPRequestDataReceived_t {
	HTTPRequestHandle HRequest;
	uint64aligned UlContextValue;
	uint32 COffset;
	uint32 CBytesReceived;
};
struct ControllerAnalogActionData_t {
	EControllerSourceMode EMode;
	float X;
	float Y;
	bool BActive;
};
struct ControllerDigitalActionData_t {
	bool BState;
	bool BActive;
};
struct ControllerMotionData_t {
	float RotQuatX;
	float RotQuatY;
	float RotQuatZ;
	float RotQuatW;
	float PosAccelX;
	float PosAccelY;
	float PosAccelZ;
	float RotVelX;
	float RotVelY;
	float RotVelZ;
};
struct SteamUGCDetails_t {
	uint64aligned NPublishedFileId;
	EResult EResult;
	EWorkshopFileType EFileType;
	AppId_t NCreatorAppID;
	AppId_t NConsumerAppID;
	char RgchTitle[129];
	char RgchDescription[8000];
	uint64aligned UlSteamIDOwner;
	uint32 RtimeCreated;
	uint32 RtimeUpdated;
	uint32 RtimeAddedToUserList;
	ERemoteStoragePublishedFileVisibility EVisibility;
	bool BBanned;
	bool BAcceptedForUse;
	bool BTagsTruncated;
	char RgchTags[1025];
	uint64aligned HFile;
	uint64aligned HPreviewFile;
	char PchFileName[260];
	int32 NFileSize;
	int32 NPreviewFileSize;
	char RgchURL[256];
	uint32 UnVotesUp;
	uint32 UnVotesDown;
	float FlScore;
	uint32 UnNumChildren;
};
struct SteamUGCQueryCompleted_t {
	uint64aligned Handle;
	EResult EResult;
	uint32 UnNumResultsReturned;
	uint32 UnTotalMatchingResults;
	bool BCachedData;
};
struct SteamUGCRequestUGCDetailsResult_t {
	struct SteamUGCDetails_t Details;
	bool BCachedData;
};
struct CreateItemResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	bool BUserNeedsToAcceptWorkshopLegalAgreement;
};
struct SubmitItemUpdateResult_t {
	EResult EResult;
	bool BUserNeedsToAcceptWorkshopLegalAgreement;
	uint64aligned NPublishedFileId;
};
struct DownloadItemResult_t {
	AppId_t UnAppID;
	uint64aligned NPublishedFileId;
	EResult EResult;
};
struct UserFavoriteItemsListChanged_t {
	uint64aligned NPublishedFileId;
	EResult EResult;
	bool BWasAddRequest;
};
struct SetUserItemVoteResult_t {
	uint64aligned NPublishedFileId;
	EResult EResult;
	bool BVoteUp;
};
struct GetUserItemVoteResult_t {
	uint64aligned NPublishedFileId;
	EResult EResult;
	bool BVotedUp;
	bool BVotedDown;
	bool BVoteSkipped;
};
struct StartPlaytimeTrackingResult_t {
	EResult EResult;
};
struct StopPlaytimeTrackingResult_t {
	EResult EResult;
};
struct AddUGCDependencyResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	uint64aligned NChildPublishedFileId;
};
struct RemoveUGCDependencyResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	uint64aligned NChildPublishedFileId;
};
struct AddAppDependencyResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	AppId_t NAppID;
};
struct RemoveAppDependencyResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	AppId_t NAppID;
};
struct GetAppDependenciesResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
	AppId_t RgAppIDs[32];
	uint32 NNumAppDependencies;
	uint32 NTotalNumAppDependencies;
};
struct DeleteItemResult_t {
	EResult EResult;
	uint64aligned NPublishedFileId;
};
struct SteamAppInstalled_t {
	AppId_t NAppID;
};
struct SteamAppUninstalled_t {
	AppId_t NAppID;
};
struct HTML_BrowserReady_t {
	HHTMLBrowser UnBrowserHandle;
};
struct HTML_NeedsPaint_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PBGRA;
	uint32 UnWide;
	uint32 UnTall;
	uint32 UnUpdateX;
	uint32 UnUpdateY;
	uint32 UnUpdateWide;
	uint32 UnUpdateTall;
	uint32 UnScrollX;
	uint32 UnScrollY;
	float FlPageScale;
	uint32 UnPageSerial;
};
struct HTML_StartRequest_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchURL;
	const char * PchTarget;
	const char * PchPostData;
	bool BIsRedirect;
};
struct HTML_CloseBrowser_t {
	HHTMLBrowser UnBrowserHandle;
};
struct HTML_URLChanged_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchURL;
	const char * PchPostData;
	bool BIsRedirect;
	const char * PchPageTitle;
	bool BNewNavigation;
};
struct HTML_FinishedRequest_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchURL;
	const char * PchPageTitle;
};
struct HTML_OpenLinkInNewTab_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchURL;
};
struct HTML_ChangedTitle_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchTitle;
};
struct HTML_SearchResults_t {
	HHTMLBrowser UnBrowserHandle;
	uint32 UnResults;
	uint32 UnCurrentMatch;
};
struct HTML_CanGoBackAndForward_t {
	HHTMLBrowser UnBrowserHandle;
	bool BCanGoBack;
	bool BCanGoForward;
};
struct HTML_HorizontalScroll_t {
	HHTMLBrowser UnBrowserHandle;
	uint32 UnScrollMax;
	uint32 UnScrollCurrent;
	float FlPageScale;
	bool BVisible;
	uint32 UnPageSize;
};
struct HTML_VerticalScroll_t {
	HHTMLBrowser UnBrowserHandle;
	uint32 UnScrollMax;
	uint32 UnScrollCurrent;
	float FlPageScale;
	bool BVisible;
	uint32 UnPageSize;
};
struct HTML_LinkAtPosition_t {
	HHTMLBrowser UnBrowserHandle;
	uint32 X;
	uint32 Y;
	const char * PchURL;
	bool BInput;
	bool BLiveLink;
};
struct HTML_JSAlert_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchMessage;
};
struct HTML_JSConfirm_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchMessage;
};
struct HTML_FileOpenDialog_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchTitle;
	const char * PchInitialFile;
};
struct HTML_NewWindow_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchURL;
	uint32 UnX;
	uint32 UnY;
	uint32 UnWide;
	uint32 UnTall;
	HHTMLBrowser UnNewWindow_BrowserHandle;
};
struct HTML_SetCursor_t {
	HHTMLBrowser UnBrowserHandle;
	uint32 EMouseCursor;
};
struct HTML_StatusText_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchMsg;
};
struct HTML_ShowToolTip_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchMsg;
};
struct HTML_UpdateToolTip_t {
	HHTMLBrowser UnBrowserHandle;
	const char * PchMsg;
};
struct HTML_HideToolTip_t {
	HHTMLBrowser UnBrowserHandle;
};
struct HTML_BrowserRestarted_t {
	HHTMLBrowser UnBrowserHandle;
	HHTMLBrowser UnOldBrowserHandle;
};
struct SteamItemDetails_t {
	uint64aligned ItemId;
	SteamItemDef_t IDefinition;
	uint16 UnQuantity;
	uint16 UnFlags;
};
struct SteamInventoryResultReady_t {
	SteamInventoryResult_t Handle;
	EResult Result;
};
struct SteamInventoryFullUpdate_t {
	SteamInventoryResult_t Handle;
};
struct SteamInventoryEligiblePromoItemDefIDs_t {
	EResult Result;
	uint64aligned SteamID;
	int NumEligiblePromoItemDefs;
	bool BCachedData;
};
struct SteamInventoryStartPurchaseResult_t {
	EResult Result;
	uint64aligned UlOrderID;
	uint64aligned UlTransID;
};
struct SteamInventoryRequestPricesResult_t {
	EResult Result;
	char RgchCurrency[4];
};
struct BroadcastUploadStop_t {
	EBroadcastUploadResult EResult;
};
struct GetVideoURLResult_t {
	EResult EResult;
	AppId_t UnVideoAppID;
	char RgchURL[256];
};
struct GetOPFSettingsResult_t {
	EResult EResult;
	AppId_t UnVideoAppID;
};
struct GSClientApprove_t {
	uint64aligned SteamID;
	uint64aligned OwnerSteamID;
};
struct GSClientDeny_t {
	uint64aligned SteamID;
	EDenyReason EDenyReason;
	char RgchOptionalText[128];
};
struct GSClientKick_t {
	uint64aligned SteamID;
	EDenyReason EDenyReason;
};
struct GSClientAchievementStatus_t {
	uint64aligned SteamID;
	char PchAchievement[128];
	bool BUnlocked;
};
struct GSPolicyResponse_t {
	uint8 BSecure;
};
struct GSGameplayStats_t {
	EResult EResult;
	int32 NRank;
	uint32 UnTotalConnects;
	uint32 UnTotalMinutesPlayed;
};
struct GSClientGroupStatus_t {
	uint64aligned SteamIDUser;
	uint64aligned SteamIDGroup;
	bool BMember;
	bool BOfficer;
};
struct GSReputation_t {
	EResult EResult;
	uint32 UnReputationScore;
	bool BBanned;
	uint32 UnBannedIP;
	uint16 UsBannedPort;
	uint64aligned UlBannedGameID;
	uint32 UnBanExpires;
};
struct AssociateWithClanResult_t {
	EResult EResult;
};
struct ComputeNewPlayerCompatibilityResult_t {
	EResult EResult;
	int CPlayersThatDontLikeCandidate;
	int CPlayersThatCandidateDoesntLike;
	int CClanPlayersThatDontLikeCandidate;
	uint64aligned SteamIDCandidate;
};
struct GSStatsReceived_t {
	EResult EResult;
	uint64aligned SteamIDUser;
};
struct GSStatsStored_t {
	EResult EResult;
	uint64aligned SteamIDUser;
};
struct GSStatsUnloaded_t {
	uint64aligned SteamIDUser;
};
struct NewLaunchQueryParameters_t {
};
struct GCMessageAvailable_t {
	uint32 NMessageSize;
};
struct GCMessageFailed_t {
};
struct SteamInventoryDefinitionUpdate_t {
};
struct PlaybackStatusHasChanged_t {
};
struct MusicPlayerRemoteWillActivate_t {
};
struct MusicPlayerRemoteWillDeactivate_t {
};
struct MusicPlayerRemoteToFront_t {
};
struct MusicPlayerWillQuit_t {
};
struct MusicPlayerWantsPlay_t {
};
struct MusicPlayerWantsPause_t {
};
struct MusicPlayerWantsPlayPrevious_t {
};
struct MusicPlayerWantsPlayNext_t {
};
struct ScreenshotRequested_t {
};
struct ItemInstalled_t {
	AppId_t UnAppID;
	uint64aligned NPublishedFileId;
};
struct SteamServersConnected_t {
};
struct IPCFailure_t {
	uint8 EFailureType;
};
struct LicensesUpdated_t {
};
struct IPCountry_t {
};
struct SteamShutdown_t {
};
struct BroadcastUploadStart_t {
};
#pragma pack(pop)
typedef int EServerMode;
extern bool SteamInternal_GameServer_Init(uint32 unIP, uint16 usPort, uint16 usGamePort, uint16 usQueryPort, EServerMode eServerMode, const char *pchVersionString);
extern void SteamGameServer_Shutdown();
extern void SteamGameServer_RunCallbacks();
extern bool SteamGameServer_BSecure();
extern uint64 SteamGameServer_GetSteamID();
extern bool SteamAPI_Init();
extern void SteamAPI_Shutdown();
extern bool SteamAPI_RestartAppIfNecessary(uint32 unOwnAppID);
extern void SteamAPI_ReleaseCurrentThreadMemory();
extern void SteamAPI_RunCallbacks();
extern bool SteamAPI_IsSteamRunning();
extern bool SteamID_IsValid(CSteamID); // wrapper
extern HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(intp instancePtr);
extern bool SteamAPI_ISteamClient_BReleaseSteamPipe(intp instancePtr, HSteamPipe hSteamPipe);
extern HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(intp instancePtr, HSteamPipe hSteamPipe);
extern HSteamUser SteamAPI_ISteamClient_CreateLocalUser(intp instancePtr, HSteamPipe * phSteamPipe, EAccountType eAccountType);
extern void SteamAPI_ISteamClient_ReleaseUser(intp instancePtr, HSteamPipe hSteamPipe, HSteamUser hUser);
extern void SteamAPI_ISteamClient_SetLocalIPBinding(intp instancePtr, uint32 unIP, uint16 usPort);
extern void * SteamAPI_ISteamClient_GetISteamGenericInterface(intp instancePtr, HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion);
extern uint32 SteamAPI_ISteamClient_GetIPCCallCount(intp instancePtr);
extern bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(intp instancePtr);
extern HSteamUser SteamAPI_ISteamUser_GetHSteamUser(intp instancePtr);
extern bool SteamAPI_ISteamUser_BLoggedOn(intp instancePtr);
extern CSteamID SteamAPI_ISteamUser_GetSteamID(intp instancePtr);
extern int SteamAPI_ISteamUser_InitiateGameConnection(intp instancePtr, void * pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure);
extern void SteamAPI_ISteamUser_TerminateGameConnection(intp instancePtr, uint32 unIPServer, uint16 usPortServer);
extern void SteamAPI_ISteamUser_TrackAppUsageEvent(intp instancePtr, CGameID gameID, int eAppUsageEvent, const char * pchExtraInfo);
extern bool SteamAPI_ISteamUser_GetUserDataFolder(intp instancePtr, char * pchBuffer, int cubBuffer);
extern void SteamAPI_ISteamUser_StartVoiceRecording(intp instancePtr);
extern void SteamAPI_ISteamUser_StopVoiceRecording(intp instancePtr);
extern EVoiceResult SteamAPI_ISteamUser_GetAvailableVoice(intp instancePtr, uint32 * pcbCompressed, uint32 * pcbUncompressed_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated);
extern EVoiceResult SteamAPI_ISteamUser_GetVoice(intp instancePtr, bool bWantCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, bool bWantUncompressed_Deprecated, void * pUncompressedDestBuffer_Deprecated, uint32 cbUncompressedDestBufferSize_Deprecated, uint32 * nUncompressBytesWritten_Deprecated, uint32 nUncompressedVoiceDesiredSampleRate_Deprecated);
extern EVoiceResult SteamAPI_ISteamUser_DecompressVoice(intp instancePtr, const void * pCompressed, uint32 cbCompressed, void * pDestBuffer, uint32 cbDestBufferSize, uint32 * nBytesWritten, uint32 nDesiredSampleRate);
extern uint32 SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(intp instancePtr);
extern HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(intp instancePtr, void * pTicket, int cbMaxTicket, uint32 * pcbTicket);
extern EBeginAuthSessionResult SteamAPI_ISteamUser_BeginAuthSession(intp instancePtr, const void * pAuthTicket, int cbAuthTicket, CSteamID steamID);
extern void SteamAPI_ISteamUser_EndAuthSession(intp instancePtr, CSteamID steamID);
extern void SteamAPI_ISteamUser_CancelAuthTicket(intp instancePtr, HAuthTicket hAuthTicket);
extern EUserHasLicenseForAppResult SteamAPI_ISteamUser_UserHasLicenseForApp(intp instancePtr, CSteamID steamID, AppId_t appID);
extern bool SteamAPI_ISteamUser_BIsBehindNAT(intp instancePtr);
extern void SteamAPI_ISteamUser_AdvertiseGame(intp instancePtr, CSteamID steamIDGameServer, uint32 unIPServer, uint16 usPortServer);
extern SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(intp instancePtr, void * pDataToInclude, int cbDataToInclude);
extern bool SteamAPI_ISteamUser_GetEncryptedAppTicket(intp instancePtr, void * pTicket, int cbMaxTicket, uint32 * pcbTicket);
extern int SteamAPI_ISteamUser_GetGameBadgeLevel(intp instancePtr, int nSeries, bool bFoil);
extern int SteamAPI_ISteamUser_GetPlayerSteamLevel(intp instancePtr);
extern SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(intp instancePtr, const char * pchRedirectURL);
extern bool SteamAPI_ISteamUser_BIsPhoneVerified(intp instancePtr);
extern bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(intp instancePtr);
extern bool SteamAPI_ISteamUser_BIsPhoneIdentifying(intp instancePtr);
extern bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(intp instancePtr);
extern const char * SteamAPI_ISteamFriends_GetPersonaName(intp instancePtr);
extern SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(intp instancePtr, const char * pchPersonaName);
extern EPersonaState SteamAPI_ISteamFriends_GetPersonaState(intp instancePtr);
extern int SteamAPI_ISteamFriends_GetFriendCount(intp instancePtr, int iFriendFlags);
extern CSteamID SteamAPI_ISteamFriends_GetFriendByIndex(intp instancePtr, int iFriend, int iFriendFlags);
extern EFriendRelationship SteamAPI_ISteamFriends_GetFriendRelationship(intp instancePtr, CSteamID steamIDFriend);
extern EPersonaState SteamAPI_ISteamFriends_GetFriendPersonaState(intp instancePtr, CSteamID steamIDFriend);
extern const char * SteamAPI_ISteamFriends_GetFriendPersonaName(intp instancePtr, CSteamID steamIDFriend);
extern bool SteamAPI_ISteamFriends_GetFriendGamePlayed(intp instancePtr, CSteamID steamIDFriend, struct FriendGameInfo_t * pFriendGameInfo);
extern const char * SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(intp instancePtr, CSteamID steamIDFriend, int iPersonaName);
extern int SteamAPI_ISteamFriends_GetFriendSteamLevel(intp instancePtr, CSteamID steamIDFriend);
extern const char * SteamAPI_ISteamFriends_GetPlayerNickname(intp instancePtr, CSteamID steamIDPlayer);
extern int SteamAPI_ISteamFriends_GetFriendsGroupCount(intp instancePtr);
extern FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(intp instancePtr, int iFG);
extern const char * SteamAPI_ISteamFriends_GetFriendsGroupName(intp instancePtr, FriendsGroupID_t friendsGroupID);
extern int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(intp instancePtr, FriendsGroupID_t friendsGroupID);
extern void SteamAPI_ISteamFriends_GetFriendsGroupMembersList(intp instancePtr, FriendsGroupID_t friendsGroupID, CSteamID * pOutSteamIDMembers, int nMembersCount);
extern bool SteamAPI_ISteamFriends_HasFriend(intp instancePtr, CSteamID steamIDFriend, int iFriendFlags);
extern int SteamAPI_ISteamFriends_GetClanCount(intp instancePtr);
extern CSteamID SteamAPI_ISteamFriends_GetClanByIndex(intp instancePtr, int iClan);
extern const char * SteamAPI_ISteamFriends_GetClanName(intp instancePtr, CSteamID steamIDClan);
extern const char * SteamAPI_ISteamFriends_GetClanTag(intp instancePtr, CSteamID steamIDClan);
extern bool SteamAPI_ISteamFriends_GetClanActivityCounts(intp instancePtr, CSteamID steamIDClan, int * pnOnline, int * pnInGame, int * pnChatting);
extern SteamAPICall_t SteamAPI_ISteamFriends_DownloadClanActivityCounts(intp instancePtr, CSteamID * psteamIDClans, int cClansToRequest);
extern int SteamAPI_ISteamFriends_GetFriendCountFromSource(intp instancePtr, CSteamID steamIDSource);
extern CSteamID SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(intp instancePtr, CSteamID steamIDSource, int iFriend);
extern bool SteamAPI_ISteamFriends_IsUserInSource(intp instancePtr, CSteamID steamIDUser, CSteamID steamIDSource);
extern void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(intp instancePtr, CSteamID steamIDUser, bool bSpeaking);
extern void SteamAPI_ISteamFriends_ActivateGameOverlay(intp instancePtr, const char * pchDialog);
extern void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(intp instancePtr, const char * pchDialog, CSteamID steamID);
extern void SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(intp instancePtr, const char * pchURL);
extern void SteamAPI_ISteamFriends_ActivateGameOverlayToStore(intp instancePtr, AppId_t nAppID, EOverlayToStoreFlag eFlag);
extern void SteamAPI_ISteamFriends_SetPlayedWith(intp instancePtr, CSteamID steamIDUserPlayedWith);
extern void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(intp instancePtr, CSteamID steamIDLobby);
extern int SteamAPI_ISteamFriends_GetSmallFriendAvatar(intp instancePtr, CSteamID steamIDFriend);
extern int SteamAPI_ISteamFriends_GetMediumFriendAvatar(intp instancePtr, CSteamID steamIDFriend);
extern int SteamAPI_ISteamFriends_GetLargeFriendAvatar(intp instancePtr, CSteamID steamIDFriend);
extern bool SteamAPI_ISteamFriends_RequestUserInformation(intp instancePtr, CSteamID steamIDUser, bool bRequireNameOnly);
extern SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(intp instancePtr, CSteamID steamIDClan);
extern CSteamID SteamAPI_ISteamFriends_GetClanOwner(intp instancePtr, CSteamID steamIDClan);
extern int SteamAPI_ISteamFriends_GetClanOfficerCount(intp instancePtr, CSteamID steamIDClan);
extern CSteamID SteamAPI_ISteamFriends_GetClanOfficerByIndex(intp instancePtr, CSteamID steamIDClan, int iOfficer);
extern uint32 SteamAPI_ISteamFriends_GetUserRestrictions(intp instancePtr);
extern bool SteamAPI_ISteamFriends_SetRichPresence(intp instancePtr, const char * pchKey, const char * pchValue);
extern void SteamAPI_ISteamFriends_ClearRichPresence(intp instancePtr);
extern const char * SteamAPI_ISteamFriends_GetFriendRichPresence(intp instancePtr, CSteamID steamIDFriend, const char * pchKey);
extern int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(intp instancePtr, CSteamID steamIDFriend);
extern const char * SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(intp instancePtr, CSteamID steamIDFriend, int iKey);
extern void SteamAPI_ISteamFriends_RequestFriendRichPresence(intp instancePtr, CSteamID steamIDFriend);
extern bool SteamAPI_ISteamFriends_InviteUserToGame(intp instancePtr, CSteamID steamIDFriend, const char * pchConnectString);
extern int SteamAPI_ISteamFriends_GetCoplayFriendCount(intp instancePtr);
extern CSteamID SteamAPI_ISteamFriends_GetCoplayFriend(intp instancePtr, int iCoplayFriend);
extern int SteamAPI_ISteamFriends_GetFriendCoplayTime(intp instancePtr, CSteamID steamIDFriend);
extern AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(intp instancePtr, CSteamID steamIDFriend);
extern SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(intp instancePtr, CSteamID steamIDClan);
extern bool SteamAPI_ISteamFriends_LeaveClanChatRoom(intp instancePtr, CSteamID steamIDClan);
extern int SteamAPI_ISteamFriends_GetClanChatMemberCount(intp instancePtr, CSteamID steamIDClan);
extern CSteamID SteamAPI_ISteamFriends_GetChatMemberByIndex(intp instancePtr, CSteamID steamIDClan, int iUser);
extern bool SteamAPI_ISteamFriends_SendClanChatMessage(intp instancePtr, CSteamID steamIDClanChat, const char * pchText);
extern int SteamAPI_ISteamFriends_GetClanChatMessage(intp instancePtr, CSteamID steamIDClanChat, int iMessage, void * prgchText, int cchTextMax, EChatEntryType * peChatEntryType, CSteamID * psteamidChatter);
extern bool SteamAPI_ISteamFriends_IsClanChatAdmin(intp instancePtr, CSteamID steamIDClanChat, CSteamID steamIDUser);
extern bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(intp instancePtr, CSteamID steamIDClanChat);
extern bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(intp instancePtr, CSteamID steamIDClanChat);
extern bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(intp instancePtr, CSteamID steamIDClanChat);
extern bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(intp instancePtr, bool bInterceptEnabled);
extern bool SteamAPI_ISteamFriends_ReplyToFriendMessage(intp instancePtr, CSteamID steamIDFriend, const char * pchMsgToSend);
extern int SteamAPI_ISteamFriends_GetFriendMessage(intp instancePtr, CSteamID steamIDFriend, int iMessageID, void * pvData, int cubData, EChatEntryType * peChatEntryType);
extern SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(intp instancePtr, CSteamID steamID);
extern SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(intp instancePtr, CSteamID steamID);
extern SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(intp instancePtr, uint32 unStartIndex);
extern bool SteamAPI_ISteamFriends_IsClanPublic(intp instancePtr, CSteamID steamIDClan);
extern bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(intp instancePtr, CSteamID steamIDClan);
extern uint32 SteamAPI_ISteamUtils_GetSecondsSinceAppActive(intp instancePtr);
extern uint32 SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(intp instancePtr);
extern EUniverse SteamAPI_ISteamUtils_GetConnectedUniverse(intp instancePtr);
extern uint32 SteamAPI_ISteamUtils_GetServerRealTime(intp instancePtr);
extern const char * SteamAPI_ISteamUtils_GetIPCountry(intp instancePtr);
extern bool SteamAPI_ISteamUtils_GetImageSize(intp instancePtr, int iImage, uint32 * pnWidth, uint32 * pnHeight);
extern bool SteamAPI_ISteamUtils_GetImageRGBA(intp instancePtr, int iImage, uint8 * pubDest, int nDestBufferSize);
extern bool SteamAPI_ISteamUtils_GetCSERIPPort(intp instancePtr, uint32 * unIP, uint16 * usPort);
extern uint8 SteamAPI_ISteamUtils_GetCurrentBatteryPower(intp instancePtr);
extern uint32 SteamAPI_ISteamUtils_GetAppID(intp instancePtr);
extern void SteamAPI_ISteamUtils_SetOverlayNotificationPosition(intp instancePtr, ENotificationPosition eNotificationPosition);
extern bool SteamAPI_ISteamUtils_IsAPICallCompleted(intp instancePtr, SteamAPICall_t hSteamAPICall, bool * pbFailed);
extern ESteamAPICallFailure SteamAPI_ISteamUtils_GetAPICallFailureReason(intp instancePtr, SteamAPICall_t hSteamAPICall);
extern bool SteamAPI_ISteamUtils_GetAPICallResult(intp instancePtr, SteamAPICall_t hSteamAPICall, void * pCallback, int cubCallback, int iCallbackExpected, bool * pbFailed);
extern uint32 SteamAPI_ISteamUtils_GetIPCCallCount(intp instancePtr);
extern bool SteamAPI_ISteamUtils_IsOverlayEnabled(intp instancePtr);
extern bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(intp instancePtr);
extern SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(intp instancePtr, const char * szFileName);
extern bool SteamAPI_ISteamUtils_ShowGamepadTextInput(intp instancePtr, EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, const char * pchDescription, uint32 unCharMax, const char * pchExistingText);
extern uint32 SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(intp instancePtr);
extern bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(intp instancePtr, char * pchText, uint32 cchText);
extern const char * SteamAPI_ISteamUtils_GetSteamUILanguage(intp instancePtr);
extern bool SteamAPI_ISteamUtils_IsSteamRunningInVR(intp instancePtr);
extern void SteamAPI_ISteamUtils_SetOverlayNotificationInset(intp instancePtr, int nHorizontalInset, int nVerticalInset);
extern bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(intp instancePtr);
extern void SteamAPI_ISteamUtils_StartVRDashboard(intp instancePtr);
extern bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(intp instancePtr);
extern void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(intp instancePtr, bool bEnabled);
extern int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(intp instancePtr);
extern bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(intp instancePtr, int iGame, AppId_t * pnAppID, uint32 * pnIP, uint16 * pnConnPort, uint16 * pnQueryPort, uint32 * punFlags, uint32 * pRTime32LastPlayedOnServer);
extern int SteamAPI_ISteamMatchmaking_AddFavoriteGame(intp instancePtr, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer);
extern bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(intp instancePtr, AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags);
extern SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(intp instancePtr);
extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(intp instancePtr, const char * pchKeyToMatch, const char * pchValueToMatch, ELobbyComparison eComparisonType);
extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(intp instancePtr, const char * pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);
extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(intp instancePtr, const char * pchKeyToMatch, int nValueToBeCloseTo);
extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(intp instancePtr, int nSlotsAvailable);
extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(intp instancePtr, ELobbyDistanceFilter eLobbyDistanceFilter);
extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(intp instancePtr, int cMaxResults);
extern void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(intp instancePtr, CSteamID steamIDLobby);
extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyByIndex(intp instancePtr, int iLobby);
extern SteamAPICall_t SteamAPI_ISteamMatchmaking_CreateLobby(intp instancePtr, ELobbyType eLobbyType, int cMaxMembers);
extern SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(intp instancePtr, CSteamID steamIDLobby);
extern void SteamAPI_ISteamMatchmaking_LeaveLobby(intp instancePtr, CSteamID steamIDLobby);
extern bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(intp instancePtr, CSteamID steamIDLobby, CSteamID steamIDInvitee);
extern int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(intp instancePtr, CSteamID steamIDLobby);
extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(intp instancePtr, CSteamID steamIDLobby, int iMember);
extern const char * SteamAPI_ISteamMatchmaking_GetLobbyData(intp instancePtr, CSteamID steamIDLobby, const char * pchKey);
extern bool SteamAPI_ISteamMatchmaking_SetLobbyData(intp instancePtr, CSteamID steamIDLobby, const char * pchKey, const char * pchValue);
extern int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(intp instancePtr, CSteamID steamIDLobby);
extern bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(intp instancePtr, CSteamID steamIDLobby, int iLobbyData, char * pchKey, int cchKeyBufferSize, char * pchValue, int cchValueBufferSize);
extern bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(intp instancePtr, CSteamID steamIDLobby, const char * pchKey);
extern const char * SteamAPI_ISteamMatchmaking_GetLobbyMemberData(intp instancePtr, CSteamID steamIDLobby, CSteamID steamIDUser, const char * pchKey);
extern void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(intp instancePtr, CSteamID steamIDLobby, const char * pchKey, const char * pchValue);
extern bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(intp instancePtr, CSteamID steamIDLobby, const void * pvMsgBody, int cubMsgBody);
extern int SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(intp instancePtr, CSteamID steamIDLobby, int iChatID, CSteamID * pSteamIDUser, void * pvData, int cubData, EChatEntryType * peChatEntryType);
extern bool SteamAPI_ISteamMatchmaking_RequestLobbyData(intp instancePtr, CSteamID steamIDLobby);
extern void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(intp instancePtr, CSteamID steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, CSteamID steamIDGameServer);
extern bool SteamAPI_ISteamMatchmaking_GetLobbyGameServer(intp instancePtr, CSteamID steamIDLobby, uint32 * punGameServerIP, uint16 * punGameServerPort, CSteamID * psteamIDGameServer);
extern bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(intp instancePtr, CSteamID steamIDLobby, int cMaxMembers);
extern int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(intp instancePtr, CSteamID steamIDLobby);
extern bool SteamAPI_ISteamMatchmaking_SetLobbyType(intp instancePtr, CSteamID steamIDLobby, ELobbyType eLobbyType);
extern bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(intp instancePtr, CSteamID steamIDLobby, bool bLobbyJoinable);
extern CSteamID SteamAPI_ISteamMatchmaking_GetLobbyOwner(intp instancePtr, CSteamID steamIDLobby);
extern bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(intp instancePtr, CSteamID steamIDLobby, CSteamID steamIDNewOwner);
extern bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(intp instancePtr, CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);
extern void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(intp instancePtr, HServerListRequest hServerListRequest);
extern gameserveritem_t * SteamAPI_ISteamMatchmakingServers_GetServerDetails(intp instancePtr, HServerListRequest hRequest, int iServer);
extern void SteamAPI_ISteamMatchmakingServers_CancelQuery(intp instancePtr, HServerListRequest hRequest);
extern void SteamAPI_ISteamMatchmakingServers_RefreshQuery(intp instancePtr, HServerListRequest hRequest);
extern bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(intp instancePtr, HServerListRequest hRequest);
extern int SteamAPI_ISteamMatchmakingServers_GetServerCount(intp instancePtr, HServerListRequest hRequest);
extern void SteamAPI_ISteamMatchmakingServers_RefreshServer(intp instancePtr, HServerListRequest hRequest, int iServer);
extern void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(intp instancePtr, HServerQuery hServerQuery);
extern bool SteamAPI_ISteamRemoteStorage_FileWrite(intp instancePtr, const char * pchFile, const void * pvData, int32 cubData);
extern int32 SteamAPI_ISteamRemoteStorage_FileRead(intp instancePtr, const char * pchFile, void * pvData, int32 cubDataToRead);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(intp instancePtr, const char * pchFile, const void * pvData, uint32 cubData);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(intp instancePtr, const char * pchFile, uint32 nOffset, uint32 cubToRead);
extern bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(intp instancePtr, SteamAPICall_t hReadCall, void * pvBuffer, uint32 cubToRead);
extern bool SteamAPI_ISteamRemoteStorage_FileForget(intp instancePtr, const char * pchFile);
extern bool SteamAPI_ISteamRemoteStorage_FileDelete(intp instancePtr, const char * pchFile);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(intp instancePtr, const char * pchFile);
extern bool SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(intp instancePtr, const char * pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);
extern UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(intp instancePtr, const char * pchFile);
extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(intp instancePtr, UGCFileWriteStreamHandle_t writeHandle, const void * pvData, int32 cubData);
extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(intp instancePtr, UGCFileWriteStreamHandle_t writeHandle);
extern bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(intp instancePtr, UGCFileWriteStreamHandle_t writeHandle);
extern bool SteamAPI_ISteamRemoteStorage_FileExists(intp instancePtr, const char * pchFile);
extern bool SteamAPI_ISteamRemoteStorage_FilePersisted(intp instancePtr, const char * pchFile);
extern int32 SteamAPI_ISteamRemoteStorage_GetFileSize(intp instancePtr, const char * pchFile);
extern int64 SteamAPI_ISteamRemoteStorage_GetFileTimestamp(intp instancePtr, const char * pchFile);
extern ERemoteStoragePlatform SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(intp instancePtr, const char * pchFile);
extern int32 SteamAPI_ISteamRemoteStorage_GetFileCount(intp instancePtr);
extern const char * SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(intp instancePtr, int iFile, int32 * pnFileSizeInBytes);
extern bool SteamAPI_ISteamRemoteStorage_GetQuota(intp instancePtr, uint64 * pnTotalBytes, uint64 * puAvailableBytes);
extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(intp instancePtr);
extern bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(intp instancePtr);
extern void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(intp instancePtr, bool bEnabled);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(intp instancePtr, UGCHandle_t hContent, uint32 unPriority);
extern bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(intp instancePtr, UGCHandle_t hContent, int32 * pnBytesDownloaded, int32 * pnBytesExpected);
extern bool SteamAPI_ISteamRemoteStorage_GetUGCDetails(intp instancePtr, UGCHandle_t hContent, AppId_t * pnAppID, char ** ppchName, int32 * pnFileSizeInBytes, CSteamID * pSteamIDOwner);
extern int32 SteamAPI_ISteamRemoteStorage_UGCRead(intp instancePtr, UGCHandle_t hContent, void * pvData, int32 cubDataToRead, uint32 cOffset, EUGCReadAction eAction);
extern int32 SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(intp instancePtr);
extern UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(intp instancePtr, int32 iCachedContent);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(intp instancePtr, const char * pchFile, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, struct SteamParamStringArray_t * pTags, EWorkshopFileType eWorkshopFileType);
extern PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(intp instancePtr, PublishedFileId_t unPublishedFileId);
extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(intp instancePtr, PublishedFileUpdateHandle_t updateHandle, const char * pchFile);
extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(intp instancePtr, PublishedFileUpdateHandle_t updateHandle, const char * pchPreviewFile);
extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(intp instancePtr, PublishedFileUpdateHandle_t updateHandle, const char * pchTitle);
extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(intp instancePtr, PublishedFileUpdateHandle_t updateHandle, const char * pchDescription);
extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(intp instancePtr, PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);
extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(intp instancePtr, PublishedFileUpdateHandle_t updateHandle, struct SteamParamStringArray_t * pTags);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(intp instancePtr, PublishedFileUpdateHandle_t updateHandle);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(intp instancePtr, PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(intp instancePtr, PublishedFileId_t unPublishedFileId);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(intp instancePtr, uint32 unStartIndex);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(intp instancePtr, PublishedFileId_t unPublishedFileId);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(intp instancePtr, uint32 unStartIndex);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(intp instancePtr, PublishedFileId_t unPublishedFileId);
extern bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(intp instancePtr, PublishedFileUpdateHandle_t updateHandle, const char * pchChangeDescription);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(intp instancePtr, PublishedFileId_t unPublishedFileId);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(intp instancePtr, PublishedFileId_t unPublishedFileId, bool bVoteUp);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(intp instancePtr, PublishedFileId_t unPublishedFileId);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(intp instancePtr, CSteamID steamId, uint32 unStartIndex, struct SteamParamStringArray_t * pRequiredTags, struct SteamParamStringArray_t * pExcludedTags);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_PublishVideo(intp instancePtr, EWorkshopVideoProvider eVideoProvider, const char * pchVideoAccount, const char * pchVideoIdentifier, const char * pchPreviewFile, AppId_t nConsumerAppId, const char * pchTitle, const char * pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, struct SteamParamStringArray_t * pTags);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(intp instancePtr, PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(intp instancePtr, EWorkshopFileAction eAction, uint32 unStartIndex);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(intp instancePtr, EWorkshopEnumerationType eEnumerationType, uint32 unStartIndex, uint32 unCount, uint32 unDays, struct SteamParamStringArray_t * pTags, struct SteamParamStringArray_t * pUserTags);
extern SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(intp instancePtr, UGCHandle_t hContent, const char * pchLocation, uint32 unPriority);
extern bool SteamAPI_ISteamUserStats_RequestCurrentStats(intp instancePtr);
extern bool SteamAPI_ISteamUserStats_GetStat(intp instancePtr, const char * pchName, int32 * pData);
extern bool SteamAPI_ISteamUserStats_GetStat0(intp instancePtr, const char * pchName, float * pData);
extern bool SteamAPI_ISteamUserStats_SetStat(intp instancePtr, const char * pchName, int32 nData);
extern bool SteamAPI_ISteamUserStats_SetStat0(intp instancePtr, const char * pchName, float fData);
extern bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(intp instancePtr, const char * pchName, float flCountThisSession, double dSessionLength);
extern bool SteamAPI_ISteamUserStats_GetAchievement(intp instancePtr, const char * pchName, bool * pbAchieved);
extern bool SteamAPI_ISteamUserStats_SetAchievement(intp instancePtr, const char * pchName);
extern bool SteamAPI_ISteamUserStats_ClearAchievement(intp instancePtr, const char * pchName);
extern bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(intp instancePtr, const char * pchName, bool * pbAchieved, uint32 * punUnlockTime);
extern bool SteamAPI_ISteamUserStats_StoreStats(intp instancePtr);
extern int SteamAPI_ISteamUserStats_GetAchievementIcon(intp instancePtr, const char * pchName);
extern const char * SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(intp instancePtr, const char * pchName, const char * pchKey);
extern bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(intp instancePtr, const char * pchName, uint32 nCurProgress, uint32 nMaxProgress);
extern uint32 SteamAPI_ISteamUserStats_GetNumAchievements(intp instancePtr);
extern const char * SteamAPI_ISteamUserStats_GetAchievementName(intp instancePtr, uint32 iAchievement);
extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(intp instancePtr, CSteamID steamIDUser);
extern bool SteamAPI_ISteamUserStats_GetUserStat(intp instancePtr, CSteamID steamIDUser, const char * pchName, int32 * pData);
extern bool SteamAPI_ISteamUserStats_GetUserStat0(intp instancePtr, CSteamID steamIDUser, const char * pchName, float * pData);
extern bool SteamAPI_ISteamUserStats_GetUserAchievement(intp instancePtr, CSteamID steamIDUser, const char * pchName, bool * pbAchieved);
extern bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(intp instancePtr, CSteamID steamIDUser, const char * pchName, bool * pbAchieved, uint32 * punUnlockTime);
extern bool SteamAPI_ISteamUserStats_ResetAllStats(intp instancePtr, bool bAchievementsToo);
extern SteamAPICall_t SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(intp instancePtr, const char * pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);
extern SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(intp instancePtr, const char * pchLeaderboardName);
extern const char * SteamAPI_ISteamUserStats_GetLeaderboardName(intp instancePtr, SteamLeaderboard_t hSteamLeaderboard);
extern int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(intp instancePtr, SteamLeaderboard_t hSteamLeaderboard);
extern ELeaderboardSortMethod SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(intp instancePtr, SteamLeaderboard_t hSteamLeaderboard);
extern ELeaderboardDisplayType SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(intp instancePtr, SteamLeaderboard_t hSteamLeaderboard);
extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(intp instancePtr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);
extern SteamAPICall_t SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(intp instancePtr, SteamLeaderboard_t hSteamLeaderboard, CSteamID * prgUsers, int cUsers);
extern bool SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(intp instancePtr, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, struct LeaderboardEntry_t * pLeaderboardEntry, int32 * pDetails, int cDetailsMax);
extern SteamAPICall_t SteamAPI_ISteamUserStats_UploadLeaderboardScore(intp instancePtr, SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int32 nScore, const int32 * pScoreDetails, int cScoreDetailsCount);
extern SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(intp instancePtr, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);
extern SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(intp instancePtr);
extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(intp instancePtr);
extern int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(intp instancePtr, char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved);
extern int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(intp instancePtr, int iIteratorPrevious, char * pchName, uint32 unNameBufLen, float * pflPercent, bool * pbAchieved);
extern bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(intp instancePtr, const char * pchName, float * pflPercent);
extern SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(intp instancePtr, int nHistoryDays);
extern bool SteamAPI_ISteamUserStats_GetGlobalStat(intp instancePtr, const char * pchStatName, int64 * pData);
extern bool SteamAPI_ISteamUserStats_GetGlobalStat0(intp instancePtr, const char * pchStatName, double * pData);
extern int32 SteamAPI_ISteamUserStats_GetGlobalStatHistory(intp instancePtr, const char * pchStatName, int64 * pData, uint32 cubData);
extern int32 SteamAPI_ISteamUserStats_GetGlobalStatHistory0(intp instancePtr, const char * pchStatName, double * pData, uint32 cubData);
extern bool SteamAPI_ISteamApps_BIsSubscribed(intp instancePtr);
extern bool SteamAPI_ISteamApps_BIsLowViolence(intp instancePtr);
extern bool SteamAPI_ISteamApps_BIsCybercafe(intp instancePtr);
extern bool SteamAPI_ISteamApps_BIsVACBanned(intp instancePtr);
extern const char * SteamAPI_ISteamApps_GetCurrentGameLanguage(intp instancePtr);
extern const char * SteamAPI_ISteamApps_GetAvailableGameLanguages(intp instancePtr);
extern bool SteamAPI_ISteamApps_BIsSubscribedApp(intp instancePtr, AppId_t appID);
extern bool SteamAPI_ISteamApps_BIsDlcInstalled(intp instancePtr, AppId_t appID);
extern uint32 SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(intp instancePtr, AppId_t nAppID);
extern bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(intp instancePtr);
extern int SteamAPI_ISteamApps_GetDLCCount(intp instancePtr);
extern bool SteamAPI_ISteamApps_BGetDLCDataByIndex(intp instancePtr, int iDLC, AppId_t * pAppID, bool * pbAvailable, char * pchName, int cchNameBufferSize);
extern void SteamAPI_ISteamApps_InstallDLC(intp instancePtr, AppId_t nAppID);
extern void SteamAPI_ISteamApps_UninstallDLC(intp instancePtr, AppId_t nAppID);
extern void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(intp instancePtr, AppId_t nAppID);
extern bool SteamAPI_ISteamApps_GetCurrentBetaName(intp instancePtr, char * pchName, int cchNameBufferSize);
extern bool SteamAPI_ISteamApps_MarkContentCorrupt(intp instancePtr, bool bMissingFilesOnly);
extern uint32 SteamAPI_ISteamApps_GetInstalledDepots(intp instancePtr, AppId_t appID, DepotId_t * pvecDepots, uint32 cMaxDepots);
extern uint32 SteamAPI_ISteamApps_GetAppInstallDir(intp instancePtr, AppId_t appID, char * pchFolder, uint32 cchFolderBufferSize);
extern bool SteamAPI_ISteamApps_BIsAppInstalled(intp instancePtr, AppId_t appID);
extern CSteamID SteamAPI_ISteamApps_GetAppOwner(intp instancePtr);
extern const char * SteamAPI_ISteamApps_GetLaunchQueryParam(intp instancePtr, const char * pchKey);
extern bool SteamAPI_ISteamApps_GetDlcDownloadProgress(intp instancePtr, AppId_t nAppID, uint64 * punBytesDownloaded, uint64 * punBytesTotal);
extern int SteamAPI_ISteamApps_GetAppBuildId(intp instancePtr);
extern void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(intp instancePtr);
extern SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(intp instancePtr, const char * pszFileName);
extern bool SteamAPI_ISteamNetworking_SendP2PPacket(intp instancePtr, CSteamID steamIDRemote, const void * pubData, uint32 cubData, EP2PSend eP2PSendType, int nChannel);
extern bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(intp instancePtr, uint32 * pcubMsgSize, int nChannel);
extern bool SteamAPI_ISteamNetworking_ReadP2PPacket(intp instancePtr, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, CSteamID * psteamIDRemote, int nChannel);
extern bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(intp instancePtr, CSteamID steamIDRemote);
extern bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(intp instancePtr, CSteamID steamIDRemote);
extern bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(intp instancePtr, CSteamID steamIDRemote, int nChannel);
extern bool SteamAPI_ISteamNetworking_GetP2PSessionState(intp instancePtr, CSteamID steamIDRemote, struct P2PSessionState_t * pConnectionState);
extern bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(intp instancePtr, bool bAllow);
extern SNetListenSocket_t SteamAPI_ISteamNetworking_CreateListenSocket(intp instancePtr, int nVirtualP2PPort, uint32 nIP, uint16 nPort, bool bAllowUseOfPacketRelay);
extern SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(intp instancePtr, CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);
extern SNetSocket_t SteamAPI_ISteamNetworking_CreateConnectionSocket(intp instancePtr, uint32 nIP, uint16 nPort, int nTimeoutSec);
extern bool SteamAPI_ISteamNetworking_DestroySocket(intp instancePtr, SNetSocket_t hSocket, bool bNotifyRemoteEnd);
extern bool SteamAPI_ISteamNetworking_DestroyListenSocket(intp instancePtr, SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);
extern bool SteamAPI_ISteamNetworking_SendDataOnSocket(intp instancePtr, SNetSocket_t hSocket, void * pubData, uint32 cubData, bool bReliable);
extern bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(intp instancePtr, SNetSocket_t hSocket, uint32 * pcubMsgSize);
extern bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(intp instancePtr, SNetSocket_t hSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize);
extern bool SteamAPI_ISteamNetworking_IsDataAvailable(intp instancePtr, SNetListenSocket_t hListenSocket, uint32 * pcubMsgSize, SNetSocket_t * phSocket);
extern bool SteamAPI_ISteamNetworking_RetrieveData(intp instancePtr, SNetListenSocket_t hListenSocket, void * pubDest, uint32 cubDest, uint32 * pcubMsgSize, SNetSocket_t * phSocket);
extern bool SteamAPI_ISteamNetworking_GetSocketInfo(intp instancePtr, SNetSocket_t hSocket, CSteamID * pSteamIDRemote, int * peSocketStatus, uint32 * punIPRemote, uint16 * punPortRemote);
extern bool SteamAPI_ISteamNetworking_GetListenSocketInfo(intp instancePtr, SNetListenSocket_t hListenSocket, uint32 * pnIP, uint16 * pnPort);
extern ESNetSocketConnectionType SteamAPI_ISteamNetworking_GetSocketConnectionType(intp instancePtr, SNetSocket_t hSocket);
extern int SteamAPI_ISteamNetworking_GetMaxPacketSize(intp instancePtr, SNetSocket_t hSocket);
extern ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(intp instancePtr, void * pubRGB, uint32 cubRGB, int nWidth, int nHeight);
extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(intp instancePtr, const char * pchFilename, const char * pchThumbnailFilename, int nWidth, int nHeight);
extern void SteamAPI_ISteamScreenshots_TriggerScreenshot(intp instancePtr);
extern void SteamAPI_ISteamScreenshots_HookScreenshots(intp instancePtr, bool bHook);
extern bool SteamAPI_ISteamScreenshots_SetLocation(intp instancePtr, ScreenshotHandle hScreenshot, const char * pchLocation);
extern bool SteamAPI_ISteamScreenshots_TagUser(intp instancePtr, ScreenshotHandle hScreenshot, CSteamID steamID);
extern bool SteamAPI_ISteamScreenshots_TagPublishedFile(intp instancePtr, ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);
extern bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(intp instancePtr);
extern ScreenshotHandle SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(intp instancePtr, EVRScreenshotType eType, const char * pchFilename, const char * pchVRFilename);
extern bool SteamAPI_ISteamMusic_BIsEnabled(intp instancePtr);
extern bool SteamAPI_ISteamMusic_BIsPlaying(intp instancePtr);
extern EAudioPlayback SteamAPI_ISteamMusic_GetPlaybackStatus(intp instancePtr);
extern void SteamAPI_ISteamMusic_Play(intp instancePtr);
extern void SteamAPI_ISteamMusic_Pause(intp instancePtr);
extern void SteamAPI_ISteamMusic_PlayPrevious(intp instancePtr);
extern void SteamAPI_ISteamMusic_PlayNext(intp instancePtr);
extern void SteamAPI_ISteamMusic_SetVolume(intp instancePtr, float flVolume);
extern float SteamAPI_ISteamMusic_GetVolume(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(intp instancePtr, const char * pchName);
extern bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_BActivationSuccess(intp instancePtr, bool bValue);
extern bool SteamAPI_ISteamMusicRemote_SetDisplayName(intp instancePtr, const char * pchDisplayName);
extern bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(intp instancePtr, void * pvBuffer, uint32 cbBufferLength);
extern bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(intp instancePtr, bool bValue);
extern bool SteamAPI_ISteamMusicRemote_EnablePlayNext(intp instancePtr, bool bValue);
extern bool SteamAPI_ISteamMusicRemote_EnableShuffled(intp instancePtr, bool bValue);
extern bool SteamAPI_ISteamMusicRemote_EnableLooped(intp instancePtr, bool bValue);
extern bool SteamAPI_ISteamMusicRemote_EnableQueue(intp instancePtr, bool bValue);
extern bool SteamAPI_ISteamMusicRemote_EnablePlaylists(intp instancePtr, bool bValue);
extern bool SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(intp instancePtr, EAudioPlayback nStatus);
extern bool SteamAPI_ISteamMusicRemote_UpdateShuffled(intp instancePtr, bool bValue);
extern bool SteamAPI_ISteamMusicRemote_UpdateLooped(intp instancePtr, bool bValue);
extern bool SteamAPI_ISteamMusicRemote_UpdateVolume(intp instancePtr, float flValue);
extern bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(intp instancePtr, bool bAvailable);
extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(intp instancePtr, const char * pchText);
extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(intp instancePtr, int nValue);
extern bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(intp instancePtr, void * pvBuffer, uint32 cbBufferLength);
extern bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_QueueWillChange(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_SetQueueEntry(intp instancePtr, int nID, int nPosition, const char * pchEntryText);
extern bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(intp instancePtr, int nID);
extern bool SteamAPI_ISteamMusicRemote_QueueDidChange(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(intp instancePtr);
extern bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(intp instancePtr, int nID, int nPosition, const char * pchEntryText);
extern bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(intp instancePtr, int nID);
extern bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(intp instancePtr);
extern HTTPRequestHandle SteamAPI_ISteamHTTP_CreateHTTPRequest(intp instancePtr, EHTTPMethod eHTTPRequestMethod, const char * pchAbsoluteURL);
extern bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(intp instancePtr, HTTPRequestHandle hRequest, uint64 ulContextValue);
extern bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(intp instancePtr, HTTPRequestHandle hRequest, uint32 unTimeoutSeconds);
extern bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(intp instancePtr, HTTPRequestHandle hRequest, const char * pchHeaderName, const char * pchHeaderValue);
extern bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(intp instancePtr, HTTPRequestHandle hRequest, const char * pchParamName, const char * pchParamValue);
extern bool SteamAPI_ISteamHTTP_SendHTTPRequest(intp instancePtr, HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle);
extern bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(intp instancePtr, HTTPRequestHandle hRequest, SteamAPICall_t * pCallHandle);
extern bool SteamAPI_ISteamHTTP_DeferHTTPRequest(intp instancePtr, HTTPRequestHandle hRequest);
extern bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(intp instancePtr, HTTPRequestHandle hRequest);
extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(intp instancePtr, HTTPRequestHandle hRequest, const char * pchHeaderName, uint32 * unResponseHeaderSize);
extern bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(intp instancePtr, HTTPRequestHandle hRequest, const char * pchHeaderName, uint8 * pHeaderValueBuffer, uint32 unBufferSize);
extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(intp instancePtr, HTTPRequestHandle hRequest, uint32 * unBodySize);
extern bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(intp instancePtr, HTTPRequestHandle hRequest, uint8 * pBodyDataBuffer, uint32 unBufferSize);
extern bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(intp instancePtr, HTTPRequestHandle hRequest, uint32 cOffset, uint8 * pBodyDataBuffer, uint32 unBufferSize);
extern bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(intp instancePtr, HTTPRequestHandle hRequest);
extern bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(intp instancePtr, HTTPRequestHandle hRequest, float * pflPercentOut);
extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(intp instancePtr, HTTPRequestHandle hRequest, const char * pchContentType, uint8 * pubBody, uint32 unBodyLen);
extern HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(intp instancePtr, bool bAllowResponsesToModify);
extern bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(intp instancePtr, HTTPCookieContainerHandle hCookieContainer);
extern bool SteamAPI_ISteamHTTP_SetCookie(intp instancePtr, HTTPCookieContainerHandle hCookieContainer, const char * pchHost, const char * pchUrl, const char * pchCookie);
extern bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(intp instancePtr, HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);
extern bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(intp instancePtr, HTTPRequestHandle hRequest, const char * pchUserAgentInfo);
extern bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(intp instancePtr, HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);
extern bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(intp instancePtr, HTTPRequestHandle hRequest, uint32 unMilliseconds);
extern bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(intp instancePtr, HTTPRequestHandle hRequest, bool * pbWasTimedOut);
extern bool SteamAPI_ISteamController_Init(intp instancePtr);
extern bool SteamAPI_ISteamController_Shutdown(intp instancePtr);
extern void SteamAPI_ISteamController_RunFrame(intp instancePtr);
extern int SteamAPI_ISteamController_GetConnectedControllers(intp instancePtr, ControllerHandle_t * handlesOut);
extern bool SteamAPI_ISteamController_ShowBindingPanel(intp instancePtr, ControllerHandle_t controllerHandle);
extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(intp instancePtr, const char * pszActionSetName);
extern void SteamAPI_ISteamController_ActivateActionSet(intp instancePtr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle);
extern ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(intp instancePtr, ControllerHandle_t controllerHandle);
extern void SteamAPI_ISteamController_ActivateActionSetLayer(intp instancePtr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle);
extern void SteamAPI_ISteamController_DeactivateActionSetLayer(intp instancePtr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle);
extern void SteamAPI_ISteamController_DeactivateAllActionSetLayers(intp instancePtr, ControllerHandle_t controllerHandle);
extern int SteamAPI_ISteamController_GetActiveActionSetLayers(intp instancePtr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t * handlesOut);
extern ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(intp instancePtr, const char * pszActionName);
extern struct ControllerDigitalActionData_t SteamAPI_ISteamController_GetDigitalActionData(intp instancePtr, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle);
extern int SteamAPI_ISteamController_GetDigitalActionOrigins(intp instancePtr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerDigitalActionHandle_t digitalActionHandle, EControllerActionOrigin * originsOut);
extern ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(intp instancePtr, const char * pszActionName);
extern struct ControllerAnalogActionData_t SteamAPI_ISteamController_GetAnalogActionData(intp instancePtr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle);
extern int SteamAPI_ISteamController_GetAnalogActionOrigins(intp instancePtr, ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle, ControllerAnalogActionHandle_t analogActionHandle, EControllerActionOrigin * originsOut);
extern void SteamAPI_ISteamController_StopAnalogActionMomentum(intp instancePtr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction);
extern void SteamAPI_ISteamController_TriggerHapticPulse(intp instancePtr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec);
extern void SteamAPI_ISteamController_TriggerRepeatedHapticPulse(intp instancePtr, ControllerHandle_t controllerHandle, ESteamControllerPad eTargetPad, unsigned short usDurationMicroSec, unsigned short usOffMicroSec, unsigned short unRepeat, unsigned int nFlags);
extern void SteamAPI_ISteamController_TriggerVibration(intp instancePtr, ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed);
extern void SteamAPI_ISteamController_SetLEDColor(intp instancePtr, ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags);
extern int SteamAPI_ISteamController_GetGamepadIndexForController(intp instancePtr, ControllerHandle_t ulControllerHandle);
extern ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(intp instancePtr, int nIndex);
extern struct ControllerMotionData_t SteamAPI_ISteamController_GetMotionData(intp instancePtr, ControllerHandle_t controllerHandle);
extern bool SteamAPI_ISteamController_ShowDigitalActionOrigins(intp instancePtr, ControllerHandle_t controllerHandle, ControllerDigitalActionHandle_t digitalActionHandle, float flScale, float flXPosition, float flYPosition);
extern bool SteamAPI_ISteamController_ShowAnalogActionOrigins(intp instancePtr, ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t analogActionHandle, float flScale, float flXPosition, float flYPosition);
extern const char * SteamAPI_ISteamController_GetStringForActionOrigin(intp instancePtr, EControllerActionOrigin eOrigin);
extern const char * SteamAPI_ISteamController_GetGlyphForActionOrigin(intp instancePtr, EControllerActionOrigin eOrigin);
extern ESteamInputType SteamAPI_ISteamController_GetInputTypeForHandle(intp instancePtr, ControllerHandle_t controllerHandle);
extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(intp instancePtr, AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage);
extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(intp instancePtr, EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint32 unPage);
extern UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(intp instancePtr, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs);
extern SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(intp instancePtr, UGCQueryHandle_t handle);
extern bool SteamAPI_ISteamUGC_GetQueryUGCResult(intp instancePtr, UGCQueryHandle_t handle, uint32 index, struct SteamUGCDetails_t * pDetails);
extern bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(intp instancePtr, UGCQueryHandle_t handle, uint32 index, char * pchURL, uint32 cchURLSize);
extern bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(intp instancePtr, UGCQueryHandle_t handle, uint32 index, char * pchMetadata, uint32 cchMetadatasize);
extern bool SteamAPI_ISteamUGC_GetQueryUGCChildren(intp instancePtr, UGCQueryHandle_t handle, uint32 index, PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries);
extern bool SteamAPI_ISteamUGC_GetQueryUGCStatistic(intp instancePtr, UGCQueryHandle_t handle, uint32 index, EItemStatistic eStatType, uint64 * pStatValue);
extern uint32 SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(intp instancePtr, UGCQueryHandle_t handle, uint32 index);
extern bool SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(intp instancePtr, UGCQueryHandle_t handle, uint32 index, uint32 previewIndex, char * pchURLOrVideoID, uint32 cchURLSize, char * pchOriginalFileName, uint32 cchOriginalFileNameSize, EItemPreviewType * pPreviewType);
extern uint32 SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(intp instancePtr, UGCQueryHandle_t handle, uint32 index);
extern bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(intp instancePtr, UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, char * pchKey, uint32 cchKeySize, char * pchValue, uint32 cchValueSize);
extern bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(intp instancePtr, UGCQueryHandle_t handle);
extern bool SteamAPI_ISteamUGC_AddRequiredTag(intp instancePtr, UGCQueryHandle_t handle, const char * pTagName);
extern bool SteamAPI_ISteamUGC_AddExcludedTag(intp instancePtr, UGCQueryHandle_t handle, const char * pTagName);
extern bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(intp instancePtr, UGCQueryHandle_t handle, bool bReturnOnlyIDs);
extern bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(intp instancePtr, UGCQueryHandle_t handle, bool bReturnKeyValueTags);
extern bool SteamAPI_ISteamUGC_SetReturnLongDescription(intp instancePtr, UGCQueryHandle_t handle, bool bReturnLongDescription);
extern bool SteamAPI_ISteamUGC_SetReturnMetadata(intp instancePtr, UGCQueryHandle_t handle, bool bReturnMetadata);
extern bool SteamAPI_ISteamUGC_SetReturnChildren(intp instancePtr, UGCQueryHandle_t handle, bool bReturnChildren);
extern bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(intp instancePtr, UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);
extern bool SteamAPI_ISteamUGC_SetReturnTotalOnly(intp instancePtr, UGCQueryHandle_t handle, bool bReturnTotalOnly);
extern bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(intp instancePtr, UGCQueryHandle_t handle, uint32 unDays);
extern bool SteamAPI_ISteamUGC_SetLanguage(intp instancePtr, UGCQueryHandle_t handle, const char * pchLanguage);
extern bool SteamAPI_ISteamUGC_SetAllowCachedResponse(intp instancePtr, UGCQueryHandle_t handle, uint32 unMaxAgeSeconds);
extern bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(intp instancePtr, UGCQueryHandle_t handle, const char * pMatchCloudFileName);
extern bool SteamAPI_ISteamUGC_SetMatchAnyTag(intp instancePtr, UGCQueryHandle_t handle, bool bMatchAnyTag);
extern bool SteamAPI_ISteamUGC_SetSearchText(intp instancePtr, UGCQueryHandle_t handle, const char * pSearchText);
extern bool SteamAPI_ISteamUGC_SetRankedByTrendDays(intp instancePtr, UGCQueryHandle_t handle, uint32 unDays);
extern bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(intp instancePtr, UGCQueryHandle_t handle, const char * pKey, const char * pValue);
extern SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(intp instancePtr, PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds);
extern SteamAPICall_t SteamAPI_ISteamUGC_CreateItem(intp instancePtr, AppId_t nConsumerAppId, EWorkshopFileType eFileType);
extern UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(intp instancePtr, AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);
extern bool SteamAPI_ISteamUGC_SetItemTitle(intp instancePtr, UGCUpdateHandle_t handle, const char * pchTitle);
extern bool SteamAPI_ISteamUGC_SetItemDescription(intp instancePtr, UGCUpdateHandle_t handle, const char * pchDescription);
extern bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(intp instancePtr, UGCUpdateHandle_t handle, const char * pchLanguage);
extern bool SteamAPI_ISteamUGC_SetItemMetadata(intp instancePtr, UGCUpdateHandle_t handle, const char * pchMetaData);
extern bool SteamAPI_ISteamUGC_SetItemVisibility(intp instancePtr, UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);
extern bool SteamAPI_ISteamUGC_SetItemTags(intp instancePtr, UGCUpdateHandle_t updateHandle, const struct SteamParamStringArray_t * pTags);
extern bool SteamAPI_ISteamUGC_SetItemContent(intp instancePtr, UGCUpdateHandle_t handle, const char * pszContentFolder);
extern bool SteamAPI_ISteamUGC_SetItemPreview(intp instancePtr, UGCUpdateHandle_t handle, const char * pszPreviewFile);
extern bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(intp instancePtr, UGCUpdateHandle_t handle, const char * pchKey);
extern bool SteamAPI_ISteamUGC_AddItemKeyValueTag(intp instancePtr, UGCUpdateHandle_t handle, const char * pchKey, const char * pchValue);
extern bool SteamAPI_ISteamUGC_AddItemPreviewFile(intp instancePtr, UGCUpdateHandle_t handle, const char * pszPreviewFile, EItemPreviewType type);
extern bool SteamAPI_ISteamUGC_AddItemPreviewVideo(intp instancePtr, UGCUpdateHandle_t handle, const char * pszVideoID);
extern bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(intp instancePtr, UGCUpdateHandle_t handle, uint32 index, const char * pszPreviewFile);
extern bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(intp instancePtr, UGCUpdateHandle_t handle, uint32 index, const char * pszVideoID);
extern bool SteamAPI_ISteamUGC_RemoveItemPreview(intp instancePtr, UGCUpdateHandle_t handle, uint32 index);
extern SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(intp instancePtr, UGCUpdateHandle_t handle, const char * pchChangeNote);
extern EItemUpdateStatus SteamAPI_ISteamUGC_GetItemUpdateProgress(intp instancePtr, UGCUpdateHandle_t handle, uint64 * punBytesProcessed, uint64 * punBytesTotal);
extern SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(intp instancePtr, PublishedFileId_t nPublishedFileID, bool bVoteUp);
extern SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(intp instancePtr, PublishedFileId_t nPublishedFileID);
extern SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(intp instancePtr, AppId_t nAppId, PublishedFileId_t nPublishedFileID);
extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(intp instancePtr, AppId_t nAppId, PublishedFileId_t nPublishedFileID);
extern SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(intp instancePtr, PublishedFileId_t nPublishedFileID);
extern SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(intp instancePtr, PublishedFileId_t nPublishedFileID);
extern uint32 SteamAPI_ISteamUGC_GetNumSubscribedItems(intp instancePtr);
extern uint32 SteamAPI_ISteamUGC_GetSubscribedItems(intp instancePtr, PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries);
extern uint32 SteamAPI_ISteamUGC_GetItemState(intp instancePtr, PublishedFileId_t nPublishedFileID);
extern bool SteamAPI_ISteamUGC_GetItemInstallInfo(intp instancePtr, PublishedFileId_t nPublishedFileID, uint64 * punSizeOnDisk, char * pchFolder, uint32 cchFolderSize, uint32 * punTimeStamp);
extern bool SteamAPI_ISteamUGC_GetItemDownloadInfo(intp instancePtr, PublishedFileId_t nPublishedFileID, uint64 * punBytesDownloaded, uint64 * punBytesTotal);
extern bool SteamAPI_ISteamUGC_DownloadItem(intp instancePtr, PublishedFileId_t nPublishedFileID, bool bHighPriority);
extern bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(intp instancePtr, DepotId_t unWorkshopDepotID, const char * pszFolder);
extern void SteamAPI_ISteamUGC_SuspendDownloads(intp instancePtr, bool bSuspend);
extern SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(intp instancePtr, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs);
extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(intp instancePtr, PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs);
extern SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(intp instancePtr);
extern SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(intp instancePtr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);
extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(intp instancePtr, PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID);
extern SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(intp instancePtr, PublishedFileId_t nPublishedFileID, AppId_t nAppID);
extern SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(intp instancePtr, PublishedFileId_t nPublishedFileID, AppId_t nAppID);
extern SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(intp instancePtr, PublishedFileId_t nPublishedFileID);
extern SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(intp instancePtr, PublishedFileId_t nPublishedFileID);
extern uint32 SteamAPI_ISteamAppList_GetNumInstalledApps(intp instancePtr);
extern uint32 SteamAPI_ISteamAppList_GetInstalledApps(intp instancePtr, AppId_t * pvecAppID, uint32 unMaxAppIDs);
extern int SteamAPI_ISteamAppList_GetAppName(intp instancePtr, AppId_t nAppID, char * pchName, int cchNameMax);
extern int SteamAPI_ISteamAppList_GetAppInstallDir(intp instancePtr, AppId_t nAppID, char * pchDirectory, int cchNameMax);
extern int SteamAPI_ISteamAppList_GetAppBuildId(intp instancePtr, AppId_t nAppID);
extern void SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(intp instancePtr);
extern bool SteamAPI_ISteamHTMLSurface_Init(intp instancePtr);
extern bool SteamAPI_ISteamHTMLSurface_Shutdown(intp instancePtr);
extern SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(intp instancePtr, const char * pchUserAgent, const char * pchUserCSS);
extern void SteamAPI_ISteamHTMLSurface_RemoveBrowser(intp instancePtr, HHTMLBrowser unBrowserHandle);
extern void SteamAPI_ISteamHTMLSurface_LoadURL(intp instancePtr, HHTMLBrowser unBrowserHandle, const char * pchURL, const char * pchPostData);
extern void SteamAPI_ISteamHTMLSurface_SetSize(intp instancePtr, HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight);
extern void SteamAPI_ISteamHTMLSurface_StopLoad(intp instancePtr, HHTMLBrowser unBrowserHandle);
extern void SteamAPI_ISteamHTMLSurface_Reload(intp instancePtr, HHTMLBrowser unBrowserHandle);
extern void SteamAPI_ISteamHTMLSurface_GoBack(intp instancePtr, HHTMLBrowser unBrowserHandle);
extern void SteamAPI_ISteamHTMLSurface_GoForward(intp instancePtr, HHTMLBrowser unBrowserHandle);
extern void SteamAPI_ISteamHTMLSurface_AddHeader(intp instancePtr, HHTMLBrowser unBrowserHandle, const char * pchKey, const char * pchValue);
extern void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(intp instancePtr, HHTMLBrowser unBrowserHandle, const char * pchScript);
extern void SteamAPI_ISteamHTMLSurface_MouseUp(intp instancePtr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);
extern void SteamAPI_ISteamHTMLSurface_MouseDown(intp instancePtr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);
extern void SteamAPI_ISteamHTMLSurface_MouseDoubleClick(intp instancePtr, HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);
extern void SteamAPI_ISteamHTMLSurface_MouseMove(intp instancePtr, HHTMLBrowser unBrowserHandle, int x, int y);
extern void SteamAPI_ISteamHTMLSurface_MouseWheel(intp instancePtr, HHTMLBrowser unBrowserHandle, int32 nDelta);
extern void SteamAPI_ISteamHTMLSurface_KeyDown(intp instancePtr, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);
extern void SteamAPI_ISteamHTMLSurface_KeyUp(intp instancePtr, HHTMLBrowser unBrowserHandle, uint32 nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);
extern void SteamAPI_ISteamHTMLSurface_KeyChar(intp instancePtr, HHTMLBrowser unBrowserHandle, uint32 cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers);
extern void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(intp instancePtr, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll);
extern void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(intp instancePtr, HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll);
extern void SteamAPI_ISteamHTMLSurface_SetKeyFocus(intp instancePtr, HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);
extern void SteamAPI_ISteamHTMLSurface_ViewSource(intp instancePtr, HHTMLBrowser unBrowserHandle);
extern void SteamAPI_ISteamHTMLSurface_CopyToClipboard(intp instancePtr, HHTMLBrowser unBrowserHandle);
extern void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(intp instancePtr, HHTMLBrowser unBrowserHandle);
extern void SteamAPI_ISteamHTMLSurface_Find(intp instancePtr, HHTMLBrowser unBrowserHandle, const char * pchSearchStr, bool bCurrentlyInFind, bool bReverse);
extern void SteamAPI_ISteamHTMLSurface_StopFind(intp instancePtr, HHTMLBrowser unBrowserHandle);
extern void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(intp instancePtr, HHTMLBrowser unBrowserHandle, int x, int y);
extern void SteamAPI_ISteamHTMLSurface_SetCookie(intp instancePtr, const char * pchHostname, const char * pchKey, const char * pchValue, const char * pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly);
extern void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(intp instancePtr, HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);
extern void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(intp instancePtr, HHTMLBrowser unBrowserHandle, bool bBackgroundMode);
extern void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(intp instancePtr, HHTMLBrowser unBrowserHandle, float flDPIScaling);
extern void SteamAPI_ISteamHTMLSurface_AllowStartRequest(intp instancePtr, HHTMLBrowser unBrowserHandle, bool bAllowed);
extern void SteamAPI_ISteamHTMLSurface_JSDialogResponse(intp instancePtr, HHTMLBrowser unBrowserHandle, bool bResult);
extern EResult SteamAPI_ISteamInventory_GetResultStatus(intp instancePtr, SteamInventoryResult_t resultHandle);
extern bool SteamAPI_ISteamInventory_GetResultItems(intp instancePtr, SteamInventoryResult_t resultHandle, struct SteamItemDetails_t * pOutItemsArray, uint32 * punOutItemsArraySize);
extern bool SteamAPI_ISteamInventory_GetResultItemProperty(intp instancePtr, SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut);
extern uint32 SteamAPI_ISteamInventory_GetResultTimestamp(intp instancePtr, SteamInventoryResult_t resultHandle);
extern bool SteamAPI_ISteamInventory_CheckResultSteamID(intp instancePtr, SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);
extern void SteamAPI_ISteamInventory_DestroyResult(intp instancePtr, SteamInventoryResult_t resultHandle);
extern bool SteamAPI_ISteamInventory_GetAllItems(intp instancePtr, SteamInventoryResult_t * pResultHandle);
extern bool SteamAPI_ISteamInventory_GetItemsByID(intp instancePtr, SteamInventoryResult_t * pResultHandle, const SteamItemInstanceID_t * pInstanceIDs, uint32 unCountInstanceIDs);
extern bool SteamAPI_ISteamInventory_SerializeResult(intp instancePtr, SteamInventoryResult_t resultHandle, void * pOutBuffer, uint32 * punOutBufferSize);
extern bool SteamAPI_ISteamInventory_DeserializeResult(intp instancePtr, SteamInventoryResult_t * pOutResultHandle, const void * pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE);
extern bool SteamAPI_ISteamInventory_GenerateItems(intp instancePtr, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength);
extern bool SteamAPI_ISteamInventory_GrantPromoItems(intp instancePtr, SteamInventoryResult_t * pResultHandle);
extern bool SteamAPI_ISteamInventory_AddPromoItem(intp instancePtr, SteamInventoryResult_t * pResultHandle, SteamItemDef_t itemDef);
extern bool SteamAPI_ISteamInventory_AddPromoItems(intp instancePtr, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, uint32 unArrayLength);
extern bool SteamAPI_ISteamInventory_ConsumeItem(intp instancePtr, SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity);
extern bool SteamAPI_ISteamInventory_ExchangeItems(intp instancePtr, SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayGenerate, const uint32 * punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t * pArrayDestroy, const uint32 * punArrayDestroyQuantity, uint32 unArrayDestroyLength);
extern bool SteamAPI_ISteamInventory_TransferItemQuantity(intp instancePtr, SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest);
extern void SteamAPI_ISteamInventory_SendItemDropHeartbeat(intp instancePtr);
extern bool SteamAPI_ISteamInventory_TriggerItemDrop(intp instancePtr, SteamInventoryResult_t * pResultHandle, SteamItemDef_t dropListDefinition);
extern bool SteamAPI_ISteamInventory_TradeItems(intp instancePtr, SteamInventoryResult_t * pResultHandle, CSteamID steamIDTradePartner, const SteamItemInstanceID_t * pArrayGive, const uint32 * pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t * pArrayGet, const uint32 * pArrayGetQuantity, uint32 nArrayGetLength);
extern bool SteamAPI_ISteamInventory_LoadItemDefinitions(intp instancePtr);
extern bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(intp instancePtr, SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize);
extern bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(intp instancePtr, SteamItemDef_t iDefinition, const char * pchPropertyName, char * pchValueBuffer, uint32 * punValueBufferSizeOut);
extern SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(intp instancePtr, CSteamID steamID);
extern bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(intp instancePtr, CSteamID steamID, SteamItemDef_t * pItemDefIDs, uint32 * punItemDefIDsArraySize);
extern SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(intp instancePtr, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength);
extern SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(intp instancePtr);
extern uint32 SteamAPI_ISteamInventory_GetNumItemsWithPrices(intp instancePtr);
extern bool SteamAPI_ISteamInventory_GetItemsWithPrices(intp instancePtr, SteamItemDef_t * pArrayItemDefs, uint64 * pPrices, uint32 unArrayLength);
extern bool SteamAPI_ISteamInventory_GetItemPrice(intp instancePtr, SteamItemDef_t iDefinition, uint64 * pPrice);
extern SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(intp instancePtr);
extern bool SteamAPI_ISteamInventory_RemoveProperty(intp instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName);
extern bool SteamAPI_ISteamInventory_SetProperty(intp instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, const char * pchPropertyValue);
extern bool SteamAPI_ISteamInventory_SetProperty0(intp instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, bool bValue);
extern bool SteamAPI_ISteamInventory_SetProperty1(intp instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, int64 nValue);
extern bool SteamAPI_ISteamInventory_SetProperty2(intp instancePtr, SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, float flValue);
extern bool SteamAPI_ISteamInventory_SubmitUpdateProperties(intp instancePtr, SteamInventoryUpdateHandle_t handle, SteamInventoryResult_t * pResultHandle);
extern void SteamAPI_ISteamVideo_GetVideoURL(intp instancePtr, AppId_t unVideoAppID);
extern bool SteamAPI_ISteamVideo_IsBroadcasting(intp instancePtr, int * pnNumViewers);
extern void SteamAPI_ISteamVideo_GetOPFSettings(intp instancePtr, AppId_t unVideoAppID);
extern bool SteamAPI_ISteamVideo_GetOPFStringForApp(intp instancePtr, AppId_t unVideoAppID, char * pchBuffer, int32 * pnBufferSize);
extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(intp instancePtr);
extern bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(intp instancePtr);
extern bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(intp instancePtr, AppId_t nAppID);
extern bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(intp instancePtr, AppId_t nAppID);
extern bool SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(intp instancePtr, EParentalFeature eFeature);
extern bool SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(intp instancePtr, EParentalFeature eFeature);
extern bool SteamAPI_ISteamGameServer_InitGameServer(intp instancePtr, uint32 unIP, uint16 usGamePort, uint16 usQueryPort, uint32 unFlags, AppId_t nGameAppId, const char * pchVersionString);
extern void SteamAPI_ISteamGameServer_SetProduct(intp instancePtr, const char * pszProduct);
extern void SteamAPI_ISteamGameServer_SetGameDescription(intp instancePtr, const char * pszGameDescription);
extern void SteamAPI_ISteamGameServer_SetModDir(intp instancePtr, const char * pszModDir);
extern void SteamAPI_ISteamGameServer_SetDedicatedServer(intp instancePtr, bool bDedicated);
extern void SteamAPI_ISteamGameServer_LogOn(intp instancePtr, const char * pszToken);
extern void SteamAPI_ISteamGameServer_LogOnAnonymous(intp instancePtr);
extern void SteamAPI_ISteamGameServer_LogOff(intp instancePtr);
extern bool SteamAPI_ISteamGameServer_BLoggedOn(intp instancePtr);
extern bool SteamAPI_ISteamGameServer_BSecure(intp instancePtr);
extern CSteamID SteamAPI_ISteamGameServer_GetSteamID(intp instancePtr);
extern bool SteamAPI_ISteamGameServer_WasRestartRequested(intp instancePtr);
extern void SteamAPI_ISteamGameServer_SetMaxPlayerCount(intp instancePtr, int cPlayersMax);
extern void SteamAPI_ISteamGameServer_SetBotPlayerCount(intp instancePtr, int cBotplayers);
extern void SteamAPI_ISteamGameServer_SetServerName(intp instancePtr, const char * pszServerName);
extern void SteamAPI_ISteamGameServer_SetMapName(intp instancePtr, const char * pszMapName);
extern void SteamAPI_ISteamGameServer_SetPasswordProtected(intp instancePtr, bool bPasswordProtected);
extern void SteamAPI_ISteamGameServer_SetSpectatorPort(intp instancePtr, uint16 unSpectatorPort);
extern void SteamAPI_ISteamGameServer_SetSpectatorServerName(intp instancePtr, const char * pszSpectatorServerName);
extern void SteamAPI_ISteamGameServer_ClearAllKeyValues(intp instancePtr);
extern void SteamAPI_ISteamGameServer_SetKeyValue(intp instancePtr, const char * pKey, const char * pValue);
extern void SteamAPI_ISteamGameServer_SetGameTags(intp instancePtr, const char * pchGameTags);
extern void SteamAPI_ISteamGameServer_SetGameData(intp instancePtr, const char * pchGameData);
extern void SteamAPI_ISteamGameServer_SetRegion(intp instancePtr, const char * pszRegion);
extern bool SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(intp instancePtr, uint32 unIPClient, const void * pvAuthBlob, uint32 cubAuthBlobSize, CSteamID * pSteamIDUser);
extern CSteamID SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(intp instancePtr);
extern void SteamAPI_ISteamGameServer_SendUserDisconnect(intp instancePtr, CSteamID steamIDUser);
extern bool SteamAPI_ISteamGameServer_BUpdateUserData(intp instancePtr, CSteamID steamIDUser, const char * pchPlayerName, uint32 uScore);
extern HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(intp instancePtr, void * pTicket, int cbMaxTicket, uint32 * pcbTicket);
extern EBeginAuthSessionResult SteamAPI_ISteamGameServer_BeginAuthSession(intp instancePtr, const void * pAuthTicket, int cbAuthTicket, CSteamID steamID);
extern void SteamAPI_ISteamGameServer_EndAuthSession(intp instancePtr, CSteamID steamID);
extern void SteamAPI_ISteamGameServer_CancelAuthTicket(intp instancePtr, HAuthTicket hAuthTicket);
extern EUserHasLicenseForAppResult SteamAPI_ISteamGameServer_UserHasLicenseForApp(intp instancePtr, CSteamID steamID, AppId_t appID);
extern bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(intp instancePtr, CSteamID steamIDUser, CSteamID steamIDGroup);
extern void SteamAPI_ISteamGameServer_GetGameplayStats(intp instancePtr);
extern SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(intp instancePtr);
extern uint32 SteamAPI_ISteamGameServer_GetPublicIP(intp instancePtr);
extern bool SteamAPI_ISteamGameServer_HandleIncomingPacket(intp instancePtr, const void * pData, int cbData, uint32 srcIP, uint16 srcPort);
extern int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(intp instancePtr, void * pOut, int cbMaxOut, uint32 * pNetAdr, uint16 * pPort);
extern void SteamAPI_ISteamGameServer_EnableHeartbeats(intp instancePtr, bool bActive);
extern void SteamAPI_ISteamGameServer_SetHeartbeatInterval(intp instancePtr, int iHeartbeatInterval);
extern void SteamAPI_ISteamGameServer_ForceHeartbeat(intp instancePtr);
extern SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(intp instancePtr, CSteamID steamIDClan);
extern SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(intp instancePtr, CSteamID steamIDNewPlayer);
extern SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(intp instancePtr, CSteamID steamIDUser);
extern bool SteamAPI_ISteamGameServerStats_GetUserStat(intp instancePtr, CSteamID steamIDUser, const char * pchName, int32 * pData);
extern bool SteamAPI_ISteamGameServerStats_GetUserStat0(intp instancePtr, CSteamID steamIDUser, const char * pchName, float * pData);
extern bool SteamAPI_ISteamGameServerStats_GetUserAchievement(intp instancePtr, CSteamID steamIDUser, const char * pchName, bool * pbAchieved);
extern bool SteamAPI_ISteamGameServerStats_SetUserStat(intp instancePtr, CSteamID steamIDUser, const char * pchName, int32 nData);
extern bool SteamAPI_ISteamGameServerStats_SetUserStat0(intp instancePtr, CSteamID steamIDUser, const char * pchName, float fData);
extern bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(intp instancePtr, CSteamID steamIDUser, const char * pchName, float flCountThisSession, double dSessionLength);
extern bool SteamAPI_ISteamGameServerStats_SetUserAchievement(intp instancePtr, CSteamID steamIDUser, const char * pchName);
extern bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(intp instancePtr, CSteamID steamIDUser, const char * pchName);
extern SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(intp instancePtr, CSteamID steamIDUser);
extern intp GetSteamClient(); // wrapper
extern intp GetSteamUser(); // wrapper
extern intp GetSteamGameServer(); // wrapper
extern intp GetSteamFriends(); // wrapper
extern intp GetSteamUtils(); // wrapper
extern intp GetSteamMatchmaking(); // wrapper
extern intp GetSteamMatchmakingServers(); // wrapper
extern intp GetSteamUserStats(); // wrapper
extern intp GetSteamGameServerStats(); // wrapper
extern intp GetSteamApps(); // wrapper
extern intp GetSteamNetworking(); // wrapper
extern intp GetSteamRemoteStorage(); // wrapper
extern intp GetSteamScreenshots(); // wrapper
extern intp GetSteamHTTP(); // wrapper
extern intp GetSteamController(); // wrapper
extern intp GetSteamUGC(); // wrapper
extern intp GetSteamAppList(); // wrapper
extern intp GetSteamMusic(); // wrapper
extern intp GetSteamMusicRemote(); // wrapper
extern intp GetSteamHTMLSurface(); // wrapper
extern intp GetSteamInventory(); // wrapper
extern intp GetSteamVideo(); // wrapper
extern intp GetSteamParentalSettings(); // wrapper
extern intp GetSteamGameServerClient(); // wrapper
extern intp GetSteamGameServerUtils(); // wrapper
extern intp GetSteamGameServerNetworking(); // wrapper
extern intp GetSteamGameServerHTTP(); // wrapper
extern intp GetSteamGameServerInventory(); // wrapper
extern intp GetSteamGameServerUGC(); // wrapper
extern intp GetSteamGameServerApps(); // wrapper
