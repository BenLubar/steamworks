#pragma once

extern bool SteamAPI_SteamGameServer_InitGameServer(intp instance, uint32 unIP, uint16 usGamePort, uint16 usQueryPort, uint32 unFlags, AppId_t nGameAppId, const char *pchVersionString);
extern void SteamAPI_SteamGameServer_SetProduct(intp instance, const char *pszProduct);
extern void SteamAPI_SteamGameServer_SetGameDescription(intp instance, const char *pszGameDescription);
extern void SteamAPI_SteamGameServer_SetModDir(intp instance, const char *pszModDir);
extern void SteamAPI_SteamGameServer_SetDedicatedServer(intp instance, bool bDedicated);
extern void SteamAPI_SteamGameServer_LogOn(intp instance, const char *pszToken);
extern void SteamAPI_SteamGameServer_LogOnAnonymous(intp instance);
extern void SteamAPI_SteamGameServer_LogOff(intp instance);
extern bool SteamAPI_SteamGameServer_BLoggedOn(intp instance);
extern bool SteamAPI_SteamGameServer_BSecure(intp instance);
extern CSteamID SteamAPI_SteamGameServer_GetSteamID(intp instance);
extern bool SteamAPI_SteamGameServer_WasRestartRequested(intp instance);
extern void SteamAPI_SteamGameServer_SetMaxPlayerCount(intp instance, int cPlayersMax);
extern void SteamAPI_SteamGameServer_SetBotPlayerCount(intp instance, int cBotplayers);
extern void SteamAPI_SteamGameServer_SetServerName(intp instance, const char *pszServerName);
extern void SteamAPI_SteamGameServer_SetMapName(intp instance, const char *pszMapName);
extern void SteamAPI_SteamGameServer_SetPasswordProtected(intp instance, bool bPasswordProtected);
extern void SteamAPI_SteamGameServer_SetSpectatorPort(intp instance, uint16 unSpectatorPort);
extern void SteamAPI_SteamGameServer_SetSpectatorServerName(intp instance, const char *pszSpectatorServerName);
extern void SteamAPI_SteamGameServer_ClearAllKeyValues(intp instance);
extern void SteamAPI_SteamGameServer_SetKeyValue(intp instance, const char *pKey, const char *pValue);
extern void SteamAPI_SteamGameServer_SetGameTags(intp instance, const char *pchGameTags);
extern void SteamAPI_SteamGameServer_SetGameData(intp instance, const char *pchGameData);
extern void SteamAPI_SteamGameServer_SetRegion(intp instance, const char *pszRegion);
extern bool SteamAPI_SteamGameServer_SendUserConnectAndAuthenticate(intp instance, uint32 unIPClient, const void *pvAuthBlob, uint32 cubAuthBlobSize, CSteamID *pSteamIDUser);
extern CSteamID SteamAPI_SteamGameServer_CreateUnauthenticatedUserConnection(intp instance);
extern void SteamAPI_SteamGameServer_SendUserDisconnect(intp instance, CSteamID steamIDUser);
extern bool SteamAPI_SteamGameServer_BUpdateUserData(intp instance, CSteamID steamIDUser, const char *pchPlayerName, uint32 uScore);
extern HAuthTicket SteamAPI_SteamGameServer_GetAuthSessionTicket(intp instance, void *pTicket, int cbMaxTicket, uint32 *pcbTicket);
extern EBeginAuthSessionResult SteamAPI_SteamGameServer_BeginAuthSession(intp instance, const void *pAuthTicket, int cbAuthTicket, CSteamID steamID);
extern void SteamAPI_SteamGameServer_EndAuthSession(intp instance, CSteamID steamID);
extern void SteamAPI_SteamGameServer_CancelAuthTicket(intp instance, HAuthTicket hAuthTicket);
extern EUserHasLicenseForAppResult SteamAPI_SteamGameServer_UserHasLicenseForApp(intp instance, CSteamID steamID, AppId_t appID);
extern bool SteamAPI_SteamGameServer_RequestUserGroupStatus(intp instance, CSteamID steamIDUser, CSteamID steamIDGroup);
extern uint32 SteamAPI_SteamGameServer_GetPublicIP(intp instance);
extern bool SteamAPI_SteamGameServer_HandleIncomingPacket(intp instance, const void *pData, int cbData, uint32 srcIP, uint16 srcPort);
extern int SteamAPI_SteamGameServer_GetNextOutgoingPacket(intp instance, void *pOut, int cbMaxOut, uint32 *pNetAdr, uint16 *pPort);
extern void SteamAPI_SteamGameServer_EnableHeartbeats(intp instance, bool bActive);
extern void SteamAPI_SteamGameServer_SetHeartbeatInterval(intp instance, int iHeartbeatInterval);
extern void SteamAPI_SteamGameServer_ForceHeartbeat(intp instance);
extern SteamAPICall_t SteamAPI_SteamGameServer_AssociateWithClan(intp instance, CSteamID steamIDClan);
extern SteamAPICall_t SteamAPI_SteamGameServer_ComputeNewPlayerCompatibility(intp instance, CSteamID steamIDNewPlayer);
extern SteamAPICall_t SteamAPI_SteamGameServerStats_RequestUserStats(intp instance, CSteamID steamIDUser);
extern bool SteamAPI_SteamGameServerStats_GetUserStat(intp instance, CSteamID steamIDUser, const char *pchName, int32 *pData);
extern bool SteamAPI_SteamGameServerStats_GetUserStat0(intp instance, CSteamID steamIDUser, const char *pchName, float *pData);
extern bool SteamAPI_SteamGameServerStats_GetUserAchievement(intp instance, CSteamID steamIDUser, const char *pchName, bool *pbAchieved);
extern bool SteamAPI_SteamGameServerStats_SetUserStat(intp instance, CSteamID steamIDUser, const char *pchName, int32 nData);
extern bool SteamAPI_SteamGameServerStats_SetUserStat0(intp instance, CSteamID steamIDUser, const char *pchName, float fData);
extern bool SteamAPI_SteamGameServerStats_UpdateUserAvgRateStat(intp instance, CSteamID steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength);
extern bool SteamAPI_SteamGameServerStats_SetUserAchievement(intp instance, CSteamID steamIDUser, const char *pchName);
extern bool SteamAPI_SteamGameServerStats_ClearUserAchievement(intp instance, CSteamID steamIDUser, const char *pchName);
extern SteamAPICall_t SteamAPI_SteamGameServerStats_StoreUserStats(intp instance, CSteamID steamIDUser);
