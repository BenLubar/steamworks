// Code generated by "stringer -type EVRHMDType -trimprefix EVRHMDType_"; DO NOT EDIT.

package internal

import "strconv"

const (
	_EVRHMDType_name_0 = "NoneUnknownHTC_DevHTC_VivePreHTC_Vive"
	_EVRHMDType_name_1 = "HTC_UnknownOculus_DK1Oculus_DK2Oculus_Rift"
	_EVRHMDType_name_2 = "Oculus_Unknown"
	_EVRHMDType_name_3 = "Acer_UnknownAcer_WindowsMR"
	_EVRHMDType_name_4 = "Dell_UnknownDell_Visor"
	_EVRHMDType_name_5 = "Lenovo_UnknownLenovo_Explorer"
	_EVRHMDType_name_6 = "HP_UnknownHP_WindowsMR"
	_EVRHMDType_name_7 = "Samsung_UnknownSamsung_Odyssey"
	_EVRHMDType_name_8 = "Unannounced_UnknownUnannounced_WindowsMR"
)

var (
	_EVRHMDType_index_0 = [...]uint8{0, 4, 11, 18, 29, 37}
	_EVRHMDType_index_1 = [...]uint8{0, 11, 21, 31, 42}
	_EVRHMDType_index_3 = [...]uint8{0, 12, 26}
	_EVRHMDType_index_4 = [...]uint8{0, 12, 22}
	_EVRHMDType_index_5 = [...]uint8{0, 14, 29}
	_EVRHMDType_index_6 = [...]uint8{0, 10, 22}
	_EVRHMDType_index_7 = [...]uint8{0, 15, 30}
	_EVRHMDType_index_8 = [...]uint8{0, 19, 40}
)

func (i EVRHMDType) String() string {
	switch {
	case -1 <= i && i <= 3:
		i -= -1
		return _EVRHMDType_name_0[_EVRHMDType_index_0[i]:_EVRHMDType_index_0[i+1]]
	case 20 <= i && i <= 23:
		i -= 20
		return _EVRHMDType_name_1[_EVRHMDType_index_1[i]:_EVRHMDType_index_1[i+1]]
	case i == 40:
		return _EVRHMDType_name_2
	case 50 <= i && i <= 51:
		i -= 50
		return _EVRHMDType_name_3[_EVRHMDType_index_3[i]:_EVRHMDType_index_3[i+1]]
	case 60 <= i && i <= 61:
		i -= 60
		return _EVRHMDType_name_4[_EVRHMDType_index_4[i]:_EVRHMDType_index_4[i+1]]
	case 70 <= i && i <= 71:
		i -= 70
		return _EVRHMDType_name_5[_EVRHMDType_index_5[i]:_EVRHMDType_index_5[i+1]]
	case 80 <= i && i <= 81:
		i -= 80
		return _EVRHMDType_name_6[_EVRHMDType_index_6[i]:_EVRHMDType_index_6[i+1]]
	case 90 <= i && i <= 91:
		i -= 90
		return _EVRHMDType_name_7[_EVRHMDType_index_7[i]:_EVRHMDType_index_7[i+1]]
	case 100 <= i && i <= 101:
		i -= 100
		return _EVRHMDType_name_8[_EVRHMDType_index_8[i]:_EVRHMDType_index_8[i+1]]
	default:
		return "EVRHMDType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
