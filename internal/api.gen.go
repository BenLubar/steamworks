// This code is generated by go generate. Do not edit manually.
//go:generate go run generate.go

package internal

/*
#cgo CXXFLAGS: -std=c++11
#cgo CPPFLAGS: -isystem ${SRCDIR}/include
#cgo windows LDFLAGS: -L ${SRCDIR}/lib/windows
#cgo linux,386 LDFLAGS: -L ${SRCDIR}/lib/linux32
#cgo linux,amd64 LDFLAGS: -L ${SRCDIR}/lib/linux64
#cgo linux windows,386 darwin LDFLAGS: -lsteam_api -lsdkencryptedappticket
#cgo windows,amd64 LDFLAGS: -lsteam_api64 -lsdkencryptedappticket64

#include "api.gen.h"
*/
import "C"
import (
	"unsafe"
)

type (
	GID                                                    = C.GID_t
	JobID                                                  = C.JobID_t
	TxnID                                                  = C.TxnID_t
	PackageId                                              = C.PackageId_t
	BundleId                                               = C.BundleId_t
	AppId                                                  = C.AppId_t
	AssetClassId                                           = C.AssetClassId_t
	PhysicalItemId                                         = C.PhysicalItemId_t
	DepotId                                                = C.DepotId_t
	RTime32                                                = C.RTime32
	CellID                                                 = C.CellID_t
	SteamAPICall                                           = C.SteamAPICall_t
	AccountID                                              = C.AccountID_t
	PartnerId                                              = C.PartnerId_t
	ManifestId                                             = C.ManifestId_t
	SiteId                                                 = C.SiteId_t
	HAuthTicket                                            = C.HAuthTicket
	HSteamPipe                                             = C.HSteamPipe
	HSteamUser                                             = C.HSteamUser
	FriendsGroupID                                         = C.FriendsGroupID_t
	HServerQuery                                           = C.HServerQuery
	UGCHandle                                              = C.UGCHandle_t
	PublishedFileUpdateHandle                              = C.PublishedFileUpdateHandle_t
	PublishedFileId                                        = C.PublishedFileId_t
	UGCFileWriteStreamHandle                               = C.UGCFileWriteStreamHandle_t
	SteamLeaderboard                                       = C.SteamLeaderboard_t
	SteamLeaderboardEntries                                = C.SteamLeaderboardEntries_t
	SNetSocket                                             = C.SNetSocket_t
	SNetListenSocket                                       = C.SNetListenSocket_t
	ScreenshotHandle                                       = C.ScreenshotHandle
	HTTPRequestHandle                                      = C.HTTPRequestHandle
	HTTPCookieContainerHandle                              = C.HTTPCookieContainerHandle
	ControllerHandle                                       = C.ControllerHandle_t
	ControllerActionSetHandle                              = C.ControllerActionSetHandle_t
	ControllerDigitalActionHandle                          = C.ControllerDigitalActionHandle_t
	ControllerAnalogActionHandle                           = C.ControllerAnalogActionHandle_t
	UGCQueryHandle                                         = C.UGCQueryHandle_t
	UGCUpdateHandle                                        = C.UGCUpdateHandle_t
	HHTMLBrowser                                           = C.HHTMLBrowser
	SteamItemInstanceID                                    = C.SteamItemInstanceID_t
	SteamItemDef                                           = C.SteamItemDef_t
	SteamInventoryResult                                   = C.SteamInventoryResult_t
	SteamInventoryUpdateHandle                             = C.SteamInventoryUpdateHandle_t
	ValvePackingSentinel                                   = C.ValvePackingSentinel_t
	CallbackMsg                                            = C.CallbackMsg_t
	SteamServerConnectFailure                              = C.SteamServerConnectFailure_t
	SteamServersDisconnected                               = C.SteamServersDisconnected_t
	ClientGameServerDeny                                   = C.ClientGameServerDeny_t
	ValidateAuthTicketResponse                             = C.ValidateAuthTicketResponse_t
	MicroTxnAuthorizationResponse                          = C.MicroTxnAuthorizationResponse_t
	EncryptedAppTicketResponse                             = C.EncryptedAppTicketResponse_t
	GetAuthSessionTicketResponse                           = C.GetAuthSessionTicketResponse_t
	GameWebCallback                                        = C.GameWebCallback_t
	StoreAuthURLResponse                                   = C.StoreAuthURLResponse_t
	FriendGameInfo                                         = C.FriendGameInfo_t
	FriendSessionStateInfo                                 = C.FriendSessionStateInfo_t
	PersonaStateChange                                     = C.PersonaStateChange_t
	GameOverlayActivated                                   = C.GameOverlayActivated_t
	GameServerChangeRequested                              = C.GameServerChangeRequested_t
	GameLobbyJoinRequested                                 = C.GameLobbyJoinRequested_t
	AvatarImageLoaded                                      = C.AvatarImageLoaded_t
	ClanOfficerListResponse                                = C.ClanOfficerListResponse_t
	FriendRichPresenceUpdate                               = C.FriendRichPresenceUpdate_t
	GameRichPresenceJoinRequested                          = C.GameRichPresenceJoinRequested_t
	GameConnectedClanChatMsg                               = C.GameConnectedClanChatMsg_t
	GameConnectedChatJoin                                  = C.GameConnectedChatJoin_t
	GameConnectedChatLeave                                 = C.GameConnectedChatLeave_t
	DownloadClanActivityCountsResult                       = C.DownloadClanActivityCountsResult_t
	JoinClanChatRoomCompletionResult                       = C.JoinClanChatRoomCompletionResult_t
	GameConnectedFriendChatMsg                             = C.GameConnectedFriendChatMsg_t
	FriendsGetFollowerCount                                = C.FriendsGetFollowerCount_t
	FriendsIsFollowing                                     = C.FriendsIsFollowing_t
	FriendsEnumerateFollowingList                          = C.FriendsEnumerateFollowingList_t
	SetPersonaNameResponse                                 = C.SetPersonaNameResponse_t
	LowBatteryPower                                        = C.LowBatteryPower_t
	SteamAPICallCompleted                                  = C.SteamAPICallCompleted_t
	CheckFileSignature                                     = C.CheckFileSignature_t
	GamepadTextInputDismissed                              = C.GamepadTextInputDismissed_t
	MatchMakingKeyValuePair                                = C.MatchMakingKeyValuePair_t
	servernetadr                                           = C.servernetadr_t
	gameserveritem                                         = C.gameserveritem_t
	FavoritesListChanged                                   = C.FavoritesListChanged_t
	LobbyInvite                                            = C.LobbyInvite_t
	LobbyEnter                                             = C.LobbyEnter_t
	LobbyDataUpdate                                        = C.LobbyDataUpdate_t
	LobbyChatUpdate                                        = C.LobbyChatUpdate_t
	LobbyChatMsg                                           = C.LobbyChatMsg_t
	LobbyGameCreated                                       = C.LobbyGameCreated_t
	LobbyMatchList                                         = C.LobbyMatchList_t
	LobbyKicked                                            = C.LobbyKicked_t
	LobbyCreated                                           = C.LobbyCreated_t
	PSNGameBootInviteResult                                = C.PSNGameBootInviteResult_t
	FavoritesListAccountsUpdated                           = C.FavoritesListAccountsUpdated_t
	SteamParamStringArray                                  = C.SteamParamStringArray_t
	RemoteStorageAppSyncedClient                           = C.RemoteStorageAppSyncedClient_t
	RemoteStorageAppSyncedServer                           = C.RemoteStorageAppSyncedServer_t
	RemoteStorageAppSyncProgress                           = C.RemoteStorageAppSyncProgress_t
	RemoteStorageAppSyncStatusCheck                        = C.RemoteStorageAppSyncStatusCheck_t
	RemoteStorageFileShareResult                           = C.RemoteStorageFileShareResult_t
	RemoteStoragePublishFileResult                         = C.RemoteStoragePublishFileResult_t
	RemoteStorageDeletePublishedFileResult                 = C.RemoteStorageDeletePublishedFileResult_t
	RemoteStorageEnumerateUserPublishedFilesResult         = C.RemoteStorageEnumerateUserPublishedFilesResult_t
	RemoteStorageSubscribePublishedFileResult              = C.RemoteStorageSubscribePublishedFileResult_t
	RemoteStorageEnumerateUserSubscribedFilesResult        = C.RemoteStorageEnumerateUserSubscribedFilesResult_t
	RemoteStorageUnsubscribePublishedFileResult            = C.RemoteStorageUnsubscribePublishedFileResult_t
	RemoteStorageUpdatePublishedFileResult                 = C.RemoteStorageUpdatePublishedFileResult_t
	RemoteStorageDownloadUGCResult                         = C.RemoteStorageDownloadUGCResult_t
	RemoteStorageGetPublishedFileDetailsResult             = C.RemoteStorageGetPublishedFileDetailsResult_t
	RemoteStorageEnumerateWorkshopFilesResult              = C.RemoteStorageEnumerateWorkshopFilesResult_t
	RemoteStorageGetPublishedItemVoteDetailsResult         = C.RemoteStorageGetPublishedItemVoteDetailsResult_t
	RemoteStoragePublishedFileSubscribed                   = C.RemoteStoragePublishedFileSubscribed_t
	RemoteStoragePublishedFileUnsubscribed                 = C.RemoteStoragePublishedFileUnsubscribed_t
	RemoteStoragePublishedFileDeleted                      = C.RemoteStoragePublishedFileDeleted_t
	RemoteStorageUpdateUserPublishedItemVoteResult         = C.RemoteStorageUpdateUserPublishedItemVoteResult_t
	RemoteStorageUserVoteDetails                           = C.RemoteStorageUserVoteDetails_t
	RemoteStorageEnumerateUserSharedWorkshopFilesResult    = C.RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
	RemoteStorageSetUserPublishedFileActionResult          = C.RemoteStorageSetUserPublishedFileActionResult_t
	RemoteStorageEnumeratePublishedFilesByUserActionResult = C.RemoteStorageEnumeratePublishedFilesByUserActionResult_t
	RemoteStoragePublishFileProgress                       = C.RemoteStoragePublishFileProgress_t
	RemoteStoragePublishedFileUpdated                      = C.RemoteStoragePublishedFileUpdated_t
	RemoteStorageFileWriteAsyncComplete                    = C.RemoteStorageFileWriteAsyncComplete_t
	RemoteStorageFileReadAsyncComplete                     = C.RemoteStorageFileReadAsyncComplete_t
	LeaderboardEntry                                       = C.LeaderboardEntry_t
	UserStatsReceived                                      = C.UserStatsReceived_t
	UserStatsStored                                        = C.UserStatsStored_t
	UserAchievementStored                                  = C.UserAchievementStored_t
	LeaderboardFindResult                                  = C.LeaderboardFindResult_t
	LeaderboardScoresDownloaded                            = C.LeaderboardScoresDownloaded_t
	LeaderboardScoreUploaded                               = C.LeaderboardScoreUploaded_t
	NumberOfCurrentPlayers                                 = C.NumberOfCurrentPlayers_t
	UserStatsUnloaded                                      = C.UserStatsUnloaded_t
	UserAchievementIconFetched                             = C.UserAchievementIconFetched_t
	GlobalAchievementPercentagesReady                      = C.GlobalAchievementPercentagesReady_t
	LeaderboardUGCSet                                      = C.LeaderboardUGCSet_t
	PS3TrophiesInstalled                                   = C.PS3TrophiesInstalled_t
	GlobalStatsReceived                                    = C.GlobalStatsReceived_t
	DlcInstalled                                           = C.DlcInstalled_t
	RegisterActivationCodeResponse                         = C.RegisterActivationCodeResponse_t
	AppProofOfPurchaseKeyResponse                          = C.AppProofOfPurchaseKeyResponse_t
	FileDetailsResult                                      = C.FileDetailsResult_t
	P2PSessionState                                        = C.P2PSessionState_t
	P2PSessionRequest                                      = C.P2PSessionRequest_t
	P2PSessionConnectFail                                  = C.P2PSessionConnectFail_t
	SocketStatusCallback                                   = C.SocketStatusCallback_t
	ScreenshotReady                                        = C.ScreenshotReady_t
	VolumeHasChanged                                       = C.VolumeHasChanged_t
	MusicPlayerWantsShuffled                               = C.MusicPlayerWantsShuffled_t
	MusicPlayerWantsLooped                                 = C.MusicPlayerWantsLooped_t
	MusicPlayerWantsVolume                                 = C.MusicPlayerWantsVolume_t
	MusicPlayerSelectsQueueEntry                           = C.MusicPlayerSelectsQueueEntry_t
	MusicPlayerSelectsPlaylistEntry                        = C.MusicPlayerSelectsPlaylistEntry_t
	MusicPlayerWantsPlayingRepeatStatus                    = C.MusicPlayerWantsPlayingRepeatStatus_t
	HTTPRequestCompleted                                   = C.HTTPRequestCompleted_t
	HTTPRequestHeadersReceived                             = C.HTTPRequestHeadersReceived_t
	HTTPRequestDataReceived                                = C.HTTPRequestDataReceived_t
	ControllerAnalogActionData                             = C.ControllerAnalogActionData_t
	ControllerDigitalActionData                            = C.ControllerDigitalActionData_t
	ControllerMotionData                                   = C.ControllerMotionData_t
	SteamUGCDetails                                        = C.SteamUGCDetails_t
	SteamUGCQueryCompleted                                 = C.SteamUGCQueryCompleted_t
	SteamUGCRequestUGCDetailsResult                        = C.SteamUGCRequestUGCDetailsResult_t
	CreateItemResult                                       = C.CreateItemResult_t
	SubmitItemUpdateResult                                 = C.SubmitItemUpdateResult_t
	DownloadItemResult                                     = C.DownloadItemResult_t
	UserFavoriteItemsListChanged                           = C.UserFavoriteItemsListChanged_t
	SetUserItemVoteResult                                  = C.SetUserItemVoteResult_t
	GetUserItemVoteResult                                  = C.GetUserItemVoteResult_t
	StartPlaytimeTrackingResult                            = C.StartPlaytimeTrackingResult_t
	StopPlaytimeTrackingResult                             = C.StopPlaytimeTrackingResult_t
	AddUGCDependencyResult                                 = C.AddUGCDependencyResult_t
	RemoveUGCDependencyResult                              = C.RemoveUGCDependencyResult_t
	AddAppDependencyResult                                 = C.AddAppDependencyResult_t
	RemoveAppDependencyResult                              = C.RemoveAppDependencyResult_t
	GetAppDependenciesResult                               = C.GetAppDependenciesResult_t
	DeleteItemResult                                       = C.DeleteItemResult_t
	SteamAppInstalled                                      = C.SteamAppInstalled_t
	SteamAppUninstalled                                    = C.SteamAppUninstalled_t
	HTML_BrowserReady                                      = C.HTML_BrowserReady_t
	HTML_NeedsPaint                                        = C.HTML_NeedsPaint_t
	HTML_StartRequest                                      = C.HTML_StartRequest_t
	HTML_CloseBrowser                                      = C.HTML_CloseBrowser_t
	HTML_URLChanged                                        = C.HTML_URLChanged_t
	HTML_FinishedRequest                                   = C.HTML_FinishedRequest_t
	HTML_OpenLinkInNewTab                                  = C.HTML_OpenLinkInNewTab_t
	HTML_ChangedTitle                                      = C.HTML_ChangedTitle_t
	HTML_SearchResults                                     = C.HTML_SearchResults_t
	HTML_CanGoBackAndForward                               = C.HTML_CanGoBackAndForward_t
	HTML_HorizontalScroll                                  = C.HTML_HorizontalScroll_t
	HTML_VerticalScroll                                    = C.HTML_VerticalScroll_t
	HTML_LinkAtPosition                                    = C.HTML_LinkAtPosition_t
	HTML_JSAlert                                           = C.HTML_JSAlert_t
	HTML_JSConfirm                                         = C.HTML_JSConfirm_t
	HTML_FileOpenDialog                                    = C.HTML_FileOpenDialog_t
	HTML_NewWindow                                         = C.HTML_NewWindow_t
	HTML_SetCursor                                         = C.HTML_SetCursor_t
	HTML_StatusText                                        = C.HTML_StatusText_t
	HTML_ShowToolTip                                       = C.HTML_ShowToolTip_t
	HTML_UpdateToolTip                                     = C.HTML_UpdateToolTip_t
	HTML_HideToolTip                                       = C.HTML_HideToolTip_t
	HTML_BrowserRestarted                                  = C.HTML_BrowserRestarted_t
	SteamItemDetails                                       = C.SteamItemDetails_t
	SteamInventoryResultReady                              = C.SteamInventoryResultReady_t
	SteamInventoryFullUpdate                               = C.SteamInventoryFullUpdate_t
	SteamInventoryEligiblePromoItemDefIDs                  = C.SteamInventoryEligiblePromoItemDefIDs_t
	SteamInventoryStartPurchaseResult                      = C.SteamInventoryStartPurchaseResult_t
	SteamInventoryRequestPricesResult                      = C.SteamInventoryRequestPricesResult_t
	BroadcastUploadStop                                    = C.BroadcastUploadStop_t
	GetVideoURLResult                                      = C.GetVideoURLResult_t
	GetOPFSettingsResult                                   = C.GetOPFSettingsResult_t
	GSClientApprove                                        = C.GSClientApprove_t
	GSClientDeny                                           = C.GSClientDeny_t
	GSClientKick                                           = C.GSClientKick_t
	GSClientAchievementStatus                              = C.GSClientAchievementStatus_t
	GSPolicyResponse                                       = C.GSPolicyResponse_t
	GSGameplayStats                                        = C.GSGameplayStats_t
	GSClientGroupStatus                                    = C.GSClientGroupStatus_t
	GSReputation                                           = C.GSReputation_t
	AssociateWithClanResult                                = C.AssociateWithClanResult_t
	ComputeNewPlayerCompatibilityResult                    = C.ComputeNewPlayerCompatibilityResult_t
	GSStatsReceived                                        = C.GSStatsReceived_t
	GSStatsStored                                          = C.GSStatsStored_t
	GSStatsUnloaded                                        = C.GSStatsUnloaded_t
	NewLaunchQueryParameters                               = C.NewLaunchQueryParameters_t
	GCMessageAvailable                                     = C.GCMessageAvailable_t
	GCMessageFailed                                        = C.GCMessageFailed_t
	SteamInventoryDefinitionUpdate                         = C.SteamInventoryDefinitionUpdate_t
	PlaybackStatusHasChanged                               = C.PlaybackStatusHasChanged_t
	MusicPlayerRemoteWillActivate                          = C.MusicPlayerRemoteWillActivate_t
	MusicPlayerRemoteWillDeactivate                        = C.MusicPlayerRemoteWillDeactivate_t
	MusicPlayerRemoteToFront                               = C.MusicPlayerRemoteToFront_t
	MusicPlayerWillQuit                                    = C.MusicPlayerWillQuit_t
	MusicPlayerWantsPlay                                   = C.MusicPlayerWantsPlay_t
	MusicPlayerWantsPause                                  = C.MusicPlayerWantsPause_t
	MusicPlayerWantsPlayPrevious                           = C.MusicPlayerWantsPlayPrevious_t
	MusicPlayerWantsPlayNext                               = C.MusicPlayerWantsPlayNext_t
	ScreenshotRequested                                    = C.ScreenshotRequested_t
	ItemInstalled                                          = C.ItemInstalled_t
	SteamServersConnected                                  = C.SteamServersConnected_t
	IPCFailure                                             = C.IPCFailure_t
	LicensesUpdated                                        = C.LicensesUpdated_t
	IPCountry                                              = C.IPCountry_t
	SteamShutdown                                          = C.SteamShutdown_t
	BroadcastUploadStart                                   = C.BroadcastUploadStart_t
	SteamID                                                = C.CSteamID
	GameID                                                 = C.CGameID
)

type EUniverse int32

const (
	EUniverse_Invalid  EUniverse = 0
	EUniverse_Public   EUniverse = 1
	EUniverse_Beta     EUniverse = 2
	EUniverse_Internal EUniverse = 3
	EUniverse_Dev      EUniverse = 4
	EUniverse_Max      EUniverse = 5
)

type EResult int32

const (
	EResult_OK                                      EResult = 1
	EResult_Fail                                    EResult = 2
	EResult_NoConnection                            EResult = 3
	EResult_InvalidPassword                         EResult = 5
	EResult_LoggedInElsewhere                       EResult = 6
	EResult_InvalidProtocolVer                      EResult = 7
	EResult_InvalidParam                            EResult = 8
	EResult_FileNotFound                            EResult = 9
	EResult_Busy                                    EResult = 10
	EResult_InvalidState                            EResult = 11
	EResult_InvalidName                             EResult = 12
	EResult_InvalidEmail                            EResult = 13
	EResult_DuplicateName                           EResult = 14
	EResult_AccessDenied                            EResult = 15
	EResult_Timeout                                 EResult = 16
	EResult_Banned                                  EResult = 17
	EResult_AccountNotFound                         EResult = 18
	EResult_InvalidSteamID                          EResult = 19
	EResult_ServiceUnavailable                      EResult = 20
	EResult_NotLoggedOn                             EResult = 21
	EResult_Pending                                 EResult = 22
	EResult_EncryptionFailure                       EResult = 23
	EResult_InsufficientPrivilege                   EResult = 24
	EResult_LimitExceeded                           EResult = 25
	EResult_Revoked                                 EResult = 26
	EResult_Expired                                 EResult = 27
	EResult_AlreadyRedeemed                         EResult = 28
	EResult_DuplicateRequest                        EResult = 29
	EResult_AlreadyOwned                            EResult = 30
	EResult_IPNotFound                              EResult = 31
	EResult_PersistFailed                           EResult = 32
	EResult_LockingFailed                           EResult = 33
	EResult_LogonSessionReplaced                    EResult = 34
	EResult_ConnectFailed                           EResult = 35
	EResult_HandshakeFailed                         EResult = 36
	EResult_IOFailure                               EResult = 37
	EResult_RemoteDisconnect                        EResult = 38
	EResult_ShoppingCartNotFound                    EResult = 39
	EResult_Blocked                                 EResult = 40
	EResult_Ignored                                 EResult = 41
	EResult_NoMatch                                 EResult = 42
	EResult_AccountDisabled                         EResult = 43
	EResult_ServiceReadOnly                         EResult = 44
	EResult_AccountNotFeatured                      EResult = 45
	EResult_AdministratorOK                         EResult = 46
	EResult_ContentVersion                          EResult = 47
	EResult_TryAnotherCM                            EResult = 48
	EResult_PasswordRequiredToKickSession           EResult = 49
	EResult_AlreadyLoggedInElsewhere                EResult = 50
	EResult_Suspended                               EResult = 51
	EResult_Cancelled                               EResult = 52
	EResult_DataCorruption                          EResult = 53
	EResult_DiskFull                                EResult = 54
	EResult_RemoteCallFailed                        EResult = 55
	EResult_PasswordUnset                           EResult = 56
	EResult_ExternalAccountUnlinked                 EResult = 57
	EResult_PSNTicketInvalid                        EResult = 58
	EResult_ExternalAccountAlreadyLinked            EResult = 59
	EResult_RemoteFileConflict                      EResult = 60
	EResult_IllegalPassword                         EResult = 61
	EResult_SameAsPreviousValue                     EResult = 62
	EResult_AccountLogonDenied                      EResult = 63
	EResult_CannotUseOldPassword                    EResult = 64
	EResult_InvalidLoginAuthCode                    EResult = 65
	EResult_AccountLogonDeniedNoMail                EResult = 66
	EResult_HardwareNotCapableOfIPT                 EResult = 67
	EResult_IPTInitError                            EResult = 68
	EResult_ParentalControlRestricted               EResult = 69
	EResult_FacebookQueryError                      EResult = 70
	EResult_ExpiredLoginAuthCode                    EResult = 71
	EResult_IPLoginRestrictionFailed                EResult = 72
	EResult_AccountLockedDown                       EResult = 73
	EResult_AccountLogonDeniedVerifiedEmailRequired EResult = 74
	EResult_NoMatchingURL                           EResult = 75
	EResult_BadResponse                             EResult = 76
	EResult_RequirePasswordReEntry                  EResult = 77
	EResult_ValueOutOfRange                         EResult = 78
	EResult_UnexpectedError                         EResult = 79
	EResult_Disabled                                EResult = 80
	EResult_InvalidCEGSubmission                    EResult = 81
	EResult_RestrictedDevice                        EResult = 82
	EResult_RegionLocked                            EResult = 83
	EResult_RateLimitExceeded                       EResult = 84
	EResult_AccountLoginDeniedNeedTwoFactor         EResult = 85
	EResult_ItemDeleted                             EResult = 86
	EResult_AccountLoginDeniedThrottle              EResult = 87
	EResult_TwoFactorCodeMismatch                   EResult = 88
	EResult_TwoFactorActivationCodeMismatch         EResult = 89
	EResult_AccountAssociatedToMultiplePartners     EResult = 90
	EResult_NotModified                             EResult = 91
	EResult_NoMobileDevice                          EResult = 92
	EResult_TimeNotSynced                           EResult = 93
	EResult_SmsCodeFailed                           EResult = 94
	EResult_AccountLimitExceeded                    EResult = 95
	EResult_AccountActivityLimitExceeded            EResult = 96
	EResult_PhoneActivityLimitExceeded              EResult = 97
	EResult_RefundToWallet                          EResult = 98
	EResult_EmailSendFailure                        EResult = 99
	EResult_NotSettled                              EResult = 100
	EResult_NeedCaptcha                             EResult = 101
	EResult_GSLTDenied                              EResult = 102
	EResult_GSOwnerDenied                           EResult = 103
	EResult_InvalidItemType                         EResult = 104
	EResult_IPBanned                                EResult = 105
	EResult_GSLTExpired                             EResult = 106
	EResult_InsufficientFunds                       EResult = 107
	EResult_TooManyPending                          EResult = 108
	EResult_NoSiteLicensesFound                     EResult = 109
	EResult_WGNetworkSendExceeded                   EResult = 110
	EResult_AccountNotFriends                       EResult = 111
	EResult_LimitedUserAccount                      EResult = 112
)

type EVoiceResult int32

const (
	EVoiceResult_OK                   EVoiceResult = 0
	EVoiceResult_NotInitialized       EVoiceResult = 1
	EVoiceResult_NotRecording         EVoiceResult = 2
	EVoiceResult_NoData               EVoiceResult = 3
	EVoiceResult_BufferTooSmall       EVoiceResult = 4
	EVoiceResult_DataCorrupted        EVoiceResult = 5
	EVoiceResult_Restricted           EVoiceResult = 6
	EVoiceResult_UnsupportedCodec     EVoiceResult = 7
	EVoiceResult_ReceiverOutOfDate    EVoiceResult = 8
	EVoiceResult_ReceiverDidNotAnswer EVoiceResult = 9
)

type EDenyReason int32

const (
	EDenyReason_EDenyInvalid                 EDenyReason = 0
	EDenyReason_EDenyInvalidVersion          EDenyReason = 1
	EDenyReason_EDenyGeneric                 EDenyReason = 2
	EDenyReason_EDenyNotLoggedOn             EDenyReason = 3
	EDenyReason_EDenyNoLicense               EDenyReason = 4
	EDenyReason_EDenyCheater                 EDenyReason = 5
	EDenyReason_EDenyLoggedInElseWhere       EDenyReason = 6
	EDenyReason_EDenyUnknownText             EDenyReason = 7
	EDenyReason_EDenyIncompatibleAnticheat   EDenyReason = 8
	EDenyReason_EDenyMemoryCorruption        EDenyReason = 9
	EDenyReason_EDenyIncompatibleSoftware    EDenyReason = 10
	EDenyReason_EDenySteamConnectionLost     EDenyReason = 11
	EDenyReason_EDenySteamConnectionError    EDenyReason = 12
	EDenyReason_EDenySteamResponseTimedOut   EDenyReason = 13
	EDenyReason_EDenySteamValidationStalled  EDenyReason = 14
	EDenyReason_EDenySteamOwnerLeftGuestUser EDenyReason = 15
)

type EBeginAuthSessionResult int32

const (
	EBeginAuthSessionResult_OK               EBeginAuthSessionResult = 0
	EBeginAuthSessionResult_InvalidTicket    EBeginAuthSessionResult = 1
	EBeginAuthSessionResult_DuplicateRequest EBeginAuthSessionResult = 2
	EBeginAuthSessionResult_InvalidVersion   EBeginAuthSessionResult = 3
	EBeginAuthSessionResult_GameMismatch     EBeginAuthSessionResult = 4
	EBeginAuthSessionResult_ExpiredTicket    EBeginAuthSessionResult = 5
)

type EAuthSessionResponse int32

const (
	EAuthSessionResponse_OK                           EAuthSessionResponse = 0
	EAuthSessionResponse_UserNotConnectedToSteam      EAuthSessionResponse = 1
	EAuthSessionResponse_NoLicenseOrExpired           EAuthSessionResponse = 2
	EAuthSessionResponse_VACBanned                    EAuthSessionResponse = 3
	EAuthSessionResponse_LoggedInElseWhere            EAuthSessionResponse = 4
	EAuthSessionResponse_VACCheckTimedOut             EAuthSessionResponse = 5
	EAuthSessionResponse_AuthTicketCanceled           EAuthSessionResponse = 6
	EAuthSessionResponse_AuthTicketInvalidAlreadyUsed EAuthSessionResponse = 7
	EAuthSessionResponse_AuthTicketInvalid            EAuthSessionResponse = 8
	EAuthSessionResponse_PublisherIssuedBan           EAuthSessionResponse = 9
)

type EUserHasLicenseForAppResult int32

const (
	EUserHasLicenseForAppResult_EUserHasLicenseResultHasLicense         EUserHasLicenseForAppResult = 0
	EUserHasLicenseForAppResult_EUserHasLicenseResultDoesNotHaveLicense EUserHasLicenseForAppResult = 1
	EUserHasLicenseForAppResult_EUserHasLicenseResultNoAuth             EUserHasLicenseForAppResult = 2
)

type EAccountType int32

const (
	EAccountType_Invalid        EAccountType = 0
	EAccountType_Individual     EAccountType = 1
	EAccountType_Multiseat      EAccountType = 2
	EAccountType_GameServer     EAccountType = 3
	EAccountType_AnonGameServer EAccountType = 4
	EAccountType_Pending        EAccountType = 5
	EAccountType_ContentServer  EAccountType = 6
	EAccountType_Clan           EAccountType = 7
	EAccountType_Chat           EAccountType = 8
	EAccountType_ConsoleUser    EAccountType = 9
	EAccountType_AnonUser       EAccountType = 10
	EAccountType_Max            EAccountType = 11
)

type EAppReleaseState int32

const (
	EAppReleaseState_Unknown     EAppReleaseState = 0
	EAppReleaseState_Unavailable EAppReleaseState = 1
	EAppReleaseState_Prerelease  EAppReleaseState = 2
	EAppReleaseState_PreloadOnly EAppReleaseState = 3
	EAppReleaseState_Released    EAppReleaseState = 4
)

type EAppOwnershipFlags int32

const (
	EAppOwnershipFlags_None               EAppOwnershipFlags = 0
	EAppOwnershipFlags_OwnsLicense        EAppOwnershipFlags = 1
	EAppOwnershipFlags_FreeLicense        EAppOwnershipFlags = 2
	EAppOwnershipFlags_RegionRestricted   EAppOwnershipFlags = 4
	EAppOwnershipFlags_LowViolence        EAppOwnershipFlags = 8
	EAppOwnershipFlags_InvalidPlatform    EAppOwnershipFlags = 16
	EAppOwnershipFlags_SharedLicense      EAppOwnershipFlags = 32
	EAppOwnershipFlags_FreeWeekend        EAppOwnershipFlags = 64
	EAppOwnershipFlags_RetailLicense      EAppOwnershipFlags = 128
	EAppOwnershipFlags_LicenseLocked      EAppOwnershipFlags = 256
	EAppOwnershipFlags_LicensePending     EAppOwnershipFlags = 512
	EAppOwnershipFlags_LicenseExpired     EAppOwnershipFlags = 1024
	EAppOwnershipFlags_LicensePermanent   EAppOwnershipFlags = 2048
	EAppOwnershipFlags_LicenseRecurring   EAppOwnershipFlags = 4096
	EAppOwnershipFlags_LicenseCanceled    EAppOwnershipFlags = 8192
	EAppOwnershipFlags_AutoGrant          EAppOwnershipFlags = 16384
	EAppOwnershipFlags_PendingGift        EAppOwnershipFlags = 32768
	EAppOwnershipFlags_RentalNotActivated EAppOwnershipFlags = 65536
	EAppOwnershipFlags_Rental             EAppOwnershipFlags = 131072
	EAppOwnershipFlags_SiteLicense        EAppOwnershipFlags = 262144
)

type EAppType int32

const (
	EAppType_Invalid          EAppType = 0
	EAppType_Game             EAppType = 1
	EAppType_Application      EAppType = 2
	EAppType_Tool             EAppType = 4
	EAppType_Demo             EAppType = 8
	EAppType_Media_DEPRECATED EAppType = 16
	EAppType_DLC              EAppType = 32
	EAppType_Guide            EAppType = 64
	EAppType_Driver           EAppType = 128
	EAppType_Config           EAppType = 256
	EAppType_Hardware         EAppType = 512
	EAppType_Franchise        EAppType = 1024
	EAppType_Video            EAppType = 2048
	EAppType_Plugin           EAppType = 4096
	EAppType_Music            EAppType = 8192
	EAppType_Series           EAppType = 16384
	EAppType_Comic            EAppType = 32768
	EAppType_Shortcut         EAppType = 1073741824
	EAppType_DepotOnly        EAppType = -2147483648
)

type ESteamUserStatType int32

const (
	ESteamUserStatType_INVALID           ESteamUserStatType = 0
	ESteamUserStatType_INT               ESteamUserStatType = 1
	ESteamUserStatType_FLOAT             ESteamUserStatType = 2
	ESteamUserStatType_AVGRATE           ESteamUserStatType = 3
	ESteamUserStatType_ACHIEVEMENTS      ESteamUserStatType = 4
	ESteamUserStatType_GROUPACHIEVEMENTS ESteamUserStatType = 5
	ESteamUserStatType_MAX               ESteamUserStatType = 6
)

type EChatEntryType int32

const (
	EChatEntryType_Invalid          EChatEntryType = 0
	EChatEntryType_ChatMsg          EChatEntryType = 1
	EChatEntryType_Typing           EChatEntryType = 2
	EChatEntryType_InviteGame       EChatEntryType = 3
	EChatEntryType_Emote            EChatEntryType = 4
	EChatEntryType_LeftConversation EChatEntryType = 6
	EChatEntryType_Entered          EChatEntryType = 7
	EChatEntryType_WasKicked        EChatEntryType = 8
	EChatEntryType_WasBanned        EChatEntryType = 9
	EChatEntryType_Disconnected     EChatEntryType = 10
	EChatEntryType_HistoricalChat   EChatEntryType = 11
	EChatEntryType_LinkBlocked      EChatEntryType = 14
)

type EChatRoomEnterResponse int32

const (
	EChatRoomEnterResponse_Success           EChatRoomEnterResponse = 1
	EChatRoomEnterResponse_DoesntExist       EChatRoomEnterResponse = 2
	EChatRoomEnterResponse_NotAllowed        EChatRoomEnterResponse = 3
	EChatRoomEnterResponse_Full              EChatRoomEnterResponse = 4
	EChatRoomEnterResponse_Error             EChatRoomEnterResponse = 5
	EChatRoomEnterResponse_Banned            EChatRoomEnterResponse = 6
	EChatRoomEnterResponse_Limited           EChatRoomEnterResponse = 7
	EChatRoomEnterResponse_ClanDisabled      EChatRoomEnterResponse = 8
	EChatRoomEnterResponse_CommunityBan      EChatRoomEnterResponse = 9
	EChatRoomEnterResponse_MemberBlockedYou  EChatRoomEnterResponse = 10
	EChatRoomEnterResponse_YouBlockedMember  EChatRoomEnterResponse = 11
	EChatRoomEnterResponse_RatelimitExceeded EChatRoomEnterResponse = 15
)

type EChatSteamIDInstanceFlags int32

const (
	EChatSteamIDInstanceFlags_EChatAccountInstanceMask  EChatSteamIDInstanceFlags = 4095
	EChatSteamIDInstanceFlags_EChatInstanceFlagClan     EChatSteamIDInstanceFlags = 524288
	EChatSteamIDInstanceFlags_EChatInstanceFlagLobby    EChatSteamIDInstanceFlags = 262144
	EChatSteamIDInstanceFlags_EChatInstanceFlagMMSLobby EChatSteamIDInstanceFlags = 131072
)

type EMarketingMessageFlags int32

const (
	EMarketingMessageFlags_None                 EMarketingMessageFlags = 0
	EMarketingMessageFlags_HighPriority         EMarketingMessageFlags = 1
	EMarketingMessageFlags_PlatformWindows      EMarketingMessageFlags = 2
	EMarketingMessageFlags_PlatformMac          EMarketingMessageFlags = 4
	EMarketingMessageFlags_PlatformLinux        EMarketingMessageFlags = 8
	EMarketingMessageFlags_PlatformRestrictions EMarketingMessageFlags = 14
)

type ENotificationPosition int32

const (
	ENotificationPosition_EPositionTopLeft     ENotificationPosition = 0
	ENotificationPosition_EPositionTopRight    ENotificationPosition = 1
	ENotificationPosition_EPositionBottomLeft  ENotificationPosition = 2
	ENotificationPosition_EPositionBottomRight ENotificationPosition = 3
)

type EBroadcastUploadResult int32

const (
	EBroadcastUploadResult_None              EBroadcastUploadResult = 0
	EBroadcastUploadResult_OK                EBroadcastUploadResult = 1
	EBroadcastUploadResult_InitFailed        EBroadcastUploadResult = 2
	EBroadcastUploadResult_FrameFailed       EBroadcastUploadResult = 3
	EBroadcastUploadResult_Timeout           EBroadcastUploadResult = 4
	EBroadcastUploadResult_BandwidthExceeded EBroadcastUploadResult = 5
	EBroadcastUploadResult_LowFPS            EBroadcastUploadResult = 6
	EBroadcastUploadResult_MissingKeyFrames  EBroadcastUploadResult = 7
	EBroadcastUploadResult_NoConnection      EBroadcastUploadResult = 8
	EBroadcastUploadResult_RelayFailed       EBroadcastUploadResult = 9
	EBroadcastUploadResult_SettingsChanged   EBroadcastUploadResult = 10
	EBroadcastUploadResult_MissingAudio      EBroadcastUploadResult = 11
	EBroadcastUploadResult_TooFarBehind      EBroadcastUploadResult = 12
	EBroadcastUploadResult_TranscodeBehind   EBroadcastUploadResult = 13
)

type ELaunchOptionType int32

const (
	ELaunchOptionType_None          ELaunchOptionType = 0
	ELaunchOptionType_Default       ELaunchOptionType = 1
	ELaunchOptionType_SafeMode      ELaunchOptionType = 2
	ELaunchOptionType_Multiplayer   ELaunchOptionType = 3
	ELaunchOptionType_Config        ELaunchOptionType = 4
	ELaunchOptionType_OpenVR        ELaunchOptionType = 5
	ELaunchOptionType_Server        ELaunchOptionType = 6
	ELaunchOptionType_Editor        ELaunchOptionType = 7
	ELaunchOptionType_Manual        ELaunchOptionType = 8
	ELaunchOptionType_Benchmark     ELaunchOptionType = 9
	ELaunchOptionType_Option1       ELaunchOptionType = 10
	ELaunchOptionType_Option2       ELaunchOptionType = 11
	ELaunchOptionType_Option3       ELaunchOptionType = 12
	ELaunchOptionType_OculusVR      ELaunchOptionType = 13
	ELaunchOptionType_OpenVROverlay ELaunchOptionType = 14
	ELaunchOptionType_OSVR          ELaunchOptionType = 15
	ELaunchOptionType_Dialog        ELaunchOptionType = 1000
)

type EVRHMDType int32

const (
	EVRHMDType_None                  EVRHMDType = -1
	EVRHMDType_Unknown               EVRHMDType = 0
	EVRHMDType_HTC_Dev               EVRHMDType = 1
	EVRHMDType_HTC_VivePre           EVRHMDType = 2
	EVRHMDType_HTC_Vive              EVRHMDType = 3
	EVRHMDType_HTC_Unknown           EVRHMDType = 20
	EVRHMDType_Oculus_DK1            EVRHMDType = 21
	EVRHMDType_Oculus_DK2            EVRHMDType = 22
	EVRHMDType_Oculus_Rift           EVRHMDType = 23
	EVRHMDType_Oculus_Unknown        EVRHMDType = 40
	EVRHMDType_Acer_Unknown          EVRHMDType = 50
	EVRHMDType_Acer_WindowsMR        EVRHMDType = 51
	EVRHMDType_Dell_Unknown          EVRHMDType = 60
	EVRHMDType_Dell_Visor            EVRHMDType = 61
	EVRHMDType_Lenovo_Unknown        EVRHMDType = 70
	EVRHMDType_Lenovo_Explorer       EVRHMDType = 71
	EVRHMDType_HP_Unknown            EVRHMDType = 80
	EVRHMDType_HP_WindowsMR          EVRHMDType = 81
	EVRHMDType_Samsung_Unknown       EVRHMDType = 90
	EVRHMDType_Samsung_Odyssey       EVRHMDType = 91
	EVRHMDType_Unannounced_Unknown   EVRHMDType = 100
	EVRHMDType_Unannounced_WindowsMR EVRHMDType = 101
)

type EGameIDType int32

const (
	EGameIDType_App      EGameIDType = 0
	EGameIDType_GameMod  EGameIDType = 1
	EGameIDType_Shortcut EGameIDType = 2
	EGameIDType_P2P      EGameIDType = 3
)

type EFailureType int32

const (
	EFailureType_EFailureFlushedCallbackQueue EFailureType = 0
	EFailureType_EFailurePipeFail             EFailureType = 1
)

type EFriendRelationship int32

const (
	EFriendRelationship_None                 EFriendRelationship = 0
	EFriendRelationship_Blocked              EFriendRelationship = 1
	EFriendRelationship_RequestRecipient     EFriendRelationship = 2
	EFriendRelationship_Friend               EFriendRelationship = 3
	EFriendRelationship_RequestInitiator     EFriendRelationship = 4
	EFriendRelationship_Ignored              EFriendRelationship = 5
	EFriendRelationship_IgnoredFriend        EFriendRelationship = 6
	EFriendRelationship_Suggested_DEPRECATED EFriendRelationship = 7
	EFriendRelationship_Max                  EFriendRelationship = 8
)

type EPersonaState int32

const (
	EPersonaState_Offline        EPersonaState = 0
	EPersonaState_Online         EPersonaState = 1
	EPersonaState_Busy           EPersonaState = 2
	EPersonaState_Away           EPersonaState = 3
	EPersonaState_Snooze         EPersonaState = 4
	EPersonaState_LookingToTrade EPersonaState = 5
	EPersonaState_LookingToPlay  EPersonaState = 6
	EPersonaState_Max            EPersonaState = 7
)

type EFriendFlags int32

const (
	EFriendFlags_EFriendFlagNone                 EFriendFlags = 0
	EFriendFlags_EFriendFlagBlocked              EFriendFlags = 1
	EFriendFlags_EFriendFlagFriendshipRequested  EFriendFlags = 2
	EFriendFlags_EFriendFlagImmediate            EFriendFlags = 4
	EFriendFlags_EFriendFlagClanMember           EFriendFlags = 8
	EFriendFlags_EFriendFlagOnGameServer         EFriendFlags = 16
	EFriendFlags_EFriendFlagRequestingFriendship EFriendFlags = 128
	EFriendFlags_EFriendFlagRequestingInfo       EFriendFlags = 256
	EFriendFlags_EFriendFlagIgnored              EFriendFlags = 512
	EFriendFlags_EFriendFlagIgnoredFriend        EFriendFlags = 1024
	EFriendFlags_EFriendFlagChatMember           EFriendFlags = 4096
	EFriendFlags_EFriendFlagAll                  EFriendFlags = 65535
)

type EUserRestriction int32

const (
	EUserRestriction_nUserRestrictionNone        EUserRestriction = 0
	EUserRestriction_nUserRestrictionUnknown     EUserRestriction = 1
	EUserRestriction_nUserRestrictionAnyChat     EUserRestriction = 2
	EUserRestriction_nUserRestrictionVoiceChat   EUserRestriction = 4
	EUserRestriction_nUserRestrictionGroupChat   EUserRestriction = 8
	EUserRestriction_nUserRestrictionRating      EUserRestriction = 16
	EUserRestriction_nUserRestrictionGameInvites EUserRestriction = 32
	EUserRestriction_nUserRestrictionTrading     EUserRestriction = 64
)

type EOverlayToStoreFlag int32

const (
	EOverlayToStoreFlag_None             EOverlayToStoreFlag = 0
	EOverlayToStoreFlag_AddToCart        EOverlayToStoreFlag = 1
	EOverlayToStoreFlag_AddToCartAndShow EOverlayToStoreFlag = 2
)

type EPersonaChange int32

const (
	EPersonaChange_Name                EPersonaChange = 1
	EPersonaChange_Status              EPersonaChange = 2
	EPersonaChange_ComeOnline          EPersonaChange = 4
	EPersonaChange_GoneOffline         EPersonaChange = 8
	EPersonaChange_GamePlayed          EPersonaChange = 16
	EPersonaChange_GameServer          EPersonaChange = 32
	EPersonaChange_Avatar              EPersonaChange = 64
	EPersonaChange_JoinedSource        EPersonaChange = 128
	EPersonaChange_LeftSource          EPersonaChange = 256
	EPersonaChange_RelationshipChanged EPersonaChange = 512
	EPersonaChange_NameFirstSet        EPersonaChange = 1024
	EPersonaChange_FacebookInfo        EPersonaChange = 2048
	EPersonaChange_Nickname            EPersonaChange = 4096
	EPersonaChange_SteamLevel          EPersonaChange = 8192
)

type ESteamAPICallFailure int32

const (
	ESteamAPICallFailure_None               ESteamAPICallFailure = -1
	ESteamAPICallFailure_SteamGone          ESteamAPICallFailure = 0
	ESteamAPICallFailure_NetworkFailure     ESteamAPICallFailure = 1
	ESteamAPICallFailure_InvalidHandle      ESteamAPICallFailure = 2
	ESteamAPICallFailure_MismatchedCallback ESteamAPICallFailure = 3
)

type EGamepadTextInputMode int32

const (
	EGamepadTextInputMode_Normal   EGamepadTextInputMode = 0
	EGamepadTextInputMode_Password EGamepadTextInputMode = 1
)

type EGamepadTextInputLineMode int32

const (
	EGamepadTextInputLineMode_SingleLine    EGamepadTextInputLineMode = 0
	EGamepadTextInputLineMode_MultipleLines EGamepadTextInputLineMode = 1
)

type ECheckFileSignature int32

const (
	ECheckFileSignature_InvalidSignature             ECheckFileSignature = 0
	ECheckFileSignature_ValidSignature               ECheckFileSignature = 1
	ECheckFileSignature_FileNotFound                 ECheckFileSignature = 2
	ECheckFileSignature_NoSignaturesFoundForThisApp  ECheckFileSignature = 3
	ECheckFileSignature_NoSignaturesFoundForThisFile ECheckFileSignature = 4
)

type EMatchMakingServerResponse int32

const (
	EMatchMakingServerResponse_ServerResponded               EMatchMakingServerResponse = 0
	EMatchMakingServerResponse_ServerFailedToRespond         EMatchMakingServerResponse = 1
	EMatchMakingServerResponse_NoServersListedOnMasterServer EMatchMakingServerResponse = 2
)

type ELobbyType int32

const (
	ELobbyType_Private     ELobbyType = 0
	ELobbyType_FriendsOnly ELobbyType = 1
	ELobbyType_Public      ELobbyType = 2
	ELobbyType_Invisible   ELobbyType = 3
)

type ELobbyComparison int32

const (
	ELobbyComparison_EqualToOrLessThan    ELobbyComparison = -2
	ELobbyComparison_LessThan             ELobbyComparison = -1
	ELobbyComparison_Equal                ELobbyComparison = 0
	ELobbyComparison_GreaterThan          ELobbyComparison = 1
	ELobbyComparison_EqualToOrGreaterThan ELobbyComparison = 2
	ELobbyComparison_NotEqual             ELobbyComparison = 3
)

type ELobbyDistanceFilter int32

const (
	ELobbyDistanceFilter_Close     ELobbyDistanceFilter = 0
	ELobbyDistanceFilter_Default   ELobbyDistanceFilter = 1
	ELobbyDistanceFilter_Far       ELobbyDistanceFilter = 2
	ELobbyDistanceFilter_Worldwide ELobbyDistanceFilter = 3
)

type EChatMemberStateChange int32

const (
	EChatMemberStateChange_Entered      EChatMemberStateChange = 1
	EChatMemberStateChange_Left         EChatMemberStateChange = 2
	EChatMemberStateChange_Disconnected EChatMemberStateChange = 4
	EChatMemberStateChange_Kicked       EChatMemberStateChange = 8
	EChatMemberStateChange_Banned       EChatMemberStateChange = 16
)

type ERemoteStoragePlatform int32

const (
	ERemoteStoragePlatform_None      ERemoteStoragePlatform = 0
	ERemoteStoragePlatform_Windows   ERemoteStoragePlatform = 1
	ERemoteStoragePlatform_OSX       ERemoteStoragePlatform = 2
	ERemoteStoragePlatform_PS3       ERemoteStoragePlatform = 4
	ERemoteStoragePlatform_Linux     ERemoteStoragePlatform = 8
	ERemoteStoragePlatform_Reserved2 ERemoteStoragePlatform = 16
	ERemoteStoragePlatform_All       ERemoteStoragePlatform = -1
)

type ERemoteStoragePublishedFileVisibility int32

const (
	ERemoteStoragePublishedFileVisibility_Public      ERemoteStoragePublishedFileVisibility = 0
	ERemoteStoragePublishedFileVisibility_FriendsOnly ERemoteStoragePublishedFileVisibility = 1
	ERemoteStoragePublishedFileVisibility_Private     ERemoteStoragePublishedFileVisibility = 2
)

type EWorkshopFileType int32

const (
	EWorkshopFileType_First                  EWorkshopFileType = 0
	EWorkshopFileType_Community              EWorkshopFileType = 0
	EWorkshopFileType_Microtransaction       EWorkshopFileType = 1
	EWorkshopFileType_Collection             EWorkshopFileType = 2
	EWorkshopFileType_Art                    EWorkshopFileType = 3
	EWorkshopFileType_Video                  EWorkshopFileType = 4
	EWorkshopFileType_Screenshot             EWorkshopFileType = 5
	EWorkshopFileType_Game                   EWorkshopFileType = 6
	EWorkshopFileType_Software               EWorkshopFileType = 7
	EWorkshopFileType_Concept                EWorkshopFileType = 8
	EWorkshopFileType_WebGuide               EWorkshopFileType = 9
	EWorkshopFileType_IntegratedGuide        EWorkshopFileType = 10
	EWorkshopFileType_Merch                  EWorkshopFileType = 11
	EWorkshopFileType_ControllerBinding      EWorkshopFileType = 12
	EWorkshopFileType_SteamworksAccessInvite EWorkshopFileType = 13
	EWorkshopFileType_SteamVideo             EWorkshopFileType = 14
	EWorkshopFileType_GameManagedItem        EWorkshopFileType = 15
	EWorkshopFileType_Max                    EWorkshopFileType = 16
)

type EWorkshopVote int32

const (
	EWorkshopVote_Unvoted EWorkshopVote = 0
	EWorkshopVote_For     EWorkshopVote = 1
	EWorkshopVote_Against EWorkshopVote = 2
	EWorkshopVote_Later   EWorkshopVote = 3
)

type EWorkshopFileAction int32

const (
	EWorkshopFileAction_Played    EWorkshopFileAction = 0
	EWorkshopFileAction_Completed EWorkshopFileAction = 1
)

type EWorkshopEnumerationType int32

const (
	EWorkshopEnumerationType_RankedByVote            EWorkshopEnumerationType = 0
	EWorkshopEnumerationType_Recent                  EWorkshopEnumerationType = 1
	EWorkshopEnumerationType_Trending                EWorkshopEnumerationType = 2
	EWorkshopEnumerationType_FavoritesOfFriends      EWorkshopEnumerationType = 3
	EWorkshopEnumerationType_VotedByFriends          EWorkshopEnumerationType = 4
	EWorkshopEnumerationType_ContentByFriends        EWorkshopEnumerationType = 5
	EWorkshopEnumerationType_RecentFromFollowedUsers EWorkshopEnumerationType = 6
)

type EWorkshopVideoProvider int32

const (
	EWorkshopVideoProvider_None    EWorkshopVideoProvider = 0
	EWorkshopVideoProvider_Youtube EWorkshopVideoProvider = 1
)

type EUGCReadAction int32

const (
	EUGCReadAction_EUGCRead_ContinueReadingUntilFinished EUGCReadAction = 0
	EUGCReadAction_EUGCRead_ContinueReading              EUGCReadAction = 1
	EUGCReadAction_EUGCRead_Close                        EUGCReadAction = 2
)

type ELeaderboardDataRequest int32

const (
	ELeaderboardDataRequest_Global           ELeaderboardDataRequest = 0
	ELeaderboardDataRequest_GlobalAroundUser ELeaderboardDataRequest = 1
	ELeaderboardDataRequest_Friends          ELeaderboardDataRequest = 2
	ELeaderboardDataRequest_Users            ELeaderboardDataRequest = 3
)

type ELeaderboardSortMethod int32

const (
	ELeaderboardSortMethod_None       ELeaderboardSortMethod = 0
	ELeaderboardSortMethod_Ascending  ELeaderboardSortMethod = 1
	ELeaderboardSortMethod_Descending ELeaderboardSortMethod = 2
)

type ELeaderboardDisplayType int32

const (
	ELeaderboardDisplayType_None             ELeaderboardDisplayType = 0
	ELeaderboardDisplayType_Numeric          ELeaderboardDisplayType = 1
	ELeaderboardDisplayType_TimeSeconds      ELeaderboardDisplayType = 2
	ELeaderboardDisplayType_TimeMilliSeconds ELeaderboardDisplayType = 3
)

type ELeaderboardUploadScoreMethod int32

const (
	ELeaderboardUploadScoreMethod_None        ELeaderboardUploadScoreMethod = 0
	ELeaderboardUploadScoreMethod_KeepBest    ELeaderboardUploadScoreMethod = 1
	ELeaderboardUploadScoreMethod_ForceUpdate ELeaderboardUploadScoreMethod = 2
)

type ERegisterActivationCodeResult int32

const (
	ERegisterActivationCodeResult_OK                                  ERegisterActivationCodeResult = 0
	ERegisterActivationCodeResult_Fail                                ERegisterActivationCodeResult = 1
	ERegisterActivationCodeResult_AlreadyRegistered                   ERegisterActivationCodeResult = 2
	ERegisterActivationCodeResult_Timeout                             ERegisterActivationCodeResult = 3
	ERegisterActivationCodeResult_ERegisterActivationCodeAlreadyOwned ERegisterActivationCodeResult = 4
)

type EP2PSessionError int32

const (
	EP2PSessionError_None                   EP2PSessionError = 0
	EP2PSessionError_NotRunningApp          EP2PSessionError = 1
	EP2PSessionError_NoRightsToApp          EP2PSessionError = 2
	EP2PSessionError_DestinationNotLoggedIn EP2PSessionError = 3
	EP2PSessionError_Timeout                EP2PSessionError = 4
	EP2PSessionError_Max                    EP2PSessionError = 5
)

type EP2PSend int32

const (
	EP2PSend_Unreliable            EP2PSend = 0
	EP2PSend_UnreliableNoDelay     EP2PSend = 1
	EP2PSend_Reliable              EP2PSend = 2
	EP2PSend_ReliableWithBuffering EP2PSend = 3
)

type ESNetSocketState int32

const (
	ESNetSocketState_Invalid                  ESNetSocketState = 0
	ESNetSocketState_Connected                ESNetSocketState = 1
	ESNetSocketState_Initiated                ESNetSocketState = 10
	ESNetSocketState_LocalCandidatesFound     ESNetSocketState = 11
	ESNetSocketState_ReceivedRemoteCandidates ESNetSocketState = 12
	ESNetSocketState_ChallengeHandshake       ESNetSocketState = 15
	ESNetSocketState_Disconnecting            ESNetSocketState = 21
	ESNetSocketState_LocalDisconnect          ESNetSocketState = 22
	ESNetSocketState_TimeoutDuringConnect     ESNetSocketState = 23
	ESNetSocketState_RemoteEndDisconnected    ESNetSocketState = 24
	ESNetSocketState_ConnectionBroken         ESNetSocketState = 25
)

type ESNetSocketConnectionType int32

const (
	ESNetSocketConnectionType_NotConnected ESNetSocketConnectionType = 0
	ESNetSocketConnectionType_UDP          ESNetSocketConnectionType = 1
	ESNetSocketConnectionType_UDPRelay     ESNetSocketConnectionType = 2
)

type EVRScreenshotType int32

const (
	EVRScreenshotType_None           EVRScreenshotType = 0
	EVRScreenshotType_Mono           EVRScreenshotType = 1
	EVRScreenshotType_Stereo         EVRScreenshotType = 2
	EVRScreenshotType_MonoCubemap    EVRScreenshotType = 3
	EVRScreenshotType_MonoPanorama   EVRScreenshotType = 4
	EVRScreenshotType_StereoPanorama EVRScreenshotType = 5
)

type EAudioPlayback int32

const (
	EAudioPlayback_Undefined EAudioPlayback = 0
	EAudioPlayback_Playing   EAudioPlayback = 1
	EAudioPlayback_Paused    EAudioPlayback = 2
	EAudioPlayback_Idle      EAudioPlayback = 3
)

type EHTTPMethod int32

const (
	EHTTPMethod_Invalid EHTTPMethod = 0
	EHTTPMethod_GET     EHTTPMethod = 1
	EHTTPMethod_HEAD    EHTTPMethod = 2
	EHTTPMethod_POST    EHTTPMethod = 3
	EHTTPMethod_PUT     EHTTPMethod = 4
	EHTTPMethod_DELETE  EHTTPMethod = 5
	EHTTPMethod_OPTIONS EHTTPMethod = 6
	EHTTPMethod_PATCH   EHTTPMethod = 7
)

type EHTTPStatusCode int32

const (
	EHTTPStatusCode_Invalid                         EHTTPStatusCode = 0
	EHTTPStatusCode_100Continue                     EHTTPStatusCode = 100
	EHTTPStatusCode_101SwitchingProtocols           EHTTPStatusCode = 101
	EHTTPStatusCode_200OK                           EHTTPStatusCode = 200
	EHTTPStatusCode_201Created                      EHTTPStatusCode = 201
	EHTTPStatusCode_202Accepted                     EHTTPStatusCode = 202
	EHTTPStatusCode_203NonAuthoritative             EHTTPStatusCode = 203
	EHTTPStatusCode_204NoContent                    EHTTPStatusCode = 204
	EHTTPStatusCode_205ResetContent                 EHTTPStatusCode = 205
	EHTTPStatusCode_206PartialContent               EHTTPStatusCode = 206
	EHTTPStatusCode_300MultipleChoices              EHTTPStatusCode = 300
	EHTTPStatusCode_301MovedPermanently             EHTTPStatusCode = 301
	EHTTPStatusCode_302Found                        EHTTPStatusCode = 302
	EHTTPStatusCode_303SeeOther                     EHTTPStatusCode = 303
	EHTTPStatusCode_304NotModified                  EHTTPStatusCode = 304
	EHTTPStatusCode_305UseProxy                     EHTTPStatusCode = 305
	EHTTPStatusCode_307TemporaryRedirect            EHTTPStatusCode = 307
	EHTTPStatusCode_400BadRequest                   EHTTPStatusCode = 400
	EHTTPStatusCode_401Unauthorized                 EHTTPStatusCode = 401
	EHTTPStatusCode_402PaymentRequired              EHTTPStatusCode = 402
	EHTTPStatusCode_403Forbidden                    EHTTPStatusCode = 403
	EHTTPStatusCode_404NotFound                     EHTTPStatusCode = 404
	EHTTPStatusCode_405MethodNotAllowed             EHTTPStatusCode = 405
	EHTTPStatusCode_406NotAcceptable                EHTTPStatusCode = 406
	EHTTPStatusCode_407ProxyAuthRequired            EHTTPStatusCode = 407
	EHTTPStatusCode_408RequestTimeout               EHTTPStatusCode = 408
	EHTTPStatusCode_409Conflict                     EHTTPStatusCode = 409
	EHTTPStatusCode_410Gone                         EHTTPStatusCode = 410
	EHTTPStatusCode_411LengthRequired               EHTTPStatusCode = 411
	EHTTPStatusCode_412PreconditionFailed           EHTTPStatusCode = 412
	EHTTPStatusCode_413RequestEntityTooLarge        EHTTPStatusCode = 413
	EHTTPStatusCode_414RequestURITooLong            EHTTPStatusCode = 414
	EHTTPStatusCode_415UnsupportedMediaType         EHTTPStatusCode = 415
	EHTTPStatusCode_416RequestedRangeNotSatisfiable EHTTPStatusCode = 416
	EHTTPStatusCode_417ExpectationFailed            EHTTPStatusCode = 417
	EHTTPStatusCode_4xxUnknown                      EHTTPStatusCode = 418
	EHTTPStatusCode_429TooManyRequests              EHTTPStatusCode = 429
	EHTTPStatusCode_500InternalServerError          EHTTPStatusCode = 500
	EHTTPStatusCode_501NotImplemented               EHTTPStatusCode = 501
	EHTTPStatusCode_502BadGateway                   EHTTPStatusCode = 502
	EHTTPStatusCode_503ServiceUnavailable           EHTTPStatusCode = 503
	EHTTPStatusCode_504GatewayTimeout               EHTTPStatusCode = 504
	EHTTPStatusCode_505HTTPVersionNotSupported      EHTTPStatusCode = 505
	EHTTPStatusCode_5xxUnknown                      EHTTPStatusCode = 599
)

type ESteamControllerPad int32

const (
	ESteamControllerPad_Left  ESteamControllerPad = 0
	ESteamControllerPad_Right ESteamControllerPad = 1
)

type EControllerSource int32

const (
	EControllerSource_None           EControllerSource = 0
	EControllerSource_LeftTrackpad   EControllerSource = 1
	EControllerSource_RightTrackpad  EControllerSource = 2
	EControllerSource_Joystick       EControllerSource = 3
	EControllerSource_ABXY           EControllerSource = 4
	EControllerSource_Switch         EControllerSource = 5
	EControllerSource_LeftTrigger    EControllerSource = 6
	EControllerSource_RightTrigger   EControllerSource = 7
	EControllerSource_Gyro           EControllerSource = 8
	EControllerSource_CenterTrackpad EControllerSource = 9
	EControllerSource_RightJoystick  EControllerSource = 10
	EControllerSource_DPad           EControllerSource = 11
	EControllerSource_Key            EControllerSource = 12
	EControllerSource_Mouse          EControllerSource = 13
	EControllerSource_Count          EControllerSource = 14
)

type EControllerSourceMode int32

const (
	EControllerSourceMode_None           EControllerSourceMode = 0
	EControllerSourceMode_Dpad           EControllerSourceMode = 1
	EControllerSourceMode_Buttons        EControllerSourceMode = 2
	EControllerSourceMode_FourButtons    EControllerSourceMode = 3
	EControllerSourceMode_AbsoluteMouse  EControllerSourceMode = 4
	EControllerSourceMode_RelativeMouse  EControllerSourceMode = 5
	EControllerSourceMode_JoystickMove   EControllerSourceMode = 6
	EControllerSourceMode_JoystickMouse  EControllerSourceMode = 7
	EControllerSourceMode_JoystickCamera EControllerSourceMode = 8
	EControllerSourceMode_ScrollWheel    EControllerSourceMode = 9
	EControllerSourceMode_Trigger        EControllerSourceMode = 10
	EControllerSourceMode_TouchMenu      EControllerSourceMode = 11
	EControllerSourceMode_MouseJoystick  EControllerSourceMode = 12
	EControllerSourceMode_MouseRegion    EControllerSourceMode = 13
	EControllerSourceMode_RadialMenu     EControllerSourceMode = 14
	EControllerSourceMode_SingleButton   EControllerSourceMode = 15
	EControllerSourceMode_Switches       EControllerSourceMode = 16
)

type EControllerActionOrigin int32

const (
	EControllerActionOrigin_None                             EControllerActionOrigin = 0
	EControllerActionOrigin_A                                EControllerActionOrigin = 1
	EControllerActionOrigin_B                                EControllerActionOrigin = 2
	EControllerActionOrigin_X                                EControllerActionOrigin = 3
	EControllerActionOrigin_Y                                EControllerActionOrigin = 4
	EControllerActionOrigin_LeftBumper                       EControllerActionOrigin = 5
	EControllerActionOrigin_RightBumper                      EControllerActionOrigin = 6
	EControllerActionOrigin_LeftGrip                         EControllerActionOrigin = 7
	EControllerActionOrigin_RightGrip                        EControllerActionOrigin = 8
	EControllerActionOrigin_Start                            EControllerActionOrigin = 9
	EControllerActionOrigin_Back                             EControllerActionOrigin = 10
	EControllerActionOrigin_LeftPad_Touch                    EControllerActionOrigin = 11
	EControllerActionOrigin_LeftPad_Swipe                    EControllerActionOrigin = 12
	EControllerActionOrigin_LeftPad_Click                    EControllerActionOrigin = 13
	EControllerActionOrigin_LeftPad_DPadNorth                EControllerActionOrigin = 14
	EControllerActionOrigin_LeftPad_DPadSouth                EControllerActionOrigin = 15
	EControllerActionOrigin_LeftPad_DPadWest                 EControllerActionOrigin = 16
	EControllerActionOrigin_LeftPad_DPadEast                 EControllerActionOrigin = 17
	EControllerActionOrigin_RightPad_Touch                   EControllerActionOrigin = 18
	EControllerActionOrigin_RightPad_Swipe                   EControllerActionOrigin = 19
	EControllerActionOrigin_RightPad_Click                   EControllerActionOrigin = 20
	EControllerActionOrigin_RightPad_DPadNorth               EControllerActionOrigin = 21
	EControllerActionOrigin_RightPad_DPadSouth               EControllerActionOrigin = 22
	EControllerActionOrigin_RightPad_DPadWest                EControllerActionOrigin = 23
	EControllerActionOrigin_RightPad_DPadEast                EControllerActionOrigin = 24
	EControllerActionOrigin_LeftTrigger_Pull                 EControllerActionOrigin = 25
	EControllerActionOrigin_LeftTrigger_Click                EControllerActionOrigin = 26
	EControllerActionOrigin_RightTrigger_Pull                EControllerActionOrigin = 27
	EControllerActionOrigin_RightTrigger_Click               EControllerActionOrigin = 28
	EControllerActionOrigin_LeftStick_Move                   EControllerActionOrigin = 29
	EControllerActionOrigin_LeftStick_Click                  EControllerActionOrigin = 30
	EControllerActionOrigin_LeftStick_DPadNorth              EControllerActionOrigin = 31
	EControllerActionOrigin_LeftStick_DPadSouth              EControllerActionOrigin = 32
	EControllerActionOrigin_LeftStick_DPadWest               EControllerActionOrigin = 33
	EControllerActionOrigin_LeftStick_DPadEast               EControllerActionOrigin = 34
	EControllerActionOrigin_Gyro_Move                        EControllerActionOrigin = 35
	EControllerActionOrigin_Gyro_Pitch                       EControllerActionOrigin = 36
	EControllerActionOrigin_Gyro_Yaw                         EControllerActionOrigin = 37
	EControllerActionOrigin_Gyro_Roll                        EControllerActionOrigin = 38
	EControllerActionOrigin_PS4_X                            EControllerActionOrigin = 39
	EControllerActionOrigin_PS4_Circle                       EControllerActionOrigin = 40
	EControllerActionOrigin_PS4_Triangle                     EControllerActionOrigin = 41
	EControllerActionOrigin_PS4_Square                       EControllerActionOrigin = 42
	EControllerActionOrigin_PS4_LeftBumper                   EControllerActionOrigin = 43
	EControllerActionOrigin_PS4_RightBumper                  EControllerActionOrigin = 44
	EControllerActionOrigin_PS4_Options                      EControllerActionOrigin = 45
	EControllerActionOrigin_PS4_Share                        EControllerActionOrigin = 46
	EControllerActionOrigin_PS4_LeftPad_Touch                EControllerActionOrigin = 47
	EControllerActionOrigin_PS4_LeftPad_Swipe                EControllerActionOrigin = 48
	EControllerActionOrigin_PS4_LeftPad_Click                EControllerActionOrigin = 49
	EControllerActionOrigin_PS4_LeftPad_DPadNorth            EControllerActionOrigin = 50
	EControllerActionOrigin_PS4_LeftPad_DPadSouth            EControllerActionOrigin = 51
	EControllerActionOrigin_PS4_LeftPad_DPadWest             EControllerActionOrigin = 52
	EControllerActionOrigin_PS4_LeftPad_DPadEast             EControllerActionOrigin = 53
	EControllerActionOrigin_PS4_RightPad_Touch               EControllerActionOrigin = 54
	EControllerActionOrigin_PS4_RightPad_Swipe               EControllerActionOrigin = 55
	EControllerActionOrigin_PS4_RightPad_Click               EControllerActionOrigin = 56
	EControllerActionOrigin_PS4_RightPad_DPadNorth           EControllerActionOrigin = 57
	EControllerActionOrigin_PS4_RightPad_DPadSouth           EControllerActionOrigin = 58
	EControllerActionOrigin_PS4_RightPad_DPadWest            EControllerActionOrigin = 59
	EControllerActionOrigin_PS4_RightPad_DPadEast            EControllerActionOrigin = 60
	EControllerActionOrigin_PS4_CenterPad_Touch              EControllerActionOrigin = 61
	EControllerActionOrigin_PS4_CenterPad_Swipe              EControllerActionOrigin = 62
	EControllerActionOrigin_PS4_CenterPad_Click              EControllerActionOrigin = 63
	EControllerActionOrigin_PS4_CenterPad_DPadNorth          EControllerActionOrigin = 64
	EControllerActionOrigin_PS4_CenterPad_DPadSouth          EControllerActionOrigin = 65
	EControllerActionOrigin_PS4_CenterPad_DPadWest           EControllerActionOrigin = 66
	EControllerActionOrigin_PS4_CenterPad_DPadEast           EControllerActionOrigin = 67
	EControllerActionOrigin_PS4_LeftTrigger_Pull             EControllerActionOrigin = 68
	EControllerActionOrigin_PS4_LeftTrigger_Click            EControllerActionOrigin = 69
	EControllerActionOrigin_PS4_RightTrigger_Pull            EControllerActionOrigin = 70
	EControllerActionOrigin_PS4_RightTrigger_Click           EControllerActionOrigin = 71
	EControllerActionOrigin_PS4_LeftStick_Move               EControllerActionOrigin = 72
	EControllerActionOrigin_PS4_LeftStick_Click              EControllerActionOrigin = 73
	EControllerActionOrigin_PS4_LeftStick_DPadNorth          EControllerActionOrigin = 74
	EControllerActionOrigin_PS4_LeftStick_DPadSouth          EControllerActionOrigin = 75
	EControllerActionOrigin_PS4_LeftStick_DPadWest           EControllerActionOrigin = 76
	EControllerActionOrigin_PS4_LeftStick_DPadEast           EControllerActionOrigin = 77
	EControllerActionOrigin_PS4_RightStick_Move              EControllerActionOrigin = 78
	EControllerActionOrigin_PS4_RightStick_Click             EControllerActionOrigin = 79
	EControllerActionOrigin_PS4_RightStick_DPadNorth         EControllerActionOrigin = 80
	EControllerActionOrigin_PS4_RightStick_DPadSouth         EControllerActionOrigin = 81
	EControllerActionOrigin_PS4_RightStick_DPadWest          EControllerActionOrigin = 82
	EControllerActionOrigin_PS4_RightStick_DPadEast          EControllerActionOrigin = 83
	EControllerActionOrigin_PS4_DPad_North                   EControllerActionOrigin = 84
	EControllerActionOrigin_PS4_DPad_South                   EControllerActionOrigin = 85
	EControllerActionOrigin_PS4_DPad_West                    EControllerActionOrigin = 86
	EControllerActionOrigin_PS4_DPad_East                    EControllerActionOrigin = 87
	EControllerActionOrigin_PS4_Gyro_Move                    EControllerActionOrigin = 88
	EControllerActionOrigin_PS4_Gyro_Pitch                   EControllerActionOrigin = 89
	EControllerActionOrigin_PS4_Gyro_Yaw                     EControllerActionOrigin = 90
	EControllerActionOrigin_PS4_Gyro_Roll                    EControllerActionOrigin = 91
	EControllerActionOrigin_XBoxOne_A                        EControllerActionOrigin = 92
	EControllerActionOrigin_XBoxOne_B                        EControllerActionOrigin = 93
	EControllerActionOrigin_XBoxOne_X                        EControllerActionOrigin = 94
	EControllerActionOrigin_XBoxOne_Y                        EControllerActionOrigin = 95
	EControllerActionOrigin_XBoxOne_LeftBumper               EControllerActionOrigin = 96
	EControllerActionOrigin_XBoxOne_RightBumper              EControllerActionOrigin = 97
	EControllerActionOrigin_XBoxOne_Menu                     EControllerActionOrigin = 98
	EControllerActionOrigin_XBoxOne_View                     EControllerActionOrigin = 99
	EControllerActionOrigin_XBoxOne_LeftTrigger_Pull         EControllerActionOrigin = 100
	EControllerActionOrigin_XBoxOne_LeftTrigger_Click        EControllerActionOrigin = 101
	EControllerActionOrigin_XBoxOne_RightTrigger_Pull        EControllerActionOrigin = 102
	EControllerActionOrigin_XBoxOne_RightTrigger_Click       EControllerActionOrigin = 103
	EControllerActionOrigin_XBoxOne_LeftStick_Move           EControllerActionOrigin = 104
	EControllerActionOrigin_XBoxOne_LeftStick_Click          EControllerActionOrigin = 105
	EControllerActionOrigin_XBoxOne_LeftStick_DPadNorth      EControllerActionOrigin = 106
	EControllerActionOrigin_XBoxOne_LeftStick_DPadSouth      EControllerActionOrigin = 107
	EControllerActionOrigin_XBoxOne_LeftStick_DPadWest       EControllerActionOrigin = 108
	EControllerActionOrigin_XBoxOne_LeftStick_DPadEast       EControllerActionOrigin = 109
	EControllerActionOrigin_XBoxOne_RightStick_Move          EControllerActionOrigin = 110
	EControllerActionOrigin_XBoxOne_RightStick_Click         EControllerActionOrigin = 111
	EControllerActionOrigin_XBoxOne_RightStick_DPadNorth     EControllerActionOrigin = 112
	EControllerActionOrigin_XBoxOne_RightStick_DPadSouth     EControllerActionOrigin = 113
	EControllerActionOrigin_XBoxOne_RightStick_DPadWest      EControllerActionOrigin = 114
	EControllerActionOrigin_XBoxOne_RightStick_DPadEast      EControllerActionOrigin = 115
	EControllerActionOrigin_XBoxOne_DPad_North               EControllerActionOrigin = 116
	EControllerActionOrigin_XBoxOne_DPad_South               EControllerActionOrigin = 117
	EControllerActionOrigin_XBoxOne_DPad_West                EControllerActionOrigin = 118
	EControllerActionOrigin_XBoxOne_DPad_East                EControllerActionOrigin = 119
	EControllerActionOrigin_XBox360_A                        EControllerActionOrigin = 120
	EControllerActionOrigin_XBox360_B                        EControllerActionOrigin = 121
	EControllerActionOrigin_XBox360_X                        EControllerActionOrigin = 122
	EControllerActionOrigin_XBox360_Y                        EControllerActionOrigin = 123
	EControllerActionOrigin_XBox360_LeftBumper               EControllerActionOrigin = 124
	EControllerActionOrigin_XBox360_RightBumper              EControllerActionOrigin = 125
	EControllerActionOrigin_XBox360_Start                    EControllerActionOrigin = 126
	EControllerActionOrigin_XBox360_Back                     EControllerActionOrigin = 127
	EControllerActionOrigin_XBox360_LeftTrigger_Pull         EControllerActionOrigin = 128
	EControllerActionOrigin_XBox360_LeftTrigger_Click        EControllerActionOrigin = 129
	EControllerActionOrigin_XBox360_RightTrigger_Pull        EControllerActionOrigin = 130
	EControllerActionOrigin_XBox360_RightTrigger_Click       EControllerActionOrigin = 131
	EControllerActionOrigin_XBox360_LeftStick_Move           EControllerActionOrigin = 132
	EControllerActionOrigin_XBox360_LeftStick_Click          EControllerActionOrigin = 133
	EControllerActionOrigin_XBox360_LeftStick_DPadNorth      EControllerActionOrigin = 134
	EControllerActionOrigin_XBox360_LeftStick_DPadSouth      EControllerActionOrigin = 135
	EControllerActionOrigin_XBox360_LeftStick_DPadWest       EControllerActionOrigin = 136
	EControllerActionOrigin_XBox360_LeftStick_DPadEast       EControllerActionOrigin = 137
	EControllerActionOrigin_XBox360_RightStick_Move          EControllerActionOrigin = 138
	EControllerActionOrigin_XBox360_RightStick_Click         EControllerActionOrigin = 139
	EControllerActionOrigin_XBox360_RightStick_DPadNorth     EControllerActionOrigin = 140
	EControllerActionOrigin_XBox360_RightStick_DPadSouth     EControllerActionOrigin = 141
	EControllerActionOrigin_XBox360_RightStick_DPadWest      EControllerActionOrigin = 142
	EControllerActionOrigin_XBox360_RightStick_DPadEast      EControllerActionOrigin = 143
	EControllerActionOrigin_XBox360_DPad_North               EControllerActionOrigin = 144
	EControllerActionOrigin_XBox360_DPad_South               EControllerActionOrigin = 145
	EControllerActionOrigin_XBox360_DPad_West                EControllerActionOrigin = 146
	EControllerActionOrigin_XBox360_DPad_East                EControllerActionOrigin = 147
	EControllerActionOrigin_SteamV2_A                        EControllerActionOrigin = 148
	EControllerActionOrigin_SteamV2_B                        EControllerActionOrigin = 149
	EControllerActionOrigin_SteamV2_X                        EControllerActionOrigin = 150
	EControllerActionOrigin_SteamV2_Y                        EControllerActionOrigin = 151
	EControllerActionOrigin_SteamV2_LeftBumper               EControllerActionOrigin = 152
	EControllerActionOrigin_SteamV2_RightBumper              EControllerActionOrigin = 153
	EControllerActionOrigin_SteamV2_LeftGrip                 EControllerActionOrigin = 154
	EControllerActionOrigin_SteamV2_RightGrip                EControllerActionOrigin = 155
	EControllerActionOrigin_SteamV2_LeftGrip_Upper           EControllerActionOrigin = 156
	EControllerActionOrigin_SteamV2_RightGrip_Upper          EControllerActionOrigin = 157
	EControllerActionOrigin_SteamV2_LeftBumper_Pressure      EControllerActionOrigin = 158
	EControllerActionOrigin_SteamV2_RightBumper_Pressure     EControllerActionOrigin = 159
	EControllerActionOrigin_SteamV2_LeftGrip_Pressure        EControllerActionOrigin = 160
	EControllerActionOrigin_SteamV2_RightGrip_Pressure       EControllerActionOrigin = 161
	EControllerActionOrigin_SteamV2_LeftGrip_Upper_Pressure  EControllerActionOrigin = 162
	EControllerActionOrigin_SteamV2_RightGrip_Upper_Pressure EControllerActionOrigin = 163
	EControllerActionOrigin_SteamV2_Start                    EControllerActionOrigin = 164
	EControllerActionOrigin_SteamV2_Back                     EControllerActionOrigin = 165
	EControllerActionOrigin_SteamV2_LeftPad_Touch            EControllerActionOrigin = 166
	EControllerActionOrigin_SteamV2_LeftPad_Swipe            EControllerActionOrigin = 167
	EControllerActionOrigin_SteamV2_LeftPad_Click            EControllerActionOrigin = 168
	EControllerActionOrigin_SteamV2_LeftPad_Pressure         EControllerActionOrigin = 169
	EControllerActionOrigin_SteamV2_LeftPad_DPadNorth        EControllerActionOrigin = 170
	EControllerActionOrigin_SteamV2_LeftPad_DPadSouth        EControllerActionOrigin = 171
	EControllerActionOrigin_SteamV2_LeftPad_DPadWest         EControllerActionOrigin = 172
	EControllerActionOrigin_SteamV2_LeftPad_DPadEast         EControllerActionOrigin = 173
	EControllerActionOrigin_SteamV2_RightPad_Touch           EControllerActionOrigin = 174
	EControllerActionOrigin_SteamV2_RightPad_Swipe           EControllerActionOrigin = 175
	EControllerActionOrigin_SteamV2_RightPad_Click           EControllerActionOrigin = 176
	EControllerActionOrigin_SteamV2_RightPad_Pressure        EControllerActionOrigin = 177
	EControllerActionOrigin_SteamV2_RightPad_DPadNorth       EControllerActionOrigin = 178
	EControllerActionOrigin_SteamV2_RightPad_DPadSouth       EControllerActionOrigin = 179
	EControllerActionOrigin_SteamV2_RightPad_DPadWest        EControllerActionOrigin = 180
	EControllerActionOrigin_SteamV2_RightPad_DPadEast        EControllerActionOrigin = 181
	EControllerActionOrigin_SteamV2_LeftTrigger_Pull         EControllerActionOrigin = 182
	EControllerActionOrigin_SteamV2_LeftTrigger_Click        EControllerActionOrigin = 183
	EControllerActionOrigin_SteamV2_RightTrigger_Pull        EControllerActionOrigin = 184
	EControllerActionOrigin_SteamV2_RightTrigger_Click       EControllerActionOrigin = 185
	EControllerActionOrigin_SteamV2_LeftStick_Move           EControllerActionOrigin = 186
	EControllerActionOrigin_SteamV2_LeftStick_Click          EControllerActionOrigin = 187
	EControllerActionOrigin_SteamV2_LeftStick_DPadNorth      EControllerActionOrigin = 188
	EControllerActionOrigin_SteamV2_LeftStick_DPadSouth      EControllerActionOrigin = 189
	EControllerActionOrigin_SteamV2_LeftStick_DPadWest       EControllerActionOrigin = 190
	EControllerActionOrigin_SteamV2_LeftStick_DPadEast       EControllerActionOrigin = 191
	EControllerActionOrigin_SteamV2_Gyro_Move                EControllerActionOrigin = 192
	EControllerActionOrigin_SteamV2_Gyro_Pitch               EControllerActionOrigin = 193
	EControllerActionOrigin_SteamV2_Gyro_Yaw                 EControllerActionOrigin = 194
	EControllerActionOrigin_SteamV2_Gyro_Roll                EControllerActionOrigin = 195
	EControllerActionOrigin_Count                            EControllerActionOrigin = 196
)

type ESteamControllerLEDFlag int32

const (
	ESteamControllerLEDFlag_SetColor           ESteamControllerLEDFlag = 0
	ESteamControllerLEDFlag_RestoreUserDefault ESteamControllerLEDFlag = 1
)

type ESteamInputType int32

const (
	ESteamInputType_Unknown           ESteamInputType = 0
	ESteamInputType_SteamController   ESteamInputType = 1
	ESteamInputType_XBox360Controller ESteamInputType = 2
	ESteamInputType_XBoxOneController ESteamInputType = 3
	ESteamInputType_GenericXInput     ESteamInputType = 4
	ESteamInputType_PS4Controller     ESteamInputType = 5
)

type EUGCMatchingUGCType int32

const (
	EUGCMatchingUGCType_Items              EUGCMatchingUGCType = 0
	EUGCMatchingUGCType_Items_Mtx          EUGCMatchingUGCType = 1
	EUGCMatchingUGCType_Items_ReadyToUse   EUGCMatchingUGCType = 2
	EUGCMatchingUGCType_Collections        EUGCMatchingUGCType = 3
	EUGCMatchingUGCType_Artwork            EUGCMatchingUGCType = 4
	EUGCMatchingUGCType_Videos             EUGCMatchingUGCType = 5
	EUGCMatchingUGCType_Screenshots        EUGCMatchingUGCType = 6
	EUGCMatchingUGCType_AllGuides          EUGCMatchingUGCType = 7
	EUGCMatchingUGCType_WebGuides          EUGCMatchingUGCType = 8
	EUGCMatchingUGCType_IntegratedGuides   EUGCMatchingUGCType = 9
	EUGCMatchingUGCType_UsableInGame       EUGCMatchingUGCType = 10
	EUGCMatchingUGCType_ControllerBindings EUGCMatchingUGCType = 11
	EUGCMatchingUGCType_GameManagedItems   EUGCMatchingUGCType = 12
	EUGCMatchingUGCType_All                EUGCMatchingUGCType = -1
)

type EUserUGCList int32

const (
	EUserUGCList_Published     EUserUGCList = 0
	EUserUGCList_VotedOn       EUserUGCList = 1
	EUserUGCList_VotedUp       EUserUGCList = 2
	EUserUGCList_VotedDown     EUserUGCList = 3
	EUserUGCList_WillVoteLater EUserUGCList = 4
	EUserUGCList_Favorited     EUserUGCList = 5
	EUserUGCList_Subscribed    EUserUGCList = 6
	EUserUGCList_UsedOrPlayed  EUserUGCList = 7
	EUserUGCList_Followed      EUserUGCList = 8
)

type EUserUGCListSortOrder int32

const (
	EUserUGCListSortOrder_CreationOrderDesc    EUserUGCListSortOrder = 0
	EUserUGCListSortOrder_CreationOrderAsc     EUserUGCListSortOrder = 1
	EUserUGCListSortOrder_TitleAsc             EUserUGCListSortOrder = 2
	EUserUGCListSortOrder_LastUpdatedDesc      EUserUGCListSortOrder = 3
	EUserUGCListSortOrder_SubscriptionDateDesc EUserUGCListSortOrder = 4
	EUserUGCListSortOrder_VoteScoreDesc        EUserUGCListSortOrder = 5
	EUserUGCListSortOrder_ForModeration        EUserUGCListSortOrder = 6
)

type EUGCQuery int32

const (
	EUGCQuery_RankedByVote                                  EUGCQuery = 0
	EUGCQuery_RankedByPublicationDate                       EUGCQuery = 1
	EUGCQuery_AcceptedForGameRankedByAcceptanceDate         EUGCQuery = 2
	EUGCQuery_RankedByTrend                                 EUGCQuery = 3
	EUGCQuery_FavoritedByFriendsRankedByPublicationDate     EUGCQuery = 4
	EUGCQuery_CreatedByFriendsRankedByPublicationDate       EUGCQuery = 5
	EUGCQuery_RankedByNumTimesReported                      EUGCQuery = 6
	EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate EUGCQuery = 7
	EUGCQuery_NotYetRated                                   EUGCQuery = 8
	EUGCQuery_RankedByTotalVotesAsc                         EUGCQuery = 9
	EUGCQuery_RankedByVotesUp                               EUGCQuery = 10
	EUGCQuery_RankedByTextSearch                            EUGCQuery = 11
	EUGCQuery_RankedByTotalUniqueSubscriptions              EUGCQuery = 12
	EUGCQuery_RankedByPlaytimeTrend                         EUGCQuery = 13
	EUGCQuery_RankedByTotalPlaytime                         EUGCQuery = 14
	EUGCQuery_RankedByAveragePlaytimeTrend                  EUGCQuery = 15
	EUGCQuery_RankedByLifetimeAveragePlaytime               EUGCQuery = 16
	EUGCQuery_RankedByPlaytimeSessionsTrend                 EUGCQuery = 17
	EUGCQuery_RankedByLifetimePlaytimeSessions              EUGCQuery = 18
)

type EItemUpdateStatus int32

const (
	EItemUpdateStatus_Invalid              EItemUpdateStatus = 0
	EItemUpdateStatus_PreparingConfig      EItemUpdateStatus = 1
	EItemUpdateStatus_PreparingContent     EItemUpdateStatus = 2
	EItemUpdateStatus_UploadingContent     EItemUpdateStatus = 3
	EItemUpdateStatus_UploadingPreviewFile EItemUpdateStatus = 4
	EItemUpdateStatus_CommittingChanges    EItemUpdateStatus = 5
)

type EItemState int32

const (
	EItemState_None            EItemState = 0
	EItemState_Subscribed      EItemState = 1
	EItemState_LegacyItem      EItemState = 2
	EItemState_Installed       EItemState = 4
	EItemState_NeedsUpdate     EItemState = 8
	EItemState_Downloading     EItemState = 16
	EItemState_DownloadPending EItemState = 32
)

type EItemStatistic int32

const (
	EItemStatistic_NumSubscriptions                    EItemStatistic = 0
	EItemStatistic_NumFavorites                        EItemStatistic = 1
	EItemStatistic_NumFollowers                        EItemStatistic = 2
	EItemStatistic_NumUniqueSubscriptions              EItemStatistic = 3
	EItemStatistic_NumUniqueFavorites                  EItemStatistic = 4
	EItemStatistic_NumUniqueFollowers                  EItemStatistic = 5
	EItemStatistic_NumUniqueWebsiteViews               EItemStatistic = 6
	EItemStatistic_ReportScore                         EItemStatistic = 7
	EItemStatistic_NumSecondsPlayed                    EItemStatistic = 8
	EItemStatistic_NumPlaytimeSessions                 EItemStatistic = 9
	EItemStatistic_NumComments                         EItemStatistic = 10
	EItemStatistic_NumSecondsPlayedDuringTimePeriod    EItemStatistic = 11
	EItemStatistic_NumPlaytimeSessionsDuringTimePeriod EItemStatistic = 12
)

type EItemPreviewType int32

const (
	EItemPreviewType_Image                          EItemPreviewType = 0
	EItemPreviewType_YouTubeVideo                   EItemPreviewType = 1
	EItemPreviewType_Sketchfab                      EItemPreviewType = 2
	EItemPreviewType_EnvironmentMap_HorizontalCross EItemPreviewType = 3
	EItemPreviewType_EnvironmentMap_LatLong         EItemPreviewType = 4
	EItemPreviewType_ReservedMax                    EItemPreviewType = 255
)

type EHTMLMouseButton int32

const (
	EHTMLMouseButton_Left   EHTMLMouseButton = 0
	EHTMLMouseButton_Right  EHTMLMouseButton = 1
	EHTMLMouseButton_Middle EHTMLMouseButton = 2
)

type EMouseCursor int32

const (
	EMouseCursor_user           EMouseCursor = 0
	EMouseCursor_none           EMouseCursor = 1
	EMouseCursor_arrow          EMouseCursor = 2
	EMouseCursor_ibeam          EMouseCursor = 3
	EMouseCursor_hourglass      EMouseCursor = 4
	EMouseCursor_waitarrow      EMouseCursor = 5
	EMouseCursor_crosshair      EMouseCursor = 6
	EMouseCursor_up             EMouseCursor = 7
	EMouseCursor_sizenw         EMouseCursor = 8
	EMouseCursor_sizese         EMouseCursor = 9
	EMouseCursor_sizene         EMouseCursor = 10
	EMouseCursor_sizesw         EMouseCursor = 11
	EMouseCursor_sizew          EMouseCursor = 12
	EMouseCursor_sizee          EMouseCursor = 13
	EMouseCursor_sizen          EMouseCursor = 14
	EMouseCursor_sizes          EMouseCursor = 15
	EMouseCursor_sizewe         EMouseCursor = 16
	EMouseCursor_sizens         EMouseCursor = 17
	EMouseCursor_sizeall        EMouseCursor = 18
	EMouseCursor_no             EMouseCursor = 19
	EMouseCursor_hand           EMouseCursor = 20
	EMouseCursor_blank          EMouseCursor = 21
	EMouseCursor_middle_pan     EMouseCursor = 22
	EMouseCursor_north_pan      EMouseCursor = 23
	EMouseCursor_north_east_pan EMouseCursor = 24
	EMouseCursor_ast_pan        EMouseCursor = 25
	EMouseCursor_south_east_pan EMouseCursor = 26
	EMouseCursor_south_pan      EMouseCursor = 27
	EMouseCursor_south_west_pan EMouseCursor = 28
	EMouseCursor_west_pan       EMouseCursor = 29
	EMouseCursor_north_west_pan EMouseCursor = 30
	EMouseCursor_alias          EMouseCursor = 31
	EMouseCursor_cell           EMouseCursor = 32
	EMouseCursor_colresize      EMouseCursor = 33
	EMouseCursor_copycur        EMouseCursor = 34
	EMouseCursor_verticaltext   EMouseCursor = 35
	EMouseCursor_rowresize      EMouseCursor = 36
	EMouseCursor_zoomin         EMouseCursor = 37
	EMouseCursor_zoomout        EMouseCursor = 38
	EMouseCursor_help           EMouseCursor = 39
	EMouseCursor_custom         EMouseCursor = 40
	EMouseCursor_last           EMouseCursor = 41
)

type EHTMLKeyModifiers int32

const (
	EHTMLKeyModifiers_HTMLKeyModifier_None      EHTMLKeyModifiers = 0
	EHTMLKeyModifiers_HTMLKeyModifier_AltDown   EHTMLKeyModifiers = 1
	EHTMLKeyModifiers_HTMLKeyModifier_CtrlDown  EHTMLKeyModifiers = 2
	EHTMLKeyModifiers_HTMLKeyModifier_ShiftDown EHTMLKeyModifiers = 4
)

type ESteamItemFlags int32

const (
	ESteamItemFlags_ESteamItemNoTrade  ESteamItemFlags = 1
	ESteamItemFlags_ESteamItemRemoved  ESteamItemFlags = 256
	ESteamItemFlags_ESteamItemConsumed ESteamItemFlags = 512
)

type EParentalFeature int32

const (
	EParentalFeature_EFeatureInvalid       EParentalFeature = 0
	EParentalFeature_EFeatureStore         EParentalFeature = 1
	EParentalFeature_EFeatureCommunity     EParentalFeature = 2
	EParentalFeature_EFeatureProfile       EParentalFeature = 3
	EParentalFeature_EFeatureFriends       EParentalFeature = 4
	EParentalFeature_EFeatureNews          EParentalFeature = 5
	EParentalFeature_EFeatureTrading       EParentalFeature = 6
	EParentalFeature_EFeatureSettings      EParentalFeature = 7
	EParentalFeature_EFeatureConsole       EParentalFeature = 8
	EParentalFeature_EFeatureBrowser       EParentalFeature = 9
	EParentalFeature_EFeatureParentalSetup EParentalFeature = 10
	EParentalFeature_EFeatureLibrary       EParentalFeature = 11
	EParentalFeature_EFeatureTest          EParentalFeature = 12
	EParentalFeature_EFeatureMax           EParentalFeature = 13
)

const (
	SteamUserCallbacks                                       = 100
	SteamGameServerCallbacks                                 = 200
	SteamFriendsCallbacks                                    = 300
	SteamBillingCallbacks                                    = 400
	SteamMatchmakingCallbacks                                = 500
	SteamContentServerCallbacks                              = 600
	SteamUtilsCallbacks                                      = 700
	ClientFriendsCallbacks                                   = 800
	ClientUserCallbacks                                      = 900
	SteamAppsCallbacks                                       = 1000
	SteamUserStatsCallbacks                                  = 1100
	SteamNetworkingCallbacks                                 = 1200
	ClientRemoteStorageCallbacks                             = 1300
	ClientDepotBuilderCallbacks                              = 1400
	SteamGameServerItemsCallbacks                            = 1500
	ClientUtilsCallbacks                                     = 1600
	SteamGameCoordinatorCallbacks                            = 1700
	SteamGameServerStatsCallbacks                            = 1800
	Steam2AsyncCallbacks                                     = 1900
	SteamGameStatsCallbacks                                  = 2000
	ClientHTTPCallbacks                                      = 2100
	ClientScreenshotsCallbacks                               = 2200
	SteamScreenshotsCallbacks                                = 2300
	ClientAudioCallbacks                                     = 2400
	ClientUnifiedMessagesCallbacks                           = 2500
	SteamStreamLauncherCallbacks                             = 2600
	ClientControllerCallbacks                                = 2700
	SteamControllerCallbacks                                 = 2800
	ClientParentalSettingsCallbacks                          = 2900
	ClientDeviceAuthCallbacks                                = 3000
	ClientNetworkDeviceManagerCallbacks                      = 3100
	ClientMusicCallbacks                                     = 3200
	ClientRemoteClientManagerCallbacks                       = 3300
	ClientUGCCallbacks                                       = 3400
	SteamStreamClientCallbacks                               = 3500
	IClientProductBuilderCallbacks                           = 3600
	ClientShortcutsCallbacks                                 = 3700
	ClientRemoteControlManagerCallbacks                      = 3800
	SteamAppListCallbacks                                    = 3900
	SteamMusicCallbacks                                      = 4000
	SteamMusicRemoteCallbacks                                = 4100
	ClientVRCallbacks                                        = 4200
	ClientGameNotificationCallbacks                          = 4300
	SteamGameNotificationCallbacks                           = 4400
	SteamHTMLSurfaceCallbacks                                = 4500
	ClientVideoCallbacks                                     = 4600
	ClientInventoryCallbacks                                 = 4700
	ClientBluetoothManagerCallbacks                          = 4800
	ClientSharedConnectionCallbacks                          = 4900
	ISteamParentalSettingsCallbacks                          = 5000
	ClientShaderCallbacks                                    = 5100
	PersonaNameMaxBytes                                      = 128
	PersonaNameMaxRunes                                      = 32
	MaxRichPresenceKeys                                      = 20
	MaxRichPresenceKeyLength                                 = 64
	MaxRichPresenceValueLength                               = 256
	StatNameMax                                              = 128
	LeaderboardNameMax                                       = 128
	LeaderboardDetailsMax                                    = 64
	SteamItemInstanceIDInvalid          SteamItemInstanceID  = 18446744073709551615
	SteamInventoryResultInvalid         SteamInventoryResult = -1
)

func unsafeCString(s string) *C.char { return *(**C.char)(unsafe.Pointer(&s)) }
func unsafeCBytes(b []byte) *C.char  { return (*C.char)(unsafe.Pointer(&b[0])) }
func SteamAPI_Init() bool            { return bool(C.SteamAPI_Init()) }
func SteamAPI_Shutdown()             { C.SteamAPI_Shutdown() }
func SteamAPI_RestartAppIfNecessary(unOwnAppID uint32) bool {
	return bool(C.SteamAPI_RestartAppIfNecessary(C.uint32(unOwnAppID)))
}
func SteamAPI_ReleaseCurrentThreadMemory() { C.SteamAPI_ReleaseCurrentThreadMemory() }
func SteamAPI_RunCallbacks()               { C.SteamAPI_RunCallbacks() }
func getSteamClient() C.intp               { return C.GetSteamClient() }
func getSteamUser() C.intp                 { return C.GetSteamUser() }
func getSteamGameServer() C.intp           { return C.GetSteamGameServer() }
func getSteamFriends() C.intp              { return C.GetSteamFriends() }
func getSteamUtils() C.intp                { return C.GetSteamUtils() }
func getSteamMatchmaking() C.intp          { return C.GetSteamMatchmaking() }
func getSteamMatchmakingServers() C.intp   { return C.GetSteamMatchmakingServers() }
func getSteamUserStats() C.intp            { return C.GetSteamUserStats() }
func getSteamGameServerStats() C.intp      { return C.GetSteamGameServerStats() }
func getSteamApps() C.intp                 { return C.GetSteamApps() }
func getSteamNetworking() C.intp           { return C.GetSteamNetworking() }
func getSteamRemoteStorage() C.intp        { return C.GetSteamRemoteStorage() }
func getSteamScreenshots() C.intp          { return C.GetSteamScreenshots() }
func getSteamHTTP() C.intp                 { return C.GetSteamHTTP() }
func getSteamController() C.intp           { return C.GetSteamController() }
func getSteamUGC() C.intp                  { return C.GetSteamUGC() }
func getSteamAppList() C.intp              { return C.GetSteamAppList() }
func getSteamMusic() C.intp                { return C.GetSteamMusic() }
func getSteamMusicRemote() C.intp          { return C.GetSteamMusicRemote() }
func getSteamHTMLSurface() C.intp          { return C.GetSteamHTMLSurface() }
func getSteamInventory() C.intp            { return C.GetSteamInventory() }
func getSteamVideo() C.intp                { return C.GetSteamVideo() }
func getSteamParentalSettings() C.intp     { return C.GetSteamParentalSettings() }
func SteamAPI_ISteamClient_CreateSteamPipe() HSteamPipe {
	return C.SteamAPI_ISteamClient_CreateSteamPipe(getSteamClient())
}
func SteamAPI_ISteamClient_BReleaseSteamPipe(hSteamPipe HSteamPipe) bool {
	return bool(C.SteamAPI_ISteamClient_BReleaseSteamPipe(getSteamClient(), hSteamPipe))
}
func SteamAPI_ISteamClient_ConnectToGlobalUser(hSteamPipe HSteamPipe) HSteamUser {
	return C.SteamAPI_ISteamClient_ConnectToGlobalUser(getSteamClient(), hSteamPipe)
}
func SteamAPI_ISteamClient_CreateLocalUser(phSteamPipe *HSteamPipe, eAccountType EAccountType) HSteamUser {
	return C.SteamAPI_ISteamClient_CreateLocalUser(getSteamClient(), phSteamPipe, C.EAccountType(eAccountType))
}
func SteamAPI_ISteamClient_ReleaseUser(hSteamPipe HSteamPipe, hUser HSteamUser) {
	C.SteamAPI_ISteamClient_ReleaseUser(getSteamClient(), hSteamPipe, hUser)
}
func SteamAPI_ISteamClient_SetLocalIPBinding(unIP uint32, usPort uint16) {
	C.SteamAPI_ISteamClient_SetLocalIPBinding(getSteamClient(), C.uint32(unIP), C.uint16(usPort))
}
func SteamAPI_ISteamClient_GetISteamGenericInterface(hSteamUser HSteamUser, hSteamPipe HSteamPipe, pchVersion string) unsafe.Pointer {
	return C.SteamAPI_ISteamClient_GetISteamGenericInterface(getSteamClient(), hSteamUser, hSteamPipe, unsafeCString(pchVersion))
}
func SteamAPI_ISteamClient_GetIPCCallCount() uint32 {
	return uint32(C.SteamAPI_ISteamClient_GetIPCCallCount(getSteamClient()))
}
func SteamAPI_ISteamClient_BShutdownIfAllPipesClosed() bool {
	return bool(C.SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(getSteamClient()))
}
func SteamAPI_ISteamUser_GetHSteamUser() HSteamUser {
	return C.SteamAPI_ISteamUser_GetHSteamUser(getSteamUser())
}
func SteamAPI_ISteamUser_BLoggedOn() bool {
	return bool(C.SteamAPI_ISteamUser_BLoggedOn(getSteamUser()))
}
func SteamAPI_ISteamUser_GetSteamID() SteamID {
	return SteamID(C.SteamAPI_ISteamUser_GetSteamID(getSteamUser()))
}
func SteamAPI_ISteamUser_InitiateGameConnection(pAuthBlob unsafe.Pointer, cbMaxAuthBlob int32, steamIDGameServer SteamID, unIPServer uint32, usPortServer uint16, bSecure bool) int32 {
	return int32(C.SteamAPI_ISteamUser_InitiateGameConnection(getSteamUser(), pAuthBlob, C.int32(cbMaxAuthBlob), C.CSteamID(steamIDGameServer), C.uint32(unIPServer), C.uint16(usPortServer), C.bool(bSecure)))
}
func SteamAPI_ISteamUser_TerminateGameConnection(unIPServer uint32, usPortServer uint16) {
	C.SteamAPI_ISteamUser_TerminateGameConnection(getSteamUser(), C.uint32(unIPServer), C.uint16(usPortServer))
}
func SteamAPI_ISteamUser_TrackAppUsageEvent(gameID GameID, eAppUsageEvent int32, pchExtraInfo string) {
	C.SteamAPI_ISteamUser_TrackAppUsageEvent(getSteamUser(), C.CGameID(gameID), C.int32(eAppUsageEvent), unsafeCString(pchExtraInfo))
}
func SteamAPI_ISteamUser_GetUserDataFolder(pchBuffer []byte, cubBuffer int32) bool {
	return bool(C.SteamAPI_ISteamUser_GetUserDataFolder(getSteamUser(), unsafeCBytes(pchBuffer), C.int32(cubBuffer)))
}
func SteamAPI_ISteamUser_StartVoiceRecording() {
	C.SteamAPI_ISteamUser_StartVoiceRecording(getSteamUser())
}
func SteamAPI_ISteamUser_StopVoiceRecording() {
	C.SteamAPI_ISteamUser_StopVoiceRecording(getSteamUser())
}
func SteamAPI_ISteamUser_GetAvailableVoice(pcbCompressed *uint32, pcbUncompressed_Deprecated *uint32, nUncompressedVoiceDesiredSampleRate_Deprecated uint32) EVoiceResult {
	return EVoiceResult(C.SteamAPI_ISteamUser_GetAvailableVoice(getSteamUser(), (*C.uint32)(pcbCompressed), (*C.uint32)(pcbUncompressed_Deprecated), C.uint32(nUncompressedVoiceDesiredSampleRate_Deprecated)))
}
func SteamAPI_ISteamUser_GetVoice(bWantCompressed bool, pDestBuffer unsafe.Pointer, cbDestBufferSize uint32, nBytesWritten *uint32, bWantUncompressed_Deprecated bool, pUncompressedDestBuffer_Deprecated unsafe.Pointer, cbUncompressedDestBufferSize_Deprecated uint32, nUncompressBytesWritten_Deprecated *uint32, nUncompressedVoiceDesiredSampleRate_Deprecated uint32) EVoiceResult {
	return EVoiceResult(C.SteamAPI_ISteamUser_GetVoice(getSteamUser(), C.bool(bWantCompressed), pDestBuffer, C.uint32(cbDestBufferSize), (*C.uint32)(nBytesWritten), C.bool(bWantUncompressed_Deprecated), pUncompressedDestBuffer_Deprecated, C.uint32(cbUncompressedDestBufferSize_Deprecated), (*C.uint32)(nUncompressBytesWritten_Deprecated), C.uint32(nUncompressedVoiceDesiredSampleRate_Deprecated)))
}
func SteamAPI_ISteamUser_DecompressVoice(pCompressed unsafe.Pointer, cbCompressed uint32, pDestBuffer unsafe.Pointer, cbDestBufferSize uint32, nBytesWritten *uint32, nDesiredSampleRate uint32) EVoiceResult {
	return EVoiceResult(C.SteamAPI_ISteamUser_DecompressVoice(getSteamUser(), pCompressed, C.uint32(cbCompressed), pDestBuffer, C.uint32(cbDestBufferSize), (*C.uint32)(nBytesWritten), C.uint32(nDesiredSampleRate)))
}
func SteamAPI_ISteamUser_GetVoiceOptimalSampleRate() uint32 {
	return uint32(C.SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(getSteamUser()))
}
func SteamAPI_ISteamUser_GetAuthSessionTicket(pTicket unsafe.Pointer, cbMaxTicket int32, pcbTicket *uint32) HAuthTicket {
	return C.SteamAPI_ISteamUser_GetAuthSessionTicket(getSteamUser(), pTicket, C.int32(cbMaxTicket), (*C.uint32)(pcbTicket))
}
func SteamAPI_ISteamUser_BeginAuthSession(pAuthTicket unsafe.Pointer, cbAuthTicket int32, steamID SteamID) EBeginAuthSessionResult {
	return EBeginAuthSessionResult(C.SteamAPI_ISteamUser_BeginAuthSession(getSteamUser(), pAuthTicket, C.int32(cbAuthTicket), C.CSteamID(steamID)))
}
func SteamAPI_ISteamUser_EndAuthSession(steamID SteamID) {
	C.SteamAPI_ISteamUser_EndAuthSession(getSteamUser(), C.CSteamID(steamID))
}
func SteamAPI_ISteamUser_CancelAuthTicket(hAuthTicket HAuthTicket) {
	C.SteamAPI_ISteamUser_CancelAuthTicket(getSteamUser(), hAuthTicket)
}
func SteamAPI_ISteamUser_UserHasLicenseForApp(steamID SteamID, appID AppId) EUserHasLicenseForAppResult {
	return EUserHasLicenseForAppResult(C.SteamAPI_ISteamUser_UserHasLicenseForApp(getSteamUser(), C.CSteamID(steamID), appID))
}
func SteamAPI_ISteamUser_BIsBehindNAT() bool {
	return bool(C.SteamAPI_ISteamUser_BIsBehindNAT(getSteamUser()))
}
func SteamAPI_ISteamUser_AdvertiseGame(steamIDGameServer SteamID, unIPServer uint32, usPortServer uint16) {
	C.SteamAPI_ISteamUser_AdvertiseGame(getSteamUser(), C.CSteamID(steamIDGameServer), C.uint32(unIPServer), C.uint16(usPortServer))
}
func SteamAPI_ISteamUser_RequestEncryptedAppTicket(pDataToInclude unsafe.Pointer, cbDataToInclude int32) SteamAPICall {
	return C.SteamAPI_ISteamUser_RequestEncryptedAppTicket(getSteamUser(), pDataToInclude, C.int32(cbDataToInclude))
}
func SteamAPI_ISteamUser_GetEncryptedAppTicket(pTicket unsafe.Pointer, cbMaxTicket int32, pcbTicket *uint32) bool {
	return bool(C.SteamAPI_ISteamUser_GetEncryptedAppTicket(getSteamUser(), pTicket, C.int32(cbMaxTicket), (*C.uint32)(pcbTicket)))
}
func SteamAPI_ISteamUser_GetGameBadgeLevel(nSeries int32, bFoil bool) int32 {
	return int32(C.SteamAPI_ISteamUser_GetGameBadgeLevel(getSteamUser(), C.int32(nSeries), C.bool(bFoil)))
}
func SteamAPI_ISteamUser_GetPlayerSteamLevel() int32 {
	return int32(C.SteamAPI_ISteamUser_GetPlayerSteamLevel(getSteamUser()))
}
func SteamAPI_ISteamUser_RequestStoreAuthURL(pchRedirectURL string) SteamAPICall {
	return C.SteamAPI_ISteamUser_RequestStoreAuthURL(getSteamUser(), unsafeCString(pchRedirectURL))
}
func SteamAPI_ISteamUser_BIsPhoneVerified() bool {
	return bool(C.SteamAPI_ISteamUser_BIsPhoneVerified(getSteamUser()))
}
func SteamAPI_ISteamUser_BIsTwoFactorEnabled() bool {
	return bool(C.SteamAPI_ISteamUser_BIsTwoFactorEnabled(getSteamUser()))
}
func SteamAPI_ISteamUser_BIsPhoneIdentifying() bool {
	return bool(C.SteamAPI_ISteamUser_BIsPhoneIdentifying(getSteamUser()))
}
func SteamAPI_ISteamUser_BIsPhoneRequiringVerification() bool {
	return bool(C.SteamAPI_ISteamUser_BIsPhoneRequiringVerification(getSteamUser()))
}
func SteamAPI_ISteamFriends_GetPersonaName() string {
	return C.GoString(C.SteamAPI_ISteamFriends_GetPersonaName(getSteamFriends()))
}
func SteamAPI_ISteamFriends_SetPersonaName(pchPersonaName string) SteamAPICall {
	return C.SteamAPI_ISteamFriends_SetPersonaName(getSteamFriends(), unsafeCString(pchPersonaName))
}
func SteamAPI_ISteamFriends_GetPersonaState() EPersonaState {
	return EPersonaState(C.SteamAPI_ISteamFriends_GetPersonaState(getSteamFriends()))
}
func SteamAPI_ISteamFriends_GetFriendCount(iFriendFlags int32) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetFriendCount(getSteamFriends(), C.int32(iFriendFlags)))
}
func SteamAPI_ISteamFriends_GetFriendByIndex(iFriend int32, iFriendFlags int32) SteamID {
	return SteamID(C.SteamAPI_ISteamFriends_GetFriendByIndex(getSteamFriends(), C.int32(iFriend), C.int32(iFriendFlags)))
}
func SteamAPI_ISteamFriends_GetFriendRelationship(steamIDFriend SteamID) EFriendRelationship {
	return EFriendRelationship(C.SteamAPI_ISteamFriends_GetFriendRelationship(getSteamFriends(), C.CSteamID(steamIDFriend)))
}
func SteamAPI_ISteamFriends_GetFriendPersonaState(steamIDFriend SteamID) EPersonaState {
	return EPersonaState(C.SteamAPI_ISteamFriends_GetFriendPersonaState(getSteamFriends(), C.CSteamID(steamIDFriend)))
}
func SteamAPI_ISteamFriends_GetFriendPersonaName(steamIDFriend SteamID) string {
	return C.GoString(C.SteamAPI_ISteamFriends_GetFriendPersonaName(getSteamFriends(), C.CSteamID(steamIDFriend)))
}
func SteamAPI_ISteamFriends_GetFriendGamePlayed(steamIDFriend SteamID, pFriendGameInfo *FriendGameInfo) bool {
	return bool(C.SteamAPI_ISteamFriends_GetFriendGamePlayed(getSteamFriends(), C.CSteamID(steamIDFriend), pFriendGameInfo))
}
func SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(steamIDFriend SteamID, iPersonaName int32) string {
	return C.GoString(C.SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(getSteamFriends(), C.CSteamID(steamIDFriend), C.int32(iPersonaName)))
}
func SteamAPI_ISteamFriends_GetFriendSteamLevel(steamIDFriend SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetFriendSteamLevel(getSteamFriends(), C.CSteamID(steamIDFriend)))
}
func SteamAPI_ISteamFriends_GetPlayerNickname(steamIDPlayer SteamID) string {
	return C.GoString(C.SteamAPI_ISteamFriends_GetPlayerNickname(getSteamFriends(), C.CSteamID(steamIDPlayer)))
}
func SteamAPI_ISteamFriends_GetFriendsGroupCount() int32 {
	return int32(C.SteamAPI_ISteamFriends_GetFriendsGroupCount(getSteamFriends()))
}
func SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(iFG int32) FriendsGroupID {
	return C.SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(getSteamFriends(), C.int32(iFG))
}
func SteamAPI_ISteamFriends_GetFriendsGroupName(friendsGroupID FriendsGroupID) string {
	return C.GoString(C.SteamAPI_ISteamFriends_GetFriendsGroupName(getSteamFriends(), friendsGroupID))
}
func SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(friendsGroupID FriendsGroupID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(getSteamFriends(), friendsGroupID))
}
func SteamAPI_ISteamFriends_GetFriendsGroupMembersList(friendsGroupID FriendsGroupID, pOutSteamIDMembers *SteamID, nMembersCount int32) {
	C.SteamAPI_ISteamFriends_GetFriendsGroupMembersList(getSteamFriends(), friendsGroupID, (*C.CSteamID)(pOutSteamIDMembers), C.int32(nMembersCount))
}
func SteamAPI_ISteamFriends_HasFriend(steamIDFriend SteamID, iFriendFlags int32) bool {
	return bool(C.SteamAPI_ISteamFriends_HasFriend(getSteamFriends(), C.CSteamID(steamIDFriend), C.int32(iFriendFlags)))
}
func SteamAPI_ISteamFriends_GetClanCount() int32 {
	return int32(C.SteamAPI_ISteamFriends_GetClanCount(getSteamFriends()))
}
func SteamAPI_ISteamFriends_GetClanByIndex(iClan int32) SteamID {
	return SteamID(C.SteamAPI_ISteamFriends_GetClanByIndex(getSteamFriends(), C.int32(iClan)))
}
func SteamAPI_ISteamFriends_GetClanName(steamIDClan SteamID) string {
	return C.GoString(C.SteamAPI_ISteamFriends_GetClanName(getSteamFriends(), C.CSteamID(steamIDClan)))
}
func SteamAPI_ISteamFriends_GetClanTag(steamIDClan SteamID) string {
	return C.GoString(C.SteamAPI_ISteamFriends_GetClanTag(getSteamFriends(), C.CSteamID(steamIDClan)))
}
func SteamAPI_ISteamFriends_GetClanActivityCounts(steamIDClan SteamID, pnOnline *int32, pnInGame *int32, pnChatting *int32) bool {
	return bool(C.SteamAPI_ISteamFriends_GetClanActivityCounts(getSteamFriends(), C.CSteamID(steamIDClan), (*C.int32)(pnOnline), (*C.int32)(pnInGame), (*C.int32)(pnChatting)))
}
func SteamAPI_ISteamFriends_DownloadClanActivityCounts(psteamIDClans *SteamID, cClansToRequest int32) SteamAPICall {
	return C.SteamAPI_ISteamFriends_DownloadClanActivityCounts(getSteamFriends(), (*C.CSteamID)(psteamIDClans), C.int32(cClansToRequest))
}
func SteamAPI_ISteamFriends_GetFriendCountFromSource(steamIDSource SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetFriendCountFromSource(getSteamFriends(), C.CSteamID(steamIDSource)))
}
func SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(steamIDSource SteamID, iFriend int32) SteamID {
	return SteamID(C.SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(getSteamFriends(), C.CSteamID(steamIDSource), C.int32(iFriend)))
}
func SteamAPI_ISteamFriends_IsUserInSource(steamIDUser SteamID, steamIDSource SteamID) bool {
	return bool(C.SteamAPI_ISteamFriends_IsUserInSource(getSteamFriends(), C.CSteamID(steamIDUser), C.CSteamID(steamIDSource)))
}
func SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(steamIDUser SteamID, bSpeaking bool) {
	C.SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(getSteamFriends(), C.CSteamID(steamIDUser), C.bool(bSpeaking))
}
func SteamAPI_ISteamFriends_ActivateGameOverlay(pchDialog string) {
	C.SteamAPI_ISteamFriends_ActivateGameOverlay(getSteamFriends(), unsafeCString(pchDialog))
}
func SteamAPI_ISteamFriends_ActivateGameOverlayToUser(pchDialog string, steamID SteamID) {
	C.SteamAPI_ISteamFriends_ActivateGameOverlayToUser(getSteamFriends(), unsafeCString(pchDialog), C.CSteamID(steamID))
}
func SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(pchURL string) {
	C.SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage(getSteamFriends(), unsafeCString(pchURL))
}
func SteamAPI_ISteamFriends_ActivateGameOverlayToStore(nAppID AppId, eFlag EOverlayToStoreFlag) {
	C.SteamAPI_ISteamFriends_ActivateGameOverlayToStore(getSteamFriends(), nAppID, C.EOverlayToStoreFlag(eFlag))
}
func SteamAPI_ISteamFriends_SetPlayedWith(steamIDUserPlayedWith SteamID) {
	C.SteamAPI_ISteamFriends_SetPlayedWith(getSteamFriends(), C.CSteamID(steamIDUserPlayedWith))
}
func SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(steamIDLobby SteamID) {
	C.SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(getSteamFriends(), C.CSteamID(steamIDLobby))
}
func SteamAPI_ISteamFriends_GetSmallFriendAvatar(steamIDFriend SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetSmallFriendAvatar(getSteamFriends(), C.CSteamID(steamIDFriend)))
}
func SteamAPI_ISteamFriends_GetMediumFriendAvatar(steamIDFriend SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetMediumFriendAvatar(getSteamFriends(), C.CSteamID(steamIDFriend)))
}
func SteamAPI_ISteamFriends_GetLargeFriendAvatar(steamIDFriend SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetLargeFriendAvatar(getSteamFriends(), C.CSteamID(steamIDFriend)))
}
func SteamAPI_ISteamFriends_RequestUserInformation(steamIDUser SteamID, bRequireNameOnly bool) bool {
	return bool(C.SteamAPI_ISteamFriends_RequestUserInformation(getSteamFriends(), C.CSteamID(steamIDUser), C.bool(bRequireNameOnly)))
}
func SteamAPI_ISteamFriends_RequestClanOfficerList(steamIDClan SteamID) SteamAPICall {
	return C.SteamAPI_ISteamFriends_RequestClanOfficerList(getSteamFriends(), C.CSteamID(steamIDClan))
}
func SteamAPI_ISteamFriends_GetClanOwner(steamIDClan SteamID) SteamID {
	return SteamID(C.SteamAPI_ISteamFriends_GetClanOwner(getSteamFriends(), C.CSteamID(steamIDClan)))
}
func SteamAPI_ISteamFriends_GetClanOfficerCount(steamIDClan SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetClanOfficerCount(getSteamFriends(), C.CSteamID(steamIDClan)))
}
func SteamAPI_ISteamFriends_GetClanOfficerByIndex(steamIDClan SteamID, iOfficer int32) SteamID {
	return SteamID(C.SteamAPI_ISteamFriends_GetClanOfficerByIndex(getSteamFriends(), C.CSteamID(steamIDClan), C.int32(iOfficer)))
}
func SteamAPI_ISteamFriends_GetUserRestrictions() uint32 {
	return uint32(C.SteamAPI_ISteamFriends_GetUserRestrictions(getSteamFriends()))
}
func SteamAPI_ISteamFriends_SetRichPresence(pchKey string, pchValue string) bool {
	return bool(C.SteamAPI_ISteamFriends_SetRichPresence(getSteamFriends(), unsafeCString(pchKey), unsafeCString(pchValue)))
}
func SteamAPI_ISteamFriends_ClearRichPresence() {
	C.SteamAPI_ISteamFriends_ClearRichPresence(getSteamFriends())
}
func SteamAPI_ISteamFriends_GetFriendRichPresence(steamIDFriend SteamID, pchKey string) string {
	return C.GoString(C.SteamAPI_ISteamFriends_GetFriendRichPresence(getSteamFriends(), C.CSteamID(steamIDFriend), unsafeCString(pchKey)))
}
func SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(steamIDFriend SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(getSteamFriends(), C.CSteamID(steamIDFriend)))
}
func SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(steamIDFriend SteamID, iKey int32) string {
	return C.GoString(C.SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(getSteamFriends(), C.CSteamID(steamIDFriend), C.int32(iKey)))
}
func SteamAPI_ISteamFriends_RequestFriendRichPresence(steamIDFriend SteamID) {
	C.SteamAPI_ISteamFriends_RequestFriendRichPresence(getSteamFriends(), C.CSteamID(steamIDFriend))
}
func SteamAPI_ISteamFriends_InviteUserToGame(steamIDFriend SteamID, pchConnectString string) bool {
	return bool(C.SteamAPI_ISteamFriends_InviteUserToGame(getSteamFriends(), C.CSteamID(steamIDFriend), unsafeCString(pchConnectString)))
}
func SteamAPI_ISteamFriends_GetCoplayFriendCount() int32 {
	return int32(C.SteamAPI_ISteamFriends_GetCoplayFriendCount(getSteamFriends()))
}
func SteamAPI_ISteamFriends_GetCoplayFriend(iCoplayFriend int32) SteamID {
	return SteamID(C.SteamAPI_ISteamFriends_GetCoplayFriend(getSteamFriends(), C.int32(iCoplayFriend)))
}
func SteamAPI_ISteamFriends_GetFriendCoplayTime(steamIDFriend SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetFriendCoplayTime(getSteamFriends(), C.CSteamID(steamIDFriend)))
}
func SteamAPI_ISteamFriends_GetFriendCoplayGame(steamIDFriend SteamID) AppId {
	return C.SteamAPI_ISteamFriends_GetFriendCoplayGame(getSteamFriends(), C.CSteamID(steamIDFriend))
}
func SteamAPI_ISteamFriends_JoinClanChatRoom(steamIDClan SteamID) SteamAPICall {
	return C.SteamAPI_ISteamFriends_JoinClanChatRoom(getSteamFriends(), C.CSteamID(steamIDClan))
}
func SteamAPI_ISteamFriends_LeaveClanChatRoom(steamIDClan SteamID) bool {
	return bool(C.SteamAPI_ISteamFriends_LeaveClanChatRoom(getSteamFriends(), C.CSteamID(steamIDClan)))
}
func SteamAPI_ISteamFriends_GetClanChatMemberCount(steamIDClan SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetClanChatMemberCount(getSteamFriends(), C.CSteamID(steamIDClan)))
}
func SteamAPI_ISteamFriends_GetChatMemberByIndex(steamIDClan SteamID, iUser int32) SteamID {
	return SteamID(C.SteamAPI_ISteamFriends_GetChatMemberByIndex(getSteamFriends(), C.CSteamID(steamIDClan), C.int32(iUser)))
}
func SteamAPI_ISteamFriends_SendClanChatMessage(steamIDClanChat SteamID, pchText string) bool {
	return bool(C.SteamAPI_ISteamFriends_SendClanChatMessage(getSteamFriends(), C.CSteamID(steamIDClanChat), unsafeCString(pchText)))
}
func SteamAPI_ISteamFriends_GetClanChatMessage(steamIDClanChat SteamID, iMessage int32, prgchText unsafe.Pointer, cchTextMax int32, peChatEntryType *EChatEntryType, psteamidChatter *SteamID) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetClanChatMessage(getSteamFriends(), C.CSteamID(steamIDClanChat), C.int32(iMessage), prgchText, C.int32(cchTextMax), (*C.EChatEntryType)(peChatEntryType), (*C.CSteamID)(psteamidChatter)))
}
func SteamAPI_ISteamFriends_IsClanChatAdmin(steamIDClanChat SteamID, steamIDUser SteamID) bool {
	return bool(C.SteamAPI_ISteamFriends_IsClanChatAdmin(getSteamFriends(), C.CSteamID(steamIDClanChat), C.CSteamID(steamIDUser)))
}
func SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(steamIDClanChat SteamID) bool {
	return bool(C.SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(getSteamFriends(), C.CSteamID(steamIDClanChat)))
}
func SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(steamIDClanChat SteamID) bool {
	return bool(C.SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(getSteamFriends(), C.CSteamID(steamIDClanChat)))
}
func SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(steamIDClanChat SteamID) bool {
	return bool(C.SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(getSteamFriends(), C.CSteamID(steamIDClanChat)))
}
func SteamAPI_ISteamFriends_SetListenForFriendsMessages(bInterceptEnabled bool) bool {
	return bool(C.SteamAPI_ISteamFriends_SetListenForFriendsMessages(getSteamFriends(), C.bool(bInterceptEnabled)))
}
func SteamAPI_ISteamFriends_ReplyToFriendMessage(steamIDFriend SteamID, pchMsgToSend string) bool {
	return bool(C.SteamAPI_ISteamFriends_ReplyToFriendMessage(getSteamFriends(), C.CSteamID(steamIDFriend), unsafeCString(pchMsgToSend)))
}
func SteamAPI_ISteamFriends_GetFriendMessage(steamIDFriend SteamID, iMessageID int32, pvData unsafe.Pointer, cubData int32, peChatEntryType *EChatEntryType) int32 {
	return int32(C.SteamAPI_ISteamFriends_GetFriendMessage(getSteamFriends(), C.CSteamID(steamIDFriend), C.int32(iMessageID), pvData, C.int32(cubData), (*C.EChatEntryType)(peChatEntryType)))
}
func SteamAPI_ISteamFriends_GetFollowerCount(steamID SteamID) SteamAPICall {
	return C.SteamAPI_ISteamFriends_GetFollowerCount(getSteamFriends(), C.CSteamID(steamID))
}
func SteamAPI_ISteamFriends_IsFollowing(steamID SteamID) SteamAPICall {
	return C.SteamAPI_ISteamFriends_IsFollowing(getSteamFriends(), C.CSteamID(steamID))
}
func SteamAPI_ISteamFriends_EnumerateFollowingList(unStartIndex uint32) SteamAPICall {
	return C.SteamAPI_ISteamFriends_EnumerateFollowingList(getSteamFriends(), C.uint32(unStartIndex))
}
func SteamAPI_ISteamFriends_IsClanPublic(steamIDClan SteamID) bool {
	return bool(C.SteamAPI_ISteamFriends_IsClanPublic(getSteamFriends(), C.CSteamID(steamIDClan)))
}
func SteamAPI_ISteamFriends_IsClanOfficialGameGroup(steamIDClan SteamID) bool {
	return bool(C.SteamAPI_ISteamFriends_IsClanOfficialGameGroup(getSteamFriends(), C.CSteamID(steamIDClan)))
}
func SteamAPI_ISteamUtils_GetSecondsSinceAppActive() uint32 {
	return uint32(C.SteamAPI_ISteamUtils_GetSecondsSinceAppActive(getSteamUtils()))
}
func SteamAPI_ISteamUtils_GetSecondsSinceComputerActive() uint32 {
	return uint32(C.SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(getSteamUtils()))
}
func SteamAPI_ISteamUtils_GetConnectedUniverse() EUniverse {
	return EUniverse(C.SteamAPI_ISteamUtils_GetConnectedUniverse(getSteamUtils()))
}
func SteamAPI_ISteamUtils_GetServerRealTime() uint32 {
	return uint32(C.SteamAPI_ISteamUtils_GetServerRealTime(getSteamUtils()))
}
func SteamAPI_ISteamUtils_GetIPCountry() string {
	return C.GoString(C.SteamAPI_ISteamUtils_GetIPCountry(getSteamUtils()))
}
func SteamAPI_ISteamUtils_GetImageSize(iImage int32, pnWidth *uint32, pnHeight *uint32) bool {
	return bool(C.SteamAPI_ISteamUtils_GetImageSize(getSteamUtils(), C.int32(iImage), (*C.uint32)(pnWidth), (*C.uint32)(pnHeight)))
}
func SteamAPI_ISteamUtils_GetImageRGBA(iImage int32, pubDest *uint8, nDestBufferSize int32) bool {
	return bool(C.SteamAPI_ISteamUtils_GetImageRGBA(getSteamUtils(), C.int32(iImage), (*C.uint8)(pubDest), C.int32(nDestBufferSize)))
}
func SteamAPI_ISteamUtils_GetCSERIPPort(unIP *uint32, usPort *uint16) bool {
	return bool(C.SteamAPI_ISteamUtils_GetCSERIPPort(getSteamUtils(), (*C.uint32)(unIP), (*C.uint16)(usPort)))
}
func SteamAPI_ISteamUtils_GetCurrentBatteryPower() uint8 {
	return uint8(C.SteamAPI_ISteamUtils_GetCurrentBatteryPower(getSteamUtils()))
}
func SteamAPI_ISteamUtils_GetAppID() uint32 {
	return uint32(C.SteamAPI_ISteamUtils_GetAppID(getSteamUtils()))
}
func SteamAPI_ISteamUtils_SetOverlayNotificationPosition(eNotificationPosition ENotificationPosition) {
	C.SteamAPI_ISteamUtils_SetOverlayNotificationPosition(getSteamUtils(), C.ENotificationPosition(eNotificationPosition))
}
func SteamAPI_ISteamUtils_IsAPICallCompleted(hSteamAPICall SteamAPICall, pbFailed *bool) bool {
	return bool(C.SteamAPI_ISteamUtils_IsAPICallCompleted(getSteamUtils(), hSteamAPICall, (*C.bool)(pbFailed)))
}
func SteamAPI_ISteamUtils_GetAPICallFailureReason(hSteamAPICall SteamAPICall) ESteamAPICallFailure {
	return ESteamAPICallFailure(C.SteamAPI_ISteamUtils_GetAPICallFailureReason(getSteamUtils(), hSteamAPICall))
}
func SteamAPI_ISteamUtils_GetAPICallResult(hSteamAPICall SteamAPICall, pCallback unsafe.Pointer, cubCallback int32, iCallbackExpected int32, pbFailed *bool) bool {
	return bool(C.SteamAPI_ISteamUtils_GetAPICallResult(getSteamUtils(), hSteamAPICall, pCallback, C.int32(cubCallback), C.int32(iCallbackExpected), (*C.bool)(pbFailed)))
}
func SteamAPI_ISteamUtils_GetIPCCallCount() uint32 {
	return uint32(C.SteamAPI_ISteamUtils_GetIPCCallCount(getSteamUtils()))
}
func SteamAPI_ISteamUtils_IsOverlayEnabled() bool {
	return bool(C.SteamAPI_ISteamUtils_IsOverlayEnabled(getSteamUtils()))
}
func SteamAPI_ISteamUtils_BOverlayNeedsPresent() bool {
	return bool(C.SteamAPI_ISteamUtils_BOverlayNeedsPresent(getSteamUtils()))
}
func SteamAPI_ISteamUtils_CheckFileSignature(szFileName string) SteamAPICall {
	return C.SteamAPI_ISteamUtils_CheckFileSignature(getSteamUtils(), unsafeCString(szFileName))
}
func SteamAPI_ISteamUtils_ShowGamepadTextInput(eInputMode EGamepadTextInputMode, eLineInputMode EGamepadTextInputLineMode, pchDescription string, unCharMax uint32, pchExistingText string) bool {
	return bool(C.SteamAPI_ISteamUtils_ShowGamepadTextInput(getSteamUtils(), C.EGamepadTextInputMode(eInputMode), C.EGamepadTextInputLineMode(eLineInputMode), unsafeCString(pchDescription), C.uint32(unCharMax), unsafeCString(pchExistingText)))
}
func SteamAPI_ISteamUtils_GetEnteredGamepadTextLength() uint32 {
	return uint32(C.SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(getSteamUtils()))
}
func SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(pchText []byte, cchText uint32) bool {
	return bool(C.SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(getSteamUtils(), unsafeCBytes(pchText), C.uint32(cchText)))
}
func SteamAPI_ISteamUtils_GetSteamUILanguage() string {
	return C.GoString(C.SteamAPI_ISteamUtils_GetSteamUILanguage(getSteamUtils()))
}
func SteamAPI_ISteamUtils_IsSteamRunningInVR() bool {
	return bool(C.SteamAPI_ISteamUtils_IsSteamRunningInVR(getSteamUtils()))
}
func SteamAPI_ISteamUtils_SetOverlayNotificationInset(nHorizontalInset int32, nVerticalInset int32) {
	C.SteamAPI_ISteamUtils_SetOverlayNotificationInset(getSteamUtils(), C.int32(nHorizontalInset), C.int32(nVerticalInset))
}
func SteamAPI_ISteamUtils_IsSteamInBigPictureMode() bool {
	return bool(C.SteamAPI_ISteamUtils_IsSteamInBigPictureMode(getSteamUtils()))
}
func SteamAPI_ISteamUtils_StartVRDashboard() {
	C.SteamAPI_ISteamUtils_StartVRDashboard(getSteamUtils())
}
func SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled() bool {
	return bool(C.SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(getSteamUtils()))
}
func SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(bEnabled bool) {
	C.SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(getSteamUtils(), C.bool(bEnabled))
}
func SteamAPI_ISteamMatchmaking_GetFavoriteGameCount() int32 {
	return int32(C.SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(getSteamMatchmaking()))
}
func SteamAPI_ISteamMatchmaking_GetFavoriteGame(iGame int32, pnAppID *AppId, pnIP *uint32, pnConnPort *uint16, pnQueryPort *uint16, punFlags *uint32, pRTime32LastPlayedOnServer *uint32) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_GetFavoriteGame(getSteamMatchmaking(), C.int32(iGame), pnAppID, (*C.uint32)(pnIP), (*C.uint16)(pnConnPort), (*C.uint16)(pnQueryPort), (*C.uint32)(punFlags), (*C.uint32)(pRTime32LastPlayedOnServer)))
}
func SteamAPI_ISteamMatchmaking_AddFavoriteGame(nAppID AppId, nIP uint32, nConnPort uint16, nQueryPort uint16, unFlags uint32, rTime32LastPlayedOnServer uint32) int32 {
	return int32(C.SteamAPI_ISteamMatchmaking_AddFavoriteGame(getSteamMatchmaking(), nAppID, C.uint32(nIP), C.uint16(nConnPort), C.uint16(nQueryPort), C.uint32(unFlags), C.uint32(rTime32LastPlayedOnServer)))
}
func SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(nAppID AppId, nIP uint32, nConnPort uint16, nQueryPort uint16, unFlags uint32) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(getSteamMatchmaking(), nAppID, C.uint32(nIP), C.uint16(nConnPort), C.uint16(nQueryPort), C.uint32(unFlags)))
}
func SteamAPI_ISteamMatchmaking_RequestLobbyList() SteamAPICall {
	return C.SteamAPI_ISteamMatchmaking_RequestLobbyList(getSteamMatchmaking())
}
func SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(pchKeyToMatch string, pchValueToMatch string, eComparisonType ELobbyComparison) {
	C.SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter(getSteamMatchmaking(), unsafeCString(pchKeyToMatch), unsafeCString(pchValueToMatch), C.ELobbyComparison(eComparisonType))
}
func SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(pchKeyToMatch string, nValueToMatch int32, eComparisonType ELobbyComparison) {
	C.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter(getSteamMatchmaking(), unsafeCString(pchKeyToMatch), C.int32(nValueToMatch), C.ELobbyComparison(eComparisonType))
}
func SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(pchKeyToMatch string, nValueToBeCloseTo int32) {
	C.SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(getSteamMatchmaking(), unsafeCString(pchKeyToMatch), C.int32(nValueToBeCloseTo))
}
func SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(nSlotsAvailable int32) {
	C.SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(getSteamMatchmaking(), C.int32(nSlotsAvailable))
}
func SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(eLobbyDistanceFilter ELobbyDistanceFilter) {
	C.SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter(getSteamMatchmaking(), C.ELobbyDistanceFilter(eLobbyDistanceFilter))
}
func SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(cMaxResults int32) {
	C.SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(getSteamMatchmaking(), C.int32(cMaxResults))
}
func SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(steamIDLobby SteamID) {
	C.SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(getSteamMatchmaking(), C.CSteamID(steamIDLobby))
}
func SteamAPI_ISteamMatchmaking_GetLobbyByIndex(iLobby int32) SteamID {
	return SteamID(C.SteamAPI_ISteamMatchmaking_GetLobbyByIndex(getSteamMatchmaking(), C.int32(iLobby)))
}
func SteamAPI_ISteamMatchmaking_CreateLobby(eLobbyType ELobbyType, cMaxMembers int32) SteamAPICall {
	return C.SteamAPI_ISteamMatchmaking_CreateLobby(getSteamMatchmaking(), C.ELobbyType(eLobbyType), C.int32(cMaxMembers))
}
func SteamAPI_ISteamMatchmaking_JoinLobby(steamIDLobby SteamID) SteamAPICall {
	return C.SteamAPI_ISteamMatchmaking_JoinLobby(getSteamMatchmaking(), C.CSteamID(steamIDLobby))
}
func SteamAPI_ISteamMatchmaking_LeaveLobby(steamIDLobby SteamID) {
	C.SteamAPI_ISteamMatchmaking_LeaveLobby(getSteamMatchmaking(), C.CSteamID(steamIDLobby))
}
func SteamAPI_ISteamMatchmaking_InviteUserToLobby(steamIDLobby SteamID, steamIDInvitee SteamID) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_InviteUserToLobby(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.CSteamID(steamIDInvitee)))
}
func SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(steamIDLobby SteamID) int32 {
	return int32(C.SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(getSteamMatchmaking(), C.CSteamID(steamIDLobby)))
}
func SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(steamIDLobby SteamID, iMember int32) SteamID {
	return SteamID(C.SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.int32(iMember)))
}
func SteamAPI_ISteamMatchmaking_GetLobbyData(steamIDLobby SteamID, pchKey string) string {
	return C.GoString(C.SteamAPI_ISteamMatchmaking_GetLobbyData(getSteamMatchmaking(), C.CSteamID(steamIDLobby), unsafeCString(pchKey)))
}
func SteamAPI_ISteamMatchmaking_SetLobbyData(steamIDLobby SteamID, pchKey string, pchValue string) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_SetLobbyData(getSteamMatchmaking(), C.CSteamID(steamIDLobby), unsafeCString(pchKey), unsafeCString(pchValue)))
}
func SteamAPI_ISteamMatchmaking_GetLobbyDataCount(steamIDLobby SteamID) int32 {
	return int32(C.SteamAPI_ISteamMatchmaking_GetLobbyDataCount(getSteamMatchmaking(), C.CSteamID(steamIDLobby)))
}
func SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(steamIDLobby SteamID, iLobbyData int32, pchKey []byte, cchKeyBufferSize int32, pchValue []byte, cchValueBufferSize int32) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.int32(iLobbyData), unsafeCBytes(pchKey), C.int32(cchKeyBufferSize), unsafeCBytes(pchValue), C.int32(cchValueBufferSize)))
}
func SteamAPI_ISteamMatchmaking_DeleteLobbyData(steamIDLobby SteamID, pchKey string) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_DeleteLobbyData(getSteamMatchmaking(), C.CSteamID(steamIDLobby), unsafeCString(pchKey)))
}
func SteamAPI_ISteamMatchmaking_GetLobbyMemberData(steamIDLobby SteamID, steamIDUser SteamID, pchKey string) string {
	return C.GoString(C.SteamAPI_ISteamMatchmaking_GetLobbyMemberData(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.CSteamID(steamIDUser), unsafeCString(pchKey)))
}
func SteamAPI_ISteamMatchmaking_SetLobbyMemberData(steamIDLobby SteamID, pchKey string, pchValue string) {
	C.SteamAPI_ISteamMatchmaking_SetLobbyMemberData(getSteamMatchmaking(), C.CSteamID(steamIDLobby), unsafeCString(pchKey), unsafeCString(pchValue))
}
func SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(steamIDLobby SteamID, pvMsgBody unsafe.Pointer, cubMsgBody int32) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(getSteamMatchmaking(), C.CSteamID(steamIDLobby), pvMsgBody, C.int32(cubMsgBody)))
}
func SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(steamIDLobby SteamID, iChatID int32, pSteamIDUser *SteamID, pvData unsafe.Pointer, cubData int32, peChatEntryType *EChatEntryType) int32 {
	return int32(C.SteamAPI_ISteamMatchmaking_GetLobbyChatEntry(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.int32(iChatID), (*C.CSteamID)(pSteamIDUser), pvData, C.int32(cubData), (*C.EChatEntryType)(peChatEntryType)))
}
func SteamAPI_ISteamMatchmaking_RequestLobbyData(steamIDLobby SteamID) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_RequestLobbyData(getSteamMatchmaking(), C.CSteamID(steamIDLobby)))
}
func SteamAPI_ISteamMatchmaking_SetLobbyGameServer(steamIDLobby SteamID, unGameServerIP uint32, unGameServerPort uint16, steamIDGameServer SteamID) {
	C.SteamAPI_ISteamMatchmaking_SetLobbyGameServer(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.uint32(unGameServerIP), C.uint16(unGameServerPort), C.CSteamID(steamIDGameServer))
}
func SteamAPI_ISteamMatchmaking_GetLobbyGameServer(steamIDLobby SteamID, punGameServerIP *uint32, punGameServerPort *uint16, psteamIDGameServer *SteamID) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_GetLobbyGameServer(getSteamMatchmaking(), C.CSteamID(steamIDLobby), (*C.uint32)(punGameServerIP), (*C.uint16)(punGameServerPort), (*C.CSteamID)(psteamIDGameServer)))
}
func SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(steamIDLobby SteamID, cMaxMembers int32) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.int32(cMaxMembers)))
}
func SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(steamIDLobby SteamID) int32 {
	return int32(C.SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(getSteamMatchmaking(), C.CSteamID(steamIDLobby)))
}
func SteamAPI_ISteamMatchmaking_SetLobbyType(steamIDLobby SteamID, eLobbyType ELobbyType) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_SetLobbyType(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.ELobbyType(eLobbyType)))
}
func SteamAPI_ISteamMatchmaking_SetLobbyJoinable(steamIDLobby SteamID, bLobbyJoinable bool) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_SetLobbyJoinable(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.bool(bLobbyJoinable)))
}
func SteamAPI_ISteamMatchmaking_GetLobbyOwner(steamIDLobby SteamID) SteamID {
	return SteamID(C.SteamAPI_ISteamMatchmaking_GetLobbyOwner(getSteamMatchmaking(), C.CSteamID(steamIDLobby)))
}
func SteamAPI_ISteamMatchmaking_SetLobbyOwner(steamIDLobby SteamID, steamIDNewOwner SteamID) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_SetLobbyOwner(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.CSteamID(steamIDNewOwner)))
}
func SteamAPI_ISteamMatchmaking_SetLinkedLobby(steamIDLobby SteamID, steamIDLobbyDependent SteamID) bool {
	return bool(C.SteamAPI_ISteamMatchmaking_SetLinkedLobby(getSteamMatchmaking(), C.CSteamID(steamIDLobby), C.CSteamID(steamIDLobbyDependent)))
}
func SteamAPI_ISteamMatchmakingServers_ReleaseRequest(hServerListRequest C.HServerListRequest) {
	C.SteamAPI_ISteamMatchmakingServers_ReleaseRequest(getSteamMatchmakingServers(), hServerListRequest)
}
func SteamAPI_ISteamMatchmakingServers_GetServerDetails(hRequest C.HServerListRequest, iServer int32) *gameserveritem {
	return C.SteamAPI_ISteamMatchmakingServers_GetServerDetails(getSteamMatchmakingServers(), hRequest, C.int32(iServer))
}
func SteamAPI_ISteamMatchmakingServers_CancelQuery(hRequest C.HServerListRequest) {
	C.SteamAPI_ISteamMatchmakingServers_CancelQuery(getSteamMatchmakingServers(), hRequest)
}
func SteamAPI_ISteamMatchmakingServers_RefreshQuery(hRequest C.HServerListRequest) {
	C.SteamAPI_ISteamMatchmakingServers_RefreshQuery(getSteamMatchmakingServers(), hRequest)
}
func SteamAPI_ISteamMatchmakingServers_IsRefreshing(hRequest C.HServerListRequest) bool {
	return bool(C.SteamAPI_ISteamMatchmakingServers_IsRefreshing(getSteamMatchmakingServers(), hRequest))
}
func SteamAPI_ISteamMatchmakingServers_GetServerCount(hRequest C.HServerListRequest) int32 {
	return int32(C.SteamAPI_ISteamMatchmakingServers_GetServerCount(getSteamMatchmakingServers(), hRequest))
}
func SteamAPI_ISteamMatchmakingServers_RefreshServer(hRequest C.HServerListRequest, iServer int32) {
	C.SteamAPI_ISteamMatchmakingServers_RefreshServer(getSteamMatchmakingServers(), hRequest, C.int32(iServer))
}
func SteamAPI_ISteamMatchmakingServers_CancelServerQuery(hServerQuery HServerQuery) {
	C.SteamAPI_ISteamMatchmakingServers_CancelServerQuery(getSteamMatchmakingServers(), hServerQuery)
}
func SteamAPI_ISteamRemoteStorage_FileWrite(pchFile string, pvData unsafe.Pointer, cubData int32) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_FileWrite(getSteamRemoteStorage(), unsafeCString(pchFile), pvData, C.int32(cubData)))
}
func SteamAPI_ISteamRemoteStorage_FileRead(pchFile string, pvData unsafe.Pointer, cubDataToRead int32) int32 {
	return int32(C.SteamAPI_ISteamRemoteStorage_FileRead(getSteamRemoteStorage(), unsafeCString(pchFile), pvData, C.int32(cubDataToRead)))
}
func SteamAPI_ISteamRemoteStorage_FileWriteAsync(pchFile string, pvData unsafe.Pointer, cubData uint32) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_FileWriteAsync(getSteamRemoteStorage(), unsafeCString(pchFile), pvData, C.uint32(cubData))
}
func SteamAPI_ISteamRemoteStorage_FileReadAsync(pchFile string, nOffset uint32, cubToRead uint32) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_FileReadAsync(getSteamRemoteStorage(), unsafeCString(pchFile), C.uint32(nOffset), C.uint32(cubToRead))
}
func SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(hReadCall SteamAPICall, pvBuffer unsafe.Pointer, cubToRead uint32) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(getSteamRemoteStorage(), hReadCall, pvBuffer, C.uint32(cubToRead)))
}
func SteamAPI_ISteamRemoteStorage_FileForget(pchFile string) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_FileForget(getSteamRemoteStorage(), unsafeCString(pchFile)))
}
func SteamAPI_ISteamRemoteStorage_FileDelete(pchFile string) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_FileDelete(getSteamRemoteStorage(), unsafeCString(pchFile)))
}
func SteamAPI_ISteamRemoteStorage_FileShare(pchFile string) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_FileShare(getSteamRemoteStorage(), unsafeCString(pchFile))
}
func SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(pchFile string, eRemoteStoragePlatform ERemoteStoragePlatform) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_SetSyncPlatforms(getSteamRemoteStorage(), unsafeCString(pchFile), C.ERemoteStoragePlatform(eRemoteStoragePlatform)))
}
func SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(pchFile string) UGCFileWriteStreamHandle {
	return C.SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(getSteamRemoteStorage(), unsafeCString(pchFile))
}
func SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(writeHandle UGCFileWriteStreamHandle, pvData unsafe.Pointer, cubData int32) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(getSteamRemoteStorage(), writeHandle, pvData, C.int32(cubData)))
}
func SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(writeHandle UGCFileWriteStreamHandle) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(getSteamRemoteStorage(), writeHandle))
}
func SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(writeHandle UGCFileWriteStreamHandle) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(getSteamRemoteStorage(), writeHandle))
}
func SteamAPI_ISteamRemoteStorage_FileExists(pchFile string) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_FileExists(getSteamRemoteStorage(), unsafeCString(pchFile)))
}
func SteamAPI_ISteamRemoteStorage_FilePersisted(pchFile string) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_FilePersisted(getSteamRemoteStorage(), unsafeCString(pchFile)))
}
func SteamAPI_ISteamRemoteStorage_GetFileSize(pchFile string) int32 {
	return int32(C.SteamAPI_ISteamRemoteStorage_GetFileSize(getSteamRemoteStorage(), unsafeCString(pchFile)))
}
func SteamAPI_ISteamRemoteStorage_GetFileTimestamp(pchFile string) int64 {
	return int64(C.SteamAPI_ISteamRemoteStorage_GetFileTimestamp(getSteamRemoteStorage(), unsafeCString(pchFile)))
}
func SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(pchFile string) ERemoteStoragePlatform {
	return ERemoteStoragePlatform(C.SteamAPI_ISteamRemoteStorage_GetSyncPlatforms(getSteamRemoteStorage(), unsafeCString(pchFile)))
}
func SteamAPI_ISteamRemoteStorage_GetFileCount() int32 {
	return int32(C.SteamAPI_ISteamRemoteStorage_GetFileCount(getSteamRemoteStorage()))
}
func SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(iFile int32, pnFileSizeInBytes *int32) string {
	return C.GoString(C.SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(getSteamRemoteStorage(), C.int32(iFile), (*C.int32)(pnFileSizeInBytes)))
}
func SteamAPI_ISteamRemoteStorage_GetQuota(pnTotalBytes *uint64, puAvailableBytes *uint64) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_GetQuota(getSteamRemoteStorage(), (*C.uint64)(pnTotalBytes), (*C.uint64)(puAvailableBytes)))
}
func SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount() bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(getSteamRemoteStorage()))
}
func SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp() bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(getSteamRemoteStorage()))
}
func SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(bEnabled bool) {
	C.SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(getSteamRemoteStorage(), C.bool(bEnabled))
}
func SteamAPI_ISteamRemoteStorage_UGCDownload(hContent UGCHandle, unPriority uint32) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_UGCDownload(getSteamRemoteStorage(), hContent, C.uint32(unPriority))
}
func SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(hContent UGCHandle, pnBytesDownloaded *int32, pnBytesExpected *int32) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(getSteamRemoteStorage(), hContent, (*C.int32)(pnBytesDownloaded), (*C.int32)(pnBytesExpected)))
}
func SteamAPI_ISteamRemoteStorage_GetUGCDetails(hContent UGCHandle, pnAppID *AppId, ppchName **C.char, pnFileSizeInBytes *int32, pSteamIDOwner *SteamID) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_GetUGCDetails(getSteamRemoteStorage(), hContent, pnAppID, ppchName, (*C.int32)(pnFileSizeInBytes), (*C.CSteamID)(pSteamIDOwner)))
}
func SteamAPI_ISteamRemoteStorage_UGCRead(hContent UGCHandle, pvData unsafe.Pointer, cubDataToRead int32, cOffset uint32, eAction EUGCReadAction) int32 {
	return int32(C.SteamAPI_ISteamRemoteStorage_UGCRead(getSteamRemoteStorage(), hContent, pvData, C.int32(cubDataToRead), C.uint32(cOffset), C.EUGCReadAction(eAction)))
}
func SteamAPI_ISteamRemoteStorage_GetCachedUGCCount() int32 {
	return int32(C.SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(getSteamRemoteStorage()))
}
func SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(iCachedContent int32) UGCHandle {
	return C.SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(getSteamRemoteStorage(), C.int32(iCachedContent))
}
func SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(pchFile string, pchPreviewFile string, nConsumerAppId AppId, pchTitle string, pchDescription string, eVisibility ERemoteStoragePublishedFileVisibility, pTags *SteamParamStringArray, eWorkshopFileType EWorkshopFileType) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_PublishWorkshopFile(getSteamRemoteStorage(), unsafeCString(pchFile), unsafeCString(pchPreviewFile), nConsumerAppId, unsafeCString(pchTitle), unsafeCString(pchDescription), C.ERemoteStoragePublishedFileVisibility(eVisibility), pTags, C.EWorkshopFileType(eWorkshopFileType))
}
func SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(unPublishedFileId PublishedFileId) PublishedFileUpdateHandle {
	return C.SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(getSteamRemoteStorage(), unPublishedFileId)
}
func SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(updateHandle PublishedFileUpdateHandle, pchFile string) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(getSteamRemoteStorage(), updateHandle, unsafeCString(pchFile)))
}
func SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(updateHandle PublishedFileUpdateHandle, pchPreviewFile string) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(getSteamRemoteStorage(), updateHandle, unsafeCString(pchPreviewFile)))
}
func SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(updateHandle PublishedFileUpdateHandle, pchTitle string) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(getSteamRemoteStorage(), updateHandle, unsafeCString(pchTitle)))
}
func SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(updateHandle PublishedFileUpdateHandle, pchDescription string) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(getSteamRemoteStorage(), updateHandle, unsafeCString(pchDescription)))
}
func SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(updateHandle PublishedFileUpdateHandle, eVisibility ERemoteStoragePublishedFileVisibility) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility(getSteamRemoteStorage(), updateHandle, C.ERemoteStoragePublishedFileVisibility(eVisibility)))
}
func SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(updateHandle PublishedFileUpdateHandle, pTags *SteamParamStringArray) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags(getSteamRemoteStorage(), updateHandle, pTags))
}
func SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(updateHandle PublishedFileUpdateHandle) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(getSteamRemoteStorage(), updateHandle)
}
func SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(unPublishedFileId PublishedFileId, unMaxSecondsOld uint32) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(getSteamRemoteStorage(), unPublishedFileId, C.uint32(unMaxSecondsOld))
}
func SteamAPI_ISteamRemoteStorage_DeletePublishedFile(unPublishedFileId PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_DeletePublishedFile(getSteamRemoteStorage(), unPublishedFileId)
}
func SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(unStartIndex uint32) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(getSteamRemoteStorage(), C.uint32(unStartIndex))
}
func SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(unPublishedFileId PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(getSteamRemoteStorage(), unPublishedFileId)
}
func SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(unStartIndex uint32) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(getSteamRemoteStorage(), C.uint32(unStartIndex))
}
func SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(unPublishedFileId PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(getSteamRemoteStorage(), unPublishedFileId)
}
func SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(updateHandle PublishedFileUpdateHandle, pchChangeDescription string) bool {
	return bool(C.SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(getSteamRemoteStorage(), updateHandle, unsafeCString(pchChangeDescription)))
}
func SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(unPublishedFileId PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(getSteamRemoteStorage(), unPublishedFileId)
}
func SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(unPublishedFileId PublishedFileId, bVoteUp bool) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(getSteamRemoteStorage(), unPublishedFileId, C.bool(bVoteUp))
}
func SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(unPublishedFileId PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(getSteamRemoteStorage(), unPublishedFileId)
}
func SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(steamId SteamID, unStartIndex uint32, pRequiredTags *SteamParamStringArray, pExcludedTags *SteamParamStringArray) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(getSteamRemoteStorage(), C.CSteamID(steamId), C.uint32(unStartIndex), pRequiredTags, pExcludedTags)
}
func SteamAPI_ISteamRemoteStorage_PublishVideo(eVideoProvider EWorkshopVideoProvider, pchVideoAccount string, pchVideoIdentifier string, pchPreviewFile string, nConsumerAppId AppId, pchTitle string, pchDescription string, eVisibility ERemoteStoragePublishedFileVisibility, pTags *SteamParamStringArray) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_PublishVideo(getSteamRemoteStorage(), C.EWorkshopVideoProvider(eVideoProvider), unsafeCString(pchVideoAccount), unsafeCString(pchVideoIdentifier), unsafeCString(pchPreviewFile), nConsumerAppId, unsafeCString(pchTitle), unsafeCString(pchDescription), C.ERemoteStoragePublishedFileVisibility(eVisibility), pTags)
}
func SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(unPublishedFileId PublishedFileId, eAction EWorkshopFileAction) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction(getSteamRemoteStorage(), unPublishedFileId, C.EWorkshopFileAction(eAction))
}
func SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(eAction EWorkshopFileAction, unStartIndex uint32) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(getSteamRemoteStorage(), C.EWorkshopFileAction(eAction), C.uint32(unStartIndex))
}
func SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(eEnumerationType EWorkshopEnumerationType, unStartIndex uint32, unCount uint32, unDays uint32, pTags *SteamParamStringArray, pUserTags *SteamParamStringArray) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(getSteamRemoteStorage(), C.EWorkshopEnumerationType(eEnumerationType), C.uint32(unStartIndex), C.uint32(unCount), C.uint32(unDays), pTags, pUserTags)
}
func SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(hContent UGCHandle, pchLocation string, unPriority uint32) SteamAPICall {
	return C.SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(getSteamRemoteStorage(), hContent, unsafeCString(pchLocation), C.uint32(unPriority))
}
func SteamAPI_ISteamUserStats_RequestCurrentStats() bool {
	return bool(C.SteamAPI_ISteamUserStats_RequestCurrentStats(getSteamUserStats()))
}
func SteamAPI_ISteamUserStats_GetStat(pchName string, pData *int32) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetStat(getSteamUserStats(), unsafeCString(pchName), (*C.int32)(pData)))
}
func SteamAPI_ISteamUserStats_GetStat0(pchName string, pData *float32) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetStat0(getSteamUserStats(), unsafeCString(pchName), (*C.float)(pData)))
}
func SteamAPI_ISteamUserStats_SetStat(pchName string, nData int32) bool {
	return bool(C.SteamAPI_ISteamUserStats_SetStat(getSteamUserStats(), unsafeCString(pchName), C.int32(nData)))
}
func SteamAPI_ISteamUserStats_SetStat0(pchName string, fData float32) bool {
	return bool(C.SteamAPI_ISteamUserStats_SetStat0(getSteamUserStats(), unsafeCString(pchName), C.float(fData)))
}
func SteamAPI_ISteamUserStats_UpdateAvgRateStat(pchName string, flCountThisSession float32, dSessionLength float64) bool {
	return bool(C.SteamAPI_ISteamUserStats_UpdateAvgRateStat(getSteamUserStats(), unsafeCString(pchName), C.float(flCountThisSession), C.double(dSessionLength)))
}
func SteamAPI_ISteamUserStats_GetAchievement(pchName string, pbAchieved *bool) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetAchievement(getSteamUserStats(), unsafeCString(pchName), (*C.bool)(pbAchieved)))
}
func SteamAPI_ISteamUserStats_SetAchievement(pchName string) bool {
	return bool(C.SteamAPI_ISteamUserStats_SetAchievement(getSteamUserStats(), unsafeCString(pchName)))
}
func SteamAPI_ISteamUserStats_ClearAchievement(pchName string) bool {
	return bool(C.SteamAPI_ISteamUserStats_ClearAchievement(getSteamUserStats(), unsafeCString(pchName)))
}
func SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(pchName string, pbAchieved *bool, punUnlockTime *uint32) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(getSteamUserStats(), unsafeCString(pchName), (*C.bool)(pbAchieved), (*C.uint32)(punUnlockTime)))
}
func SteamAPI_ISteamUserStats_StoreStats() bool {
	return bool(C.SteamAPI_ISteamUserStats_StoreStats(getSteamUserStats()))
}
func SteamAPI_ISteamUserStats_GetAchievementIcon(pchName string) int32 {
	return int32(C.SteamAPI_ISteamUserStats_GetAchievementIcon(getSteamUserStats(), unsafeCString(pchName)))
}
func SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(pchName string, pchKey string) string {
	return C.GoString(C.SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(getSteamUserStats(), unsafeCString(pchName), unsafeCString(pchKey)))
}
func SteamAPI_ISteamUserStats_IndicateAchievementProgress(pchName string, nCurProgress uint32, nMaxProgress uint32) bool {
	return bool(C.SteamAPI_ISteamUserStats_IndicateAchievementProgress(getSteamUserStats(), unsafeCString(pchName), C.uint32(nCurProgress), C.uint32(nMaxProgress)))
}
func SteamAPI_ISteamUserStats_GetNumAchievements() uint32 {
	return uint32(C.SteamAPI_ISteamUserStats_GetNumAchievements(getSteamUserStats()))
}
func SteamAPI_ISteamUserStats_GetAchievementName(iAchievement uint32) string {
	return C.GoString(C.SteamAPI_ISteamUserStats_GetAchievementName(getSteamUserStats(), C.uint32(iAchievement)))
}
func SteamAPI_ISteamUserStats_RequestUserStats(steamIDUser SteamID) SteamAPICall {
	return C.SteamAPI_ISteamUserStats_RequestUserStats(getSteamUserStats(), C.CSteamID(steamIDUser))
}
func SteamAPI_ISteamUserStats_GetUserStat(steamIDUser SteamID, pchName string, pData *int32) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetUserStat(getSteamUserStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), (*C.int32)(pData)))
}
func SteamAPI_ISteamUserStats_GetUserStat0(steamIDUser SteamID, pchName string, pData *float32) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetUserStat0(getSteamUserStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), (*C.float)(pData)))
}
func SteamAPI_ISteamUserStats_GetUserAchievement(steamIDUser SteamID, pchName string, pbAchieved *bool) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetUserAchievement(getSteamUserStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), (*C.bool)(pbAchieved)))
}
func SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(steamIDUser SteamID, pchName string, pbAchieved *bool, punUnlockTime *uint32) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(getSteamUserStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), (*C.bool)(pbAchieved), (*C.uint32)(punUnlockTime)))
}
func SteamAPI_ISteamUserStats_ResetAllStats(bAchievementsToo bool) bool {
	return bool(C.SteamAPI_ISteamUserStats_ResetAllStats(getSteamUserStats(), C.bool(bAchievementsToo)))
}
func SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(pchLeaderboardName string, eLeaderboardSortMethod ELeaderboardSortMethod, eLeaderboardDisplayType ELeaderboardDisplayType) SteamAPICall {
	return C.SteamAPI_ISteamUserStats_FindOrCreateLeaderboard(getSteamUserStats(), unsafeCString(pchLeaderboardName), C.ELeaderboardSortMethod(eLeaderboardSortMethod), C.ELeaderboardDisplayType(eLeaderboardDisplayType))
}
func SteamAPI_ISteamUserStats_FindLeaderboard(pchLeaderboardName string) SteamAPICall {
	return C.SteamAPI_ISteamUserStats_FindLeaderboard(getSteamUserStats(), unsafeCString(pchLeaderboardName))
}
func SteamAPI_ISteamUserStats_GetLeaderboardName(hSteamLeaderboard SteamLeaderboard) string {
	return C.GoString(C.SteamAPI_ISteamUserStats_GetLeaderboardName(getSteamUserStats(), hSteamLeaderboard))
}
func SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(hSteamLeaderboard SteamLeaderboard) int32 {
	return int32(C.SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(getSteamUserStats(), hSteamLeaderboard))
}
func SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(hSteamLeaderboard SteamLeaderboard) ELeaderboardSortMethod {
	return ELeaderboardSortMethod(C.SteamAPI_ISteamUserStats_GetLeaderboardSortMethod(getSteamUserStats(), hSteamLeaderboard))
}
func SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(hSteamLeaderboard SteamLeaderboard) ELeaderboardDisplayType {
	return ELeaderboardDisplayType(C.SteamAPI_ISteamUserStats_GetLeaderboardDisplayType(getSteamUserStats(), hSteamLeaderboard))
}
func SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(hSteamLeaderboard SteamLeaderboard, eLeaderboardDataRequest ELeaderboardDataRequest, nRangeStart int32, nRangeEnd int32) SteamAPICall {
	return C.SteamAPI_ISteamUserStats_DownloadLeaderboardEntries(getSteamUserStats(), hSteamLeaderboard, C.ELeaderboardDataRequest(eLeaderboardDataRequest), C.int32(nRangeStart), C.int32(nRangeEnd))
}
func SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(hSteamLeaderboard SteamLeaderboard, prgUsers *SteamID, cUsers int32) SteamAPICall {
	return C.SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers(getSteamUserStats(), hSteamLeaderboard, (*C.CSteamID)(prgUsers), C.int32(cUsers))
}
func SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(hSteamLeaderboardEntries SteamLeaderboardEntries, index int32, pLeaderboardEntry *LeaderboardEntry, pDetails *int32, cDetailsMax int32) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry(getSteamUserStats(), hSteamLeaderboardEntries, C.int32(index), pLeaderboardEntry, (*C.int32)(pDetails), C.int32(cDetailsMax)))
}
func SteamAPI_ISteamUserStats_UploadLeaderboardScore(hSteamLeaderboard SteamLeaderboard, eLeaderboardUploadScoreMethod ELeaderboardUploadScoreMethod, nScore int32, pScoreDetails *int32, cScoreDetailsCount int32) SteamAPICall {
	return C.SteamAPI_ISteamUserStats_UploadLeaderboardScore(getSteamUserStats(), hSteamLeaderboard, C.ELeaderboardUploadScoreMethod(eLeaderboardUploadScoreMethod), C.int32(nScore), (*C.int32)(pScoreDetails), C.int32(cScoreDetailsCount))
}
func SteamAPI_ISteamUserStats_AttachLeaderboardUGC(hSteamLeaderboard SteamLeaderboard, hUGC UGCHandle) SteamAPICall {
	return C.SteamAPI_ISteamUserStats_AttachLeaderboardUGC(getSteamUserStats(), hSteamLeaderboard, hUGC)
}
func SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers() SteamAPICall {
	return C.SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(getSteamUserStats())
}
func SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages() SteamAPICall {
	return C.SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(getSteamUserStats())
}
func SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(pchName []byte, unNameBufLen uint32, pflPercent *float32, pbAchieved *bool) int32 {
	return int32(C.SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(getSteamUserStats(), unsafeCBytes(pchName), C.uint32(unNameBufLen), (*C.float)(pflPercent), (*C.bool)(pbAchieved)))
}
func SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(iIteratorPrevious int32, pchName []byte, unNameBufLen uint32, pflPercent *float32, pbAchieved *bool) int32 {
	return int32(C.SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(getSteamUserStats(), C.int32(iIteratorPrevious), unsafeCBytes(pchName), C.uint32(unNameBufLen), (*C.float)(pflPercent), (*C.bool)(pbAchieved)))
}
func SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(pchName string, pflPercent *float32) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(getSteamUserStats(), unsafeCString(pchName), (*C.float)(pflPercent)))
}
func SteamAPI_ISteamUserStats_RequestGlobalStats(nHistoryDays int32) SteamAPICall {
	return C.SteamAPI_ISteamUserStats_RequestGlobalStats(getSteamUserStats(), C.int32(nHistoryDays))
}
func SteamAPI_ISteamUserStats_GetGlobalStat(pchStatName string, pData *int64) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetGlobalStat(getSteamUserStats(), unsafeCString(pchStatName), (*C.int64)(pData)))
}
func SteamAPI_ISteamUserStats_GetGlobalStat0(pchStatName string, pData *float64) bool {
	return bool(C.SteamAPI_ISteamUserStats_GetGlobalStat0(getSteamUserStats(), unsafeCString(pchStatName), (*C.double)(pData)))
}
func SteamAPI_ISteamUserStats_GetGlobalStatHistory(pchStatName string, pData *int64, cubData uint32) int32 {
	return int32(C.SteamAPI_ISteamUserStats_GetGlobalStatHistory(getSteamUserStats(), unsafeCString(pchStatName), (*C.int64)(pData), C.uint32(cubData)))
}
func SteamAPI_ISteamUserStats_GetGlobalStatHistory0(pchStatName string, pData *float64, cubData uint32) int32 {
	return int32(C.SteamAPI_ISteamUserStats_GetGlobalStatHistory0(getSteamUserStats(), unsafeCString(pchStatName), (*C.double)(pData), C.uint32(cubData)))
}
func SteamAPI_ISteamApps_BIsSubscribed() bool {
	return bool(C.SteamAPI_ISteamApps_BIsSubscribed(getSteamApps()))
}
func SteamAPI_ISteamApps_BIsLowViolence() bool {
	return bool(C.SteamAPI_ISteamApps_BIsLowViolence(getSteamApps()))
}
func SteamAPI_ISteamApps_BIsCybercafe() bool {
	return bool(C.SteamAPI_ISteamApps_BIsCybercafe(getSteamApps()))
}
func SteamAPI_ISteamApps_BIsVACBanned() bool {
	return bool(C.SteamAPI_ISteamApps_BIsVACBanned(getSteamApps()))
}
func SteamAPI_ISteamApps_GetCurrentGameLanguage() string {
	return C.GoString(C.SteamAPI_ISteamApps_GetCurrentGameLanguage(getSteamApps()))
}
func SteamAPI_ISteamApps_GetAvailableGameLanguages() string {
	return C.GoString(C.SteamAPI_ISteamApps_GetAvailableGameLanguages(getSteamApps()))
}
func SteamAPI_ISteamApps_BIsSubscribedApp(appID AppId) bool {
	return bool(C.SteamAPI_ISteamApps_BIsSubscribedApp(getSteamApps(), appID))
}
func SteamAPI_ISteamApps_BIsDlcInstalled(appID AppId) bool {
	return bool(C.SteamAPI_ISteamApps_BIsDlcInstalled(getSteamApps(), appID))
}
func SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(nAppID AppId) uint32 {
	return uint32(C.SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(getSteamApps(), nAppID))
}
func SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend() bool {
	return bool(C.SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(getSteamApps()))
}
func SteamAPI_ISteamApps_GetDLCCount() int32 {
	return int32(C.SteamAPI_ISteamApps_GetDLCCount(getSteamApps()))
}
func SteamAPI_ISteamApps_BGetDLCDataByIndex(iDLC int32, pAppID *AppId, pbAvailable *bool, pchName []byte, cchNameBufferSize int32) bool {
	return bool(C.SteamAPI_ISteamApps_BGetDLCDataByIndex(getSteamApps(), C.int32(iDLC), pAppID, (*C.bool)(pbAvailable), unsafeCBytes(pchName), C.int32(cchNameBufferSize)))
}
func SteamAPI_ISteamApps_InstallDLC(nAppID AppId) {
	C.SteamAPI_ISteamApps_InstallDLC(getSteamApps(), nAppID)
}
func SteamAPI_ISteamApps_UninstallDLC(nAppID AppId) {
	C.SteamAPI_ISteamApps_UninstallDLC(getSteamApps(), nAppID)
}
func SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(nAppID AppId) {
	C.SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(getSteamApps(), nAppID)
}
func SteamAPI_ISteamApps_GetCurrentBetaName(pchName []byte, cchNameBufferSize int32) bool {
	return bool(C.SteamAPI_ISteamApps_GetCurrentBetaName(getSteamApps(), unsafeCBytes(pchName), C.int32(cchNameBufferSize)))
}
func SteamAPI_ISteamApps_MarkContentCorrupt(bMissingFilesOnly bool) bool {
	return bool(C.SteamAPI_ISteamApps_MarkContentCorrupt(getSteamApps(), C.bool(bMissingFilesOnly)))
}
func SteamAPI_ISteamApps_GetInstalledDepots(appID AppId, pvecDepots *DepotId, cMaxDepots uint32) uint32 {
	return uint32(C.SteamAPI_ISteamApps_GetInstalledDepots(getSteamApps(), appID, pvecDepots, C.uint32(cMaxDepots)))
}
func SteamAPI_ISteamApps_GetAppInstallDir(appID AppId, pchFolder []byte, cchFolderBufferSize uint32) uint32 {
	return uint32(C.SteamAPI_ISteamApps_GetAppInstallDir(getSteamApps(), appID, unsafeCBytes(pchFolder), C.uint32(cchFolderBufferSize)))
}
func SteamAPI_ISteamApps_BIsAppInstalled(appID AppId) bool {
	return bool(C.SteamAPI_ISteamApps_BIsAppInstalled(getSteamApps(), appID))
}
func SteamAPI_ISteamApps_GetAppOwner() SteamID {
	return SteamID(C.SteamAPI_ISteamApps_GetAppOwner(getSteamApps()))
}
func SteamAPI_ISteamApps_GetLaunchQueryParam(pchKey string) string {
	return C.GoString(C.SteamAPI_ISteamApps_GetLaunchQueryParam(getSteamApps(), unsafeCString(pchKey)))
}
func SteamAPI_ISteamApps_GetDlcDownloadProgress(nAppID AppId, punBytesDownloaded *uint64, punBytesTotal *uint64) bool {
	return bool(C.SteamAPI_ISteamApps_GetDlcDownloadProgress(getSteamApps(), nAppID, (*C.uint64)(punBytesDownloaded), (*C.uint64)(punBytesTotal)))
}
func SteamAPI_ISteamApps_GetAppBuildId() int32 {
	return int32(C.SteamAPI_ISteamApps_GetAppBuildId(getSteamApps()))
}
func SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys() {
	C.SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(getSteamApps())
}
func SteamAPI_ISteamApps_GetFileDetails(pszFileName string) SteamAPICall {
	return C.SteamAPI_ISteamApps_GetFileDetails(getSteamApps(), unsafeCString(pszFileName))
}
func SteamAPI_ISteamNetworking_SendP2PPacket(steamIDRemote SteamID, pubData unsafe.Pointer, cubData uint32, eP2PSendType EP2PSend, nChannel int32) bool {
	return bool(C.SteamAPI_ISteamNetworking_SendP2PPacket(getSteamNetworking(), C.CSteamID(steamIDRemote), pubData, C.uint32(cubData), C.EP2PSend(eP2PSendType), C.int32(nChannel)))
}
func SteamAPI_ISteamNetworking_IsP2PPacketAvailable(pcubMsgSize *uint32, nChannel int32) bool {
	return bool(C.SteamAPI_ISteamNetworking_IsP2PPacketAvailable(getSteamNetworking(), (*C.uint32)(pcubMsgSize), C.int32(nChannel)))
}
func SteamAPI_ISteamNetworking_ReadP2PPacket(pubDest unsafe.Pointer, cubDest uint32, pcubMsgSize *uint32, psteamIDRemote *SteamID, nChannel int32) bool {
	return bool(C.SteamAPI_ISteamNetworking_ReadP2PPacket(getSteamNetworking(), pubDest, C.uint32(cubDest), (*C.uint32)(pcubMsgSize), (*C.CSteamID)(psteamIDRemote), C.int32(nChannel)))
}
func SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(steamIDRemote SteamID) bool {
	return bool(C.SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(getSteamNetworking(), C.CSteamID(steamIDRemote)))
}
func SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(steamIDRemote SteamID) bool {
	return bool(C.SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(getSteamNetworking(), C.CSteamID(steamIDRemote)))
}
func SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(steamIDRemote SteamID, nChannel int32) bool {
	return bool(C.SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(getSteamNetworking(), C.CSteamID(steamIDRemote), C.int32(nChannel)))
}
func SteamAPI_ISteamNetworking_GetP2PSessionState(steamIDRemote SteamID, pConnectionState *P2PSessionState) bool {
	return bool(C.SteamAPI_ISteamNetworking_GetP2PSessionState(getSteamNetworking(), C.CSteamID(steamIDRemote), pConnectionState))
}
func SteamAPI_ISteamNetworking_AllowP2PPacketRelay(bAllow bool) bool {
	return bool(C.SteamAPI_ISteamNetworking_AllowP2PPacketRelay(getSteamNetworking(), C.bool(bAllow)))
}
func SteamAPI_ISteamNetworking_CreateListenSocket(nVirtualP2PPort int32, nIP uint32, nPort uint16, bAllowUseOfPacketRelay bool) SNetListenSocket {
	return C.SteamAPI_ISteamNetworking_CreateListenSocket(getSteamNetworking(), C.int32(nVirtualP2PPort), C.uint32(nIP), C.uint16(nPort), C.bool(bAllowUseOfPacketRelay))
}
func SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(steamIDTarget SteamID, nVirtualPort int32, nTimeoutSec int32, bAllowUseOfPacketRelay bool) SNetSocket {
	return C.SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(getSteamNetworking(), C.CSteamID(steamIDTarget), C.int32(nVirtualPort), C.int32(nTimeoutSec), C.bool(bAllowUseOfPacketRelay))
}
func SteamAPI_ISteamNetworking_CreateConnectionSocket(nIP uint32, nPort uint16, nTimeoutSec int32) SNetSocket {
	return C.SteamAPI_ISteamNetworking_CreateConnectionSocket(getSteamNetworking(), C.uint32(nIP), C.uint16(nPort), C.int32(nTimeoutSec))
}
func SteamAPI_ISteamNetworking_DestroySocket(hSocket SNetSocket, bNotifyRemoteEnd bool) bool {
	return bool(C.SteamAPI_ISteamNetworking_DestroySocket(getSteamNetworking(), hSocket, C.bool(bNotifyRemoteEnd)))
}
func SteamAPI_ISteamNetworking_DestroyListenSocket(hSocket SNetListenSocket, bNotifyRemoteEnd bool) bool {
	return bool(C.SteamAPI_ISteamNetworking_DestroyListenSocket(getSteamNetworking(), hSocket, C.bool(bNotifyRemoteEnd)))
}
func SteamAPI_ISteamNetworking_SendDataOnSocket(hSocket SNetSocket, pubData unsafe.Pointer, cubData uint32, bReliable bool) bool {
	return bool(C.SteamAPI_ISteamNetworking_SendDataOnSocket(getSteamNetworking(), hSocket, pubData, C.uint32(cubData), C.bool(bReliable)))
}
func SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(hSocket SNetSocket, pcubMsgSize *uint32) bool {
	return bool(C.SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(getSteamNetworking(), hSocket, (*C.uint32)(pcubMsgSize)))
}
func SteamAPI_ISteamNetworking_RetrieveDataFromSocket(hSocket SNetSocket, pubDest unsafe.Pointer, cubDest uint32, pcubMsgSize *uint32) bool {
	return bool(C.SteamAPI_ISteamNetworking_RetrieveDataFromSocket(getSteamNetworking(), hSocket, pubDest, C.uint32(cubDest), (*C.uint32)(pcubMsgSize)))
}
func SteamAPI_ISteamNetworking_IsDataAvailable(hListenSocket SNetListenSocket, pcubMsgSize *uint32, phSocket *SNetSocket) bool {
	return bool(C.SteamAPI_ISteamNetworking_IsDataAvailable(getSteamNetworking(), hListenSocket, (*C.uint32)(pcubMsgSize), phSocket))
}
func SteamAPI_ISteamNetworking_RetrieveData(hListenSocket SNetListenSocket, pubDest unsafe.Pointer, cubDest uint32, pcubMsgSize *uint32, phSocket *SNetSocket) bool {
	return bool(C.SteamAPI_ISteamNetworking_RetrieveData(getSteamNetworking(), hListenSocket, pubDest, C.uint32(cubDest), (*C.uint32)(pcubMsgSize), phSocket))
}
func SteamAPI_ISteamNetworking_GetSocketInfo(hSocket SNetSocket, pSteamIDRemote *SteamID, peSocketStatus *int32, punIPRemote *uint32, punPortRemote *uint16) bool {
	return bool(C.SteamAPI_ISteamNetworking_GetSocketInfo(getSteamNetworking(), hSocket, (*C.CSteamID)(pSteamIDRemote), (*C.int32)(peSocketStatus), (*C.uint32)(punIPRemote), (*C.uint16)(punPortRemote)))
}
func SteamAPI_ISteamNetworking_GetListenSocketInfo(hListenSocket SNetListenSocket, pnIP *uint32, pnPort *uint16) bool {
	return bool(C.SteamAPI_ISteamNetworking_GetListenSocketInfo(getSteamNetworking(), hListenSocket, (*C.uint32)(pnIP), (*C.uint16)(pnPort)))
}
func SteamAPI_ISteamNetworking_GetSocketConnectionType(hSocket SNetSocket) ESNetSocketConnectionType {
	return ESNetSocketConnectionType(C.SteamAPI_ISteamNetworking_GetSocketConnectionType(getSteamNetworking(), hSocket))
}
func SteamAPI_ISteamNetworking_GetMaxPacketSize(hSocket SNetSocket) int32 {
	return int32(C.SteamAPI_ISteamNetworking_GetMaxPacketSize(getSteamNetworking(), hSocket))
}
func SteamAPI_ISteamScreenshots_WriteScreenshot(pubRGB unsafe.Pointer, cubRGB uint32, nWidth int32, nHeight int32) ScreenshotHandle {
	return C.SteamAPI_ISteamScreenshots_WriteScreenshot(getSteamScreenshots(), pubRGB, C.uint32(cubRGB), C.int32(nWidth), C.int32(nHeight))
}
func SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(pchFilename string, pchThumbnailFilename string, nWidth int32, nHeight int32) ScreenshotHandle {
	return C.SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(getSteamScreenshots(), unsafeCString(pchFilename), unsafeCString(pchThumbnailFilename), C.int32(nWidth), C.int32(nHeight))
}
func SteamAPI_ISteamScreenshots_TriggerScreenshot() {
	C.SteamAPI_ISteamScreenshots_TriggerScreenshot(getSteamScreenshots())
}
func SteamAPI_ISteamScreenshots_HookScreenshots(bHook bool) {
	C.SteamAPI_ISteamScreenshots_HookScreenshots(getSteamScreenshots(), C.bool(bHook))
}
func SteamAPI_ISteamScreenshots_SetLocation(hScreenshot ScreenshotHandle, pchLocation string) bool {
	return bool(C.SteamAPI_ISteamScreenshots_SetLocation(getSteamScreenshots(), hScreenshot, unsafeCString(pchLocation)))
}
func SteamAPI_ISteamScreenshots_TagUser(hScreenshot ScreenshotHandle, steamID SteamID) bool {
	return bool(C.SteamAPI_ISteamScreenshots_TagUser(getSteamScreenshots(), hScreenshot, C.CSteamID(steamID)))
}
func SteamAPI_ISteamScreenshots_TagPublishedFile(hScreenshot ScreenshotHandle, unPublishedFileID PublishedFileId) bool {
	return bool(C.SteamAPI_ISteamScreenshots_TagPublishedFile(getSteamScreenshots(), hScreenshot, unPublishedFileID))
}
func SteamAPI_ISteamScreenshots_IsScreenshotsHooked() bool {
	return bool(C.SteamAPI_ISteamScreenshots_IsScreenshotsHooked(getSteamScreenshots()))
}
func SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(eType EVRScreenshotType, pchFilename string, pchVRFilename string) ScreenshotHandle {
	return C.SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary(getSteamScreenshots(), C.EVRScreenshotType(eType), unsafeCString(pchFilename), unsafeCString(pchVRFilename))
}
func SteamAPI_ISteamMusic_BIsEnabled() bool {
	return bool(C.SteamAPI_ISteamMusic_BIsEnabled(getSteamMusic()))
}
func SteamAPI_ISteamMusic_BIsPlaying() bool {
	return bool(C.SteamAPI_ISteamMusic_BIsPlaying(getSteamMusic()))
}
func SteamAPI_ISteamMusic_GetPlaybackStatus() EAudioPlayback {
	return EAudioPlayback(C.SteamAPI_ISteamMusic_GetPlaybackStatus(getSteamMusic()))
}
func SteamAPI_ISteamMusic_Play() {
	C.SteamAPI_ISteamMusic_Play(getSteamMusic())
}
func SteamAPI_ISteamMusic_Pause() {
	C.SteamAPI_ISteamMusic_Pause(getSteamMusic())
}
func SteamAPI_ISteamMusic_PlayPrevious() {
	C.SteamAPI_ISteamMusic_PlayPrevious(getSteamMusic())
}
func SteamAPI_ISteamMusic_PlayNext() {
	C.SteamAPI_ISteamMusic_PlayNext(getSteamMusic())
}
func SteamAPI_ISteamMusic_SetVolume(flVolume float32) {
	C.SteamAPI_ISteamMusic_SetVolume(getSteamMusic(), C.float(flVolume))
}
func SteamAPI_ISteamMusic_GetVolume() float32 {
	return float32(C.SteamAPI_ISteamMusic_GetVolume(getSteamMusic()))
}
func SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(pchName string) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(getSteamMusicRemote(), unsafeCString(pchName)))
}
func SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(getSteamMusicRemote()))
}
func SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(getSteamMusicRemote()))
}
func SteamAPI_ISteamMusicRemote_BActivationSuccess(bValue bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_BActivationSuccess(getSteamMusicRemote(), C.bool(bValue)))
}
func SteamAPI_ISteamMusicRemote_SetDisplayName(pchDisplayName string) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_SetDisplayName(getSteamMusicRemote(), unsafeCString(pchDisplayName)))
}
func SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(pvBuffer unsafe.Pointer, cbBufferLength uint32) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(getSteamMusicRemote(), pvBuffer, C.uint32(cbBufferLength)))
}
func SteamAPI_ISteamMusicRemote_EnablePlayPrevious(bValue bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_EnablePlayPrevious(getSteamMusicRemote(), C.bool(bValue)))
}
func SteamAPI_ISteamMusicRemote_EnablePlayNext(bValue bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_EnablePlayNext(getSteamMusicRemote(), C.bool(bValue)))
}
func SteamAPI_ISteamMusicRemote_EnableShuffled(bValue bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_EnableShuffled(getSteamMusicRemote(), C.bool(bValue)))
}
func SteamAPI_ISteamMusicRemote_EnableLooped(bValue bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_EnableLooped(getSteamMusicRemote(), C.bool(bValue)))
}
func SteamAPI_ISteamMusicRemote_EnableQueue(bValue bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_EnableQueue(getSteamMusicRemote(), C.bool(bValue)))
}
func SteamAPI_ISteamMusicRemote_EnablePlaylists(bValue bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_EnablePlaylists(getSteamMusicRemote(), C.bool(bValue)))
}
func SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(nStatus EAudioPlayback) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus(getSteamMusicRemote(), C.EAudioPlayback(nStatus)))
}
func SteamAPI_ISteamMusicRemote_UpdateShuffled(bValue bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_UpdateShuffled(getSteamMusicRemote(), C.bool(bValue)))
}
func SteamAPI_ISteamMusicRemote_UpdateLooped(bValue bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_UpdateLooped(getSteamMusicRemote(), C.bool(bValue)))
}
func SteamAPI_ISteamMusicRemote_UpdateVolume(flValue float32) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_UpdateVolume(getSteamMusicRemote(), C.float(flValue)))
}
func SteamAPI_ISteamMusicRemote_CurrentEntryWillChange() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(getSteamMusicRemote()))
}
func SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(bAvailable bool) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(getSteamMusicRemote(), C.bool(bAvailable)))
}
func SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(pchText string) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(getSteamMusicRemote(), unsafeCString(pchText)))
}
func SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(nValue int32) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(getSteamMusicRemote(), C.int32(nValue)))
}
func SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(pvBuffer unsafe.Pointer, cbBufferLength uint32) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(getSteamMusicRemote(), pvBuffer, C.uint32(cbBufferLength)))
}
func SteamAPI_ISteamMusicRemote_CurrentEntryDidChange() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(getSteamMusicRemote()))
}
func SteamAPI_ISteamMusicRemote_QueueWillChange() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_QueueWillChange(getSteamMusicRemote()))
}
func SteamAPI_ISteamMusicRemote_ResetQueueEntries() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_ResetQueueEntries(getSteamMusicRemote()))
}
func SteamAPI_ISteamMusicRemote_SetQueueEntry(nID int32, nPosition int32, pchEntryText string) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_SetQueueEntry(getSteamMusicRemote(), C.int32(nID), C.int32(nPosition), unsafeCString(pchEntryText)))
}
func SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(nID int32) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(getSteamMusicRemote(), C.int32(nID)))
}
func SteamAPI_ISteamMusicRemote_QueueDidChange() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_QueueDidChange(getSteamMusicRemote()))
}
func SteamAPI_ISteamMusicRemote_PlaylistWillChange() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_PlaylistWillChange(getSteamMusicRemote()))
}
func SteamAPI_ISteamMusicRemote_ResetPlaylistEntries() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(getSteamMusicRemote()))
}
func SteamAPI_ISteamMusicRemote_SetPlaylistEntry(nID int32, nPosition int32, pchEntryText string) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_SetPlaylistEntry(getSteamMusicRemote(), C.int32(nID), C.int32(nPosition), unsafeCString(pchEntryText)))
}
func SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(nID int32) bool {
	return bool(C.SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(getSteamMusicRemote(), C.int32(nID)))
}
func SteamAPI_ISteamMusicRemote_PlaylistDidChange() bool {
	return bool(C.SteamAPI_ISteamMusicRemote_PlaylistDidChange(getSteamMusicRemote()))
}
func SteamAPI_ISteamHTTP_CreateHTTPRequest(eHTTPRequestMethod EHTTPMethod, pchAbsoluteURL string) HTTPRequestHandle {
	return C.SteamAPI_ISteamHTTP_CreateHTTPRequest(getSteamHTTP(), C.EHTTPMethod(eHTTPRequestMethod), unsafeCString(pchAbsoluteURL))
}
func SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(hRequest HTTPRequestHandle, ulContextValue uint64) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(getSteamHTTP(), hRequest, C.uint64(ulContextValue)))
}
func SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(hRequest HTTPRequestHandle, unTimeoutSeconds uint32) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(getSteamHTTP(), hRequest, C.uint32(unTimeoutSeconds)))
}
func SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(hRequest HTTPRequestHandle, pchHeaderName string, pchHeaderValue string) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(getSteamHTTP(), hRequest, unsafeCString(pchHeaderName), unsafeCString(pchHeaderValue)))
}
func SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(hRequest HTTPRequestHandle, pchParamName string, pchParamValue string) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(getSteamHTTP(), hRequest, unsafeCString(pchParamName), unsafeCString(pchParamValue)))
}
func SteamAPI_ISteamHTTP_SendHTTPRequest(hRequest HTTPRequestHandle, pCallHandle *SteamAPICall) bool {
	return bool(C.SteamAPI_ISteamHTTP_SendHTTPRequest(getSteamHTTP(), hRequest, pCallHandle))
}
func SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(hRequest HTTPRequestHandle, pCallHandle *SteamAPICall) bool {
	return bool(C.SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(getSteamHTTP(), hRequest, pCallHandle))
}
func SteamAPI_ISteamHTTP_DeferHTTPRequest(hRequest HTTPRequestHandle) bool {
	return bool(C.SteamAPI_ISteamHTTP_DeferHTTPRequest(getSteamHTTP(), hRequest))
}
func SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(hRequest HTTPRequestHandle) bool {
	return bool(C.SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(getSteamHTTP(), hRequest))
}
func SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(hRequest HTTPRequestHandle, pchHeaderName string, unResponseHeaderSize *uint32) bool {
	return bool(C.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(getSteamHTTP(), hRequest, unsafeCString(pchHeaderName), (*C.uint32)(unResponseHeaderSize)))
}
func SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(hRequest HTTPRequestHandle, pchHeaderName string, pHeaderValueBuffer *uint8, unBufferSize uint32) bool {
	return bool(C.SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(getSteamHTTP(), hRequest, unsafeCString(pchHeaderName), (*C.uint8)(pHeaderValueBuffer), C.uint32(unBufferSize)))
}
func SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(hRequest HTTPRequestHandle, unBodySize *uint32) bool {
	return bool(C.SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(getSteamHTTP(), hRequest, (*C.uint32)(unBodySize)))
}
func SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(hRequest HTTPRequestHandle, pBodyDataBuffer *uint8, unBufferSize uint32) bool {
	return bool(C.SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(getSteamHTTP(), hRequest, (*C.uint8)(pBodyDataBuffer), C.uint32(unBufferSize)))
}
func SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(hRequest HTTPRequestHandle, cOffset uint32, pBodyDataBuffer *uint8, unBufferSize uint32) bool {
	return bool(C.SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(getSteamHTTP(), hRequest, C.uint32(cOffset), (*C.uint8)(pBodyDataBuffer), C.uint32(unBufferSize)))
}
func SteamAPI_ISteamHTTP_ReleaseHTTPRequest(hRequest HTTPRequestHandle) bool {
	return bool(C.SteamAPI_ISteamHTTP_ReleaseHTTPRequest(getSteamHTTP(), hRequest))
}
func SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(hRequest HTTPRequestHandle, pflPercentOut *float32) bool {
	return bool(C.SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(getSteamHTTP(), hRequest, (*C.float)(pflPercentOut)))
}
func SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(hRequest HTTPRequestHandle, pchContentType string, pubBody *uint8, unBodyLen uint32) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(getSteamHTTP(), hRequest, unsafeCString(pchContentType), (*C.uint8)(pubBody), C.uint32(unBodyLen)))
}
func SteamAPI_ISteamHTTP_CreateCookieContainer(bAllowResponsesToModify bool) HTTPCookieContainerHandle {
	return C.SteamAPI_ISteamHTTP_CreateCookieContainer(getSteamHTTP(), C.bool(bAllowResponsesToModify))
}
func SteamAPI_ISteamHTTP_ReleaseCookieContainer(hCookieContainer HTTPCookieContainerHandle) bool {
	return bool(C.SteamAPI_ISteamHTTP_ReleaseCookieContainer(getSteamHTTP(), hCookieContainer))
}
func SteamAPI_ISteamHTTP_SetCookie(hCookieContainer HTTPCookieContainerHandle, pchHost string, pchUrl string, pchCookie string) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetCookie(getSteamHTTP(), hCookieContainer, unsafeCString(pchHost), unsafeCString(pchUrl), unsafeCString(pchCookie)))
}
func SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(hRequest HTTPRequestHandle, hCookieContainer HTTPCookieContainerHandle) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(getSteamHTTP(), hRequest, hCookieContainer))
}
func SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(hRequest HTTPRequestHandle, pchUserAgentInfo string) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(getSteamHTTP(), hRequest, unsafeCString(pchUserAgentInfo)))
}
func SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(hRequest HTTPRequestHandle, bRequireVerifiedCertificate bool) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(getSteamHTTP(), hRequest, C.bool(bRequireVerifiedCertificate)))
}
func SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(hRequest HTTPRequestHandle, unMilliseconds uint32) bool {
	return bool(C.SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(getSteamHTTP(), hRequest, C.uint32(unMilliseconds)))
}
func SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(hRequest HTTPRequestHandle, pbWasTimedOut *bool) bool {
	return bool(C.SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(getSteamHTTP(), hRequest, (*C.bool)(pbWasTimedOut)))
}
func SteamAPI_ISteamController_Init() bool {
	return bool(C.SteamAPI_ISteamController_Init(getSteamController()))
}
func SteamAPI_ISteamController_Shutdown() bool {
	return bool(C.SteamAPI_ISteamController_Shutdown(getSteamController()))
}
func SteamAPI_ISteamController_RunFrame() {
	C.SteamAPI_ISteamController_RunFrame(getSteamController())
}
func SteamAPI_ISteamController_GetConnectedControllers(handlesOut *ControllerHandle) int32 {
	return int32(C.SteamAPI_ISteamController_GetConnectedControllers(getSteamController(), handlesOut))
}
func SteamAPI_ISteamController_ShowBindingPanel(controllerHandle ControllerHandle) bool {
	return bool(C.SteamAPI_ISteamController_ShowBindingPanel(getSteamController(), controllerHandle))
}
func SteamAPI_ISteamController_GetActionSetHandle(pszActionSetName string) ControllerActionSetHandle {
	return C.SteamAPI_ISteamController_GetActionSetHandle(getSteamController(), unsafeCString(pszActionSetName))
}
func SteamAPI_ISteamController_ActivateActionSet(controllerHandle ControllerHandle, actionSetHandle ControllerActionSetHandle) {
	C.SteamAPI_ISteamController_ActivateActionSet(getSteamController(), controllerHandle, actionSetHandle)
}
func SteamAPI_ISteamController_GetCurrentActionSet(controllerHandle ControllerHandle) ControllerActionSetHandle {
	return C.SteamAPI_ISteamController_GetCurrentActionSet(getSteamController(), controllerHandle)
}
func SteamAPI_ISteamController_ActivateActionSetLayer(controllerHandle ControllerHandle, actionSetLayerHandle ControllerActionSetHandle) {
	C.SteamAPI_ISteamController_ActivateActionSetLayer(getSteamController(), controllerHandle, actionSetLayerHandle)
}
func SteamAPI_ISteamController_DeactivateActionSetLayer(controllerHandle ControllerHandle, actionSetLayerHandle ControllerActionSetHandle) {
	C.SteamAPI_ISteamController_DeactivateActionSetLayer(getSteamController(), controllerHandle, actionSetLayerHandle)
}
func SteamAPI_ISteamController_DeactivateAllActionSetLayers(controllerHandle ControllerHandle) {
	C.SteamAPI_ISteamController_DeactivateAllActionSetLayers(getSteamController(), controllerHandle)
}
func SteamAPI_ISteamController_GetActiveActionSetLayers(controllerHandle ControllerHandle, handlesOut *ControllerActionSetHandle) int32 {
	return int32(C.SteamAPI_ISteamController_GetActiveActionSetLayers(getSteamController(), controllerHandle, handlesOut))
}
func SteamAPI_ISteamController_GetDigitalActionHandle(pszActionName string) ControllerDigitalActionHandle {
	return C.SteamAPI_ISteamController_GetDigitalActionHandle(getSteamController(), unsafeCString(pszActionName))
}
func SteamAPI_ISteamController_GetDigitalActionData(controllerHandle ControllerHandle, digitalActionHandle ControllerDigitalActionHandle) ControllerDigitalActionData {
	return C.SteamAPI_ISteamController_GetDigitalActionData(getSteamController(), controllerHandle, digitalActionHandle)
}
func SteamAPI_ISteamController_GetDigitalActionOrigins(controllerHandle ControllerHandle, actionSetHandle ControllerActionSetHandle, digitalActionHandle ControllerDigitalActionHandle, originsOut *EControllerActionOrigin) int32 {
	return int32(C.SteamAPI_ISteamController_GetDigitalActionOrigins(getSteamController(), controllerHandle, actionSetHandle, digitalActionHandle, (*C.EControllerActionOrigin)(originsOut)))
}
func SteamAPI_ISteamController_GetAnalogActionHandle(pszActionName string) ControllerAnalogActionHandle {
	return C.SteamAPI_ISteamController_GetAnalogActionHandle(getSteamController(), unsafeCString(pszActionName))
}
func SteamAPI_ISteamController_GetAnalogActionData(controllerHandle ControllerHandle, analogActionHandle ControllerAnalogActionHandle) ControllerAnalogActionData {
	return C.SteamAPI_ISteamController_GetAnalogActionData(getSteamController(), controllerHandle, analogActionHandle)
}
func SteamAPI_ISteamController_GetAnalogActionOrigins(controllerHandle ControllerHandle, actionSetHandle ControllerActionSetHandle, analogActionHandle ControllerAnalogActionHandle, originsOut *EControllerActionOrigin) int32 {
	return int32(C.SteamAPI_ISteamController_GetAnalogActionOrigins(getSteamController(), controllerHandle, actionSetHandle, analogActionHandle, (*C.EControllerActionOrigin)(originsOut)))
}
func SteamAPI_ISteamController_StopAnalogActionMomentum(controllerHandle ControllerHandle, eAction ControllerAnalogActionHandle) {
	C.SteamAPI_ISteamController_StopAnalogActionMomentum(getSteamController(), controllerHandle, eAction)
}
func SteamAPI_ISteamController_TriggerHapticPulse(controllerHandle ControllerHandle, eTargetPad ESteamControllerPad, usDurationMicroSec uint16) {
	C.SteamAPI_ISteamController_TriggerHapticPulse(getSteamController(), controllerHandle, C.ESteamControllerPad(eTargetPad), C.uint16(usDurationMicroSec))
}
func SteamAPI_ISteamController_TriggerRepeatedHapticPulse(controllerHandle ControllerHandle, eTargetPad ESteamControllerPad, usDurationMicroSec uint16, usOffMicroSec uint16, unRepeat uint16, nFlags uint32) {
	C.SteamAPI_ISteamController_TriggerRepeatedHapticPulse(getSteamController(), controllerHandle, C.ESteamControllerPad(eTargetPad), C.uint16(usDurationMicroSec), C.uint16(usOffMicroSec), C.uint16(unRepeat), C.uint32(nFlags))
}
func SteamAPI_ISteamController_TriggerVibration(controllerHandle ControllerHandle, usLeftSpeed uint16, usRightSpeed uint16) {
	C.SteamAPI_ISteamController_TriggerVibration(getSteamController(), controllerHandle, C.uint16(usLeftSpeed), C.uint16(usRightSpeed))
}
func SteamAPI_ISteamController_SetLEDColor(controllerHandle ControllerHandle, nColorR uint8, nColorG uint8, nColorB uint8, nFlags uint32) {
	C.SteamAPI_ISteamController_SetLEDColor(getSteamController(), controllerHandle, C.uint8(nColorR), C.uint8(nColorG), C.uint8(nColorB), C.uint32(nFlags))
}
func SteamAPI_ISteamController_GetGamepadIndexForController(ulControllerHandle ControllerHandle) int32 {
	return int32(C.SteamAPI_ISteamController_GetGamepadIndexForController(getSteamController(), ulControllerHandle))
}
func SteamAPI_ISteamController_GetControllerForGamepadIndex(nIndex int32) ControllerHandle {
	return C.SteamAPI_ISteamController_GetControllerForGamepadIndex(getSteamController(), C.int32(nIndex))
}
func SteamAPI_ISteamController_GetMotionData(controllerHandle ControllerHandle) ControllerMotionData {
	return C.SteamAPI_ISteamController_GetMotionData(getSteamController(), controllerHandle)
}
func SteamAPI_ISteamController_ShowDigitalActionOrigins(controllerHandle ControllerHandle, digitalActionHandle ControllerDigitalActionHandle, flScale float32, flXPosition float32, flYPosition float32) bool {
	return bool(C.SteamAPI_ISteamController_ShowDigitalActionOrigins(getSteamController(), controllerHandle, digitalActionHandle, C.float(flScale), C.float(flXPosition), C.float(flYPosition)))
}
func SteamAPI_ISteamController_ShowAnalogActionOrigins(controllerHandle ControllerHandle, analogActionHandle ControllerAnalogActionHandle, flScale float32, flXPosition float32, flYPosition float32) bool {
	return bool(C.SteamAPI_ISteamController_ShowAnalogActionOrigins(getSteamController(), controllerHandle, analogActionHandle, C.float(flScale), C.float(flXPosition), C.float(flYPosition)))
}
func SteamAPI_ISteamController_GetStringForActionOrigin(eOrigin EControllerActionOrigin) string {
	return C.GoString(C.SteamAPI_ISteamController_GetStringForActionOrigin(getSteamController(), C.EControllerActionOrigin(eOrigin)))
}
func SteamAPI_ISteamController_GetGlyphForActionOrigin(eOrigin EControllerActionOrigin) string {
	return C.GoString(C.SteamAPI_ISteamController_GetGlyphForActionOrigin(getSteamController(), C.EControllerActionOrigin(eOrigin)))
}
func SteamAPI_ISteamController_GetInputTypeForHandle(controllerHandle ControllerHandle) ESteamInputType {
	return ESteamInputType(C.SteamAPI_ISteamController_GetInputTypeForHandle(getSteamController(), controllerHandle))
}
func SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(unAccountID AccountID, eListType EUserUGCList, eMatchingUGCType EUGCMatchingUGCType, eSortOrder EUserUGCListSortOrder, nCreatorAppID AppId, nConsumerAppID AppId, unPage uint32) UGCQueryHandle {
	return C.SteamAPI_ISteamUGC_CreateQueryUserUGCRequest(getSteamUGC(), unAccountID, C.EUserUGCList(eListType), C.EUGCMatchingUGCType(eMatchingUGCType), C.EUserUGCListSortOrder(eSortOrder), nCreatorAppID, nConsumerAppID, C.uint32(unPage))
}
func SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(eQueryType EUGCQuery, eMatchingeMatchingUGCTypeFileType EUGCMatchingUGCType, nCreatorAppID AppId, nConsumerAppID AppId, unPage uint32) UGCQueryHandle {
	return C.SteamAPI_ISteamUGC_CreateQueryAllUGCRequest(getSteamUGC(), C.EUGCQuery(eQueryType), C.EUGCMatchingUGCType(eMatchingeMatchingUGCTypeFileType), nCreatorAppID, nConsumerAppID, C.uint32(unPage))
}
func SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(pvecPublishedFileID *PublishedFileId, unNumPublishedFileIDs uint32) UGCQueryHandle {
	return C.SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(getSteamUGC(), pvecPublishedFileID, C.uint32(unNumPublishedFileIDs))
}
func SteamAPI_ISteamUGC_SendQueryUGCRequest(handle UGCQueryHandle) SteamAPICall {
	return C.SteamAPI_ISteamUGC_SendQueryUGCRequest(getSteamUGC(), handle)
}
func SteamAPI_ISteamUGC_GetQueryUGCResult(handle UGCQueryHandle, index uint32, pDetails *SteamUGCDetails) bool {
	return bool(C.SteamAPI_ISteamUGC_GetQueryUGCResult(getSteamUGC(), handle, C.uint32(index), pDetails))
}
func SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(handle UGCQueryHandle, index uint32, pchURL []byte, cchURLSize uint32) bool {
	return bool(C.SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(getSteamUGC(), handle, C.uint32(index), unsafeCBytes(pchURL), C.uint32(cchURLSize)))
}
func SteamAPI_ISteamUGC_GetQueryUGCMetadata(handle UGCQueryHandle, index uint32, pchMetadata []byte, cchMetadatasize uint32) bool {
	return bool(C.SteamAPI_ISteamUGC_GetQueryUGCMetadata(getSteamUGC(), handle, C.uint32(index), unsafeCBytes(pchMetadata), C.uint32(cchMetadatasize)))
}
func SteamAPI_ISteamUGC_GetQueryUGCChildren(handle UGCQueryHandle, index uint32, pvecPublishedFileID *PublishedFileId, cMaxEntries uint32) bool {
	return bool(C.SteamAPI_ISteamUGC_GetQueryUGCChildren(getSteamUGC(), handle, C.uint32(index), pvecPublishedFileID, C.uint32(cMaxEntries)))
}
func SteamAPI_ISteamUGC_GetQueryUGCStatistic(handle UGCQueryHandle, index uint32, eStatType EItemStatistic, pStatValue *uint64) bool {
	return bool(C.SteamAPI_ISteamUGC_GetQueryUGCStatistic(getSteamUGC(), handle, C.uint32(index), C.EItemStatistic(eStatType), (*C.uint64)(pStatValue)))
}
func SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(handle UGCQueryHandle, index uint32) uint32 {
	return uint32(C.SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(getSteamUGC(), handle, C.uint32(index)))
}
func SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(handle UGCQueryHandle, index uint32, previewIndex uint32, pchURLOrVideoID []byte, cchURLSize uint32, pchOriginalFileName []byte, cchOriginalFileNameSize uint32, pPreviewType *EItemPreviewType) bool {
	return bool(C.SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview(getSteamUGC(), handle, C.uint32(index), C.uint32(previewIndex), unsafeCBytes(pchURLOrVideoID), C.uint32(cchURLSize), unsafeCBytes(pchOriginalFileName), C.uint32(cchOriginalFileNameSize), (*C.EItemPreviewType)(pPreviewType)))
}
func SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(handle UGCQueryHandle, index uint32) uint32 {
	return uint32(C.SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(getSteamUGC(), handle, C.uint32(index)))
}
func SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(handle UGCQueryHandle, index uint32, keyValueTagIndex uint32, pchKey []byte, cchKeySize uint32, pchValue []byte, cchValueSize uint32) bool {
	return bool(C.SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(getSteamUGC(), handle, C.uint32(index), C.uint32(keyValueTagIndex), unsafeCBytes(pchKey), C.uint32(cchKeySize), unsafeCBytes(pchValue), C.uint32(cchValueSize)))
}
func SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(handle UGCQueryHandle) bool {
	return bool(C.SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(getSteamUGC(), handle))
}
func SteamAPI_ISteamUGC_AddRequiredTag(handle UGCQueryHandle, pTagName string) bool {
	return bool(C.SteamAPI_ISteamUGC_AddRequiredTag(getSteamUGC(), handle, unsafeCString(pTagName)))
}
func SteamAPI_ISteamUGC_AddExcludedTag(handle UGCQueryHandle, pTagName string) bool {
	return bool(C.SteamAPI_ISteamUGC_AddExcludedTag(getSteamUGC(), handle, unsafeCString(pTagName)))
}
func SteamAPI_ISteamUGC_SetReturnOnlyIDs(handle UGCQueryHandle, bReturnOnlyIDs bool) bool {
	return bool(C.SteamAPI_ISteamUGC_SetReturnOnlyIDs(getSteamUGC(), handle, C.bool(bReturnOnlyIDs)))
}
func SteamAPI_ISteamUGC_SetReturnKeyValueTags(handle UGCQueryHandle, bReturnKeyValueTags bool) bool {
	return bool(C.SteamAPI_ISteamUGC_SetReturnKeyValueTags(getSteamUGC(), handle, C.bool(bReturnKeyValueTags)))
}
func SteamAPI_ISteamUGC_SetReturnLongDescription(handle UGCQueryHandle, bReturnLongDescription bool) bool {
	return bool(C.SteamAPI_ISteamUGC_SetReturnLongDescription(getSteamUGC(), handle, C.bool(bReturnLongDescription)))
}
func SteamAPI_ISteamUGC_SetReturnMetadata(handle UGCQueryHandle, bReturnMetadata bool) bool {
	return bool(C.SteamAPI_ISteamUGC_SetReturnMetadata(getSteamUGC(), handle, C.bool(bReturnMetadata)))
}
func SteamAPI_ISteamUGC_SetReturnChildren(handle UGCQueryHandle, bReturnChildren bool) bool {
	return bool(C.SteamAPI_ISteamUGC_SetReturnChildren(getSteamUGC(), handle, C.bool(bReturnChildren)))
}
func SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(handle UGCQueryHandle, bReturnAdditionalPreviews bool) bool {
	return bool(C.SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(getSteamUGC(), handle, C.bool(bReturnAdditionalPreviews)))
}
func SteamAPI_ISteamUGC_SetReturnTotalOnly(handle UGCQueryHandle, bReturnTotalOnly bool) bool {
	return bool(C.SteamAPI_ISteamUGC_SetReturnTotalOnly(getSteamUGC(), handle, C.bool(bReturnTotalOnly)))
}
func SteamAPI_ISteamUGC_SetReturnPlaytimeStats(handle UGCQueryHandle, unDays uint32) bool {
	return bool(C.SteamAPI_ISteamUGC_SetReturnPlaytimeStats(getSteamUGC(), handle, C.uint32(unDays)))
}
func SteamAPI_ISteamUGC_SetLanguage(handle UGCQueryHandle, pchLanguage string) bool {
	return bool(C.SteamAPI_ISteamUGC_SetLanguage(getSteamUGC(), handle, unsafeCString(pchLanguage)))
}
func SteamAPI_ISteamUGC_SetAllowCachedResponse(handle UGCQueryHandle, unMaxAgeSeconds uint32) bool {
	return bool(C.SteamAPI_ISteamUGC_SetAllowCachedResponse(getSteamUGC(), handle, C.uint32(unMaxAgeSeconds)))
}
func SteamAPI_ISteamUGC_SetCloudFileNameFilter(handle UGCQueryHandle, pMatchCloudFileName string) bool {
	return bool(C.SteamAPI_ISteamUGC_SetCloudFileNameFilter(getSteamUGC(), handle, unsafeCString(pMatchCloudFileName)))
}
func SteamAPI_ISteamUGC_SetMatchAnyTag(handle UGCQueryHandle, bMatchAnyTag bool) bool {
	return bool(C.SteamAPI_ISteamUGC_SetMatchAnyTag(getSteamUGC(), handle, C.bool(bMatchAnyTag)))
}
func SteamAPI_ISteamUGC_SetSearchText(handle UGCQueryHandle, pSearchText string) bool {
	return bool(C.SteamAPI_ISteamUGC_SetSearchText(getSteamUGC(), handle, unsafeCString(pSearchText)))
}
func SteamAPI_ISteamUGC_SetRankedByTrendDays(handle UGCQueryHandle, unDays uint32) bool {
	return bool(C.SteamAPI_ISteamUGC_SetRankedByTrendDays(getSteamUGC(), handle, C.uint32(unDays)))
}
func SteamAPI_ISteamUGC_AddRequiredKeyValueTag(handle UGCQueryHandle, pKey string, pValue string) bool {
	return bool(C.SteamAPI_ISteamUGC_AddRequiredKeyValueTag(getSteamUGC(), handle, unsafeCString(pKey), unsafeCString(pValue)))
}
func SteamAPI_ISteamUGC_RequestUGCDetails(nPublishedFileID PublishedFileId, unMaxAgeSeconds uint32) SteamAPICall {
	return C.SteamAPI_ISteamUGC_RequestUGCDetails(getSteamUGC(), nPublishedFileID, C.uint32(unMaxAgeSeconds))
}
func SteamAPI_ISteamUGC_CreateItem(nConsumerAppId AppId, eFileType EWorkshopFileType) SteamAPICall {
	return C.SteamAPI_ISteamUGC_CreateItem(getSteamUGC(), nConsumerAppId, C.EWorkshopFileType(eFileType))
}
func SteamAPI_ISteamUGC_StartItemUpdate(nConsumerAppId AppId, nPublishedFileID PublishedFileId) UGCUpdateHandle {
	return C.SteamAPI_ISteamUGC_StartItemUpdate(getSteamUGC(), nConsumerAppId, nPublishedFileID)
}
func SteamAPI_ISteamUGC_SetItemTitle(handle UGCUpdateHandle, pchTitle string) bool {
	return bool(C.SteamAPI_ISteamUGC_SetItemTitle(getSteamUGC(), handle, unsafeCString(pchTitle)))
}
func SteamAPI_ISteamUGC_SetItemDescription(handle UGCUpdateHandle, pchDescription string) bool {
	return bool(C.SteamAPI_ISteamUGC_SetItemDescription(getSteamUGC(), handle, unsafeCString(pchDescription)))
}
func SteamAPI_ISteamUGC_SetItemUpdateLanguage(handle UGCUpdateHandle, pchLanguage string) bool {
	return bool(C.SteamAPI_ISteamUGC_SetItemUpdateLanguage(getSteamUGC(), handle, unsafeCString(pchLanguage)))
}
func SteamAPI_ISteamUGC_SetItemMetadata(handle UGCUpdateHandle, pchMetaData string) bool {
	return bool(C.SteamAPI_ISteamUGC_SetItemMetadata(getSteamUGC(), handle, unsafeCString(pchMetaData)))
}
func SteamAPI_ISteamUGC_SetItemVisibility(handle UGCUpdateHandle, eVisibility ERemoteStoragePublishedFileVisibility) bool {
	return bool(C.SteamAPI_ISteamUGC_SetItemVisibility(getSteamUGC(), handle, C.ERemoteStoragePublishedFileVisibility(eVisibility)))
}
func SteamAPI_ISteamUGC_SetItemTags(updateHandle UGCUpdateHandle, pTags *SteamParamStringArray) bool {
	return bool(C.SteamAPI_ISteamUGC_SetItemTags(getSteamUGC(), updateHandle, pTags))
}
func SteamAPI_ISteamUGC_SetItemContent(handle UGCUpdateHandle, pszContentFolder string) bool {
	return bool(C.SteamAPI_ISteamUGC_SetItemContent(getSteamUGC(), handle, unsafeCString(pszContentFolder)))
}
func SteamAPI_ISteamUGC_SetItemPreview(handle UGCUpdateHandle, pszPreviewFile string) bool {
	return bool(C.SteamAPI_ISteamUGC_SetItemPreview(getSteamUGC(), handle, unsafeCString(pszPreviewFile)))
}
func SteamAPI_ISteamUGC_RemoveItemKeyValueTags(handle UGCUpdateHandle, pchKey string) bool {
	return bool(C.SteamAPI_ISteamUGC_RemoveItemKeyValueTags(getSteamUGC(), handle, unsafeCString(pchKey)))
}
func SteamAPI_ISteamUGC_AddItemKeyValueTag(handle UGCUpdateHandle, pchKey string, pchValue string) bool {
	return bool(C.SteamAPI_ISteamUGC_AddItemKeyValueTag(getSteamUGC(), handle, unsafeCString(pchKey), unsafeCString(pchValue)))
}
func SteamAPI_ISteamUGC_AddItemPreviewFile(handle UGCUpdateHandle, pszPreviewFile string, type_ EItemPreviewType) bool {
	return bool(C.SteamAPI_ISteamUGC_AddItemPreviewFile(getSteamUGC(), handle, unsafeCString(pszPreviewFile), C.EItemPreviewType(type_)))
}
func SteamAPI_ISteamUGC_AddItemPreviewVideo(handle UGCUpdateHandle, pszVideoID string) bool {
	return bool(C.SteamAPI_ISteamUGC_AddItemPreviewVideo(getSteamUGC(), handle, unsafeCString(pszVideoID)))
}
func SteamAPI_ISteamUGC_UpdateItemPreviewFile(handle UGCUpdateHandle, index uint32, pszPreviewFile string) bool {
	return bool(C.SteamAPI_ISteamUGC_UpdateItemPreviewFile(getSteamUGC(), handle, C.uint32(index), unsafeCString(pszPreviewFile)))
}
func SteamAPI_ISteamUGC_UpdateItemPreviewVideo(handle UGCUpdateHandle, index uint32, pszVideoID string) bool {
	return bool(C.SteamAPI_ISteamUGC_UpdateItemPreviewVideo(getSteamUGC(), handle, C.uint32(index), unsafeCString(pszVideoID)))
}
func SteamAPI_ISteamUGC_RemoveItemPreview(handle UGCUpdateHandle, index uint32) bool {
	return bool(C.SteamAPI_ISteamUGC_RemoveItemPreview(getSteamUGC(), handle, C.uint32(index)))
}
func SteamAPI_ISteamUGC_SubmitItemUpdate(handle UGCUpdateHandle, pchChangeNote string) SteamAPICall {
	return C.SteamAPI_ISteamUGC_SubmitItemUpdate(getSteamUGC(), handle, unsafeCString(pchChangeNote))
}
func SteamAPI_ISteamUGC_GetItemUpdateProgress(handle UGCUpdateHandle, punBytesProcessed *uint64, punBytesTotal *uint64) EItemUpdateStatus {
	return EItemUpdateStatus(C.SteamAPI_ISteamUGC_GetItemUpdateProgress(getSteamUGC(), handle, (*C.uint64)(punBytesProcessed), (*C.uint64)(punBytesTotal)))
}
func SteamAPI_ISteamUGC_SetUserItemVote(nPublishedFileID PublishedFileId, bVoteUp bool) SteamAPICall {
	return C.SteamAPI_ISteamUGC_SetUserItemVote(getSteamUGC(), nPublishedFileID, C.bool(bVoteUp))
}
func SteamAPI_ISteamUGC_GetUserItemVote(nPublishedFileID PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_GetUserItemVote(getSteamUGC(), nPublishedFileID)
}
func SteamAPI_ISteamUGC_AddItemToFavorites(nAppId AppId, nPublishedFileID PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_AddItemToFavorites(getSteamUGC(), nAppId, nPublishedFileID)
}
func SteamAPI_ISteamUGC_RemoveItemFromFavorites(nAppId AppId, nPublishedFileID PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_RemoveItemFromFavorites(getSteamUGC(), nAppId, nPublishedFileID)
}
func SteamAPI_ISteamUGC_SubscribeItem(nPublishedFileID PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_SubscribeItem(getSteamUGC(), nPublishedFileID)
}
func SteamAPI_ISteamUGC_UnsubscribeItem(nPublishedFileID PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_UnsubscribeItem(getSteamUGC(), nPublishedFileID)
}
func SteamAPI_ISteamUGC_GetNumSubscribedItems() uint32 {
	return uint32(C.SteamAPI_ISteamUGC_GetNumSubscribedItems(getSteamUGC()))
}
func SteamAPI_ISteamUGC_GetSubscribedItems(pvecPublishedFileID *PublishedFileId, cMaxEntries uint32) uint32 {
	return uint32(C.SteamAPI_ISteamUGC_GetSubscribedItems(getSteamUGC(), pvecPublishedFileID, C.uint32(cMaxEntries)))
}
func SteamAPI_ISteamUGC_GetItemState(nPublishedFileID PublishedFileId) uint32 {
	return uint32(C.SteamAPI_ISteamUGC_GetItemState(getSteamUGC(), nPublishedFileID))
}
func SteamAPI_ISteamUGC_GetItemInstallInfo(nPublishedFileID PublishedFileId, punSizeOnDisk *uint64, pchFolder []byte, cchFolderSize uint32, punTimeStamp *uint32) bool {
	return bool(C.SteamAPI_ISteamUGC_GetItemInstallInfo(getSteamUGC(), nPublishedFileID, (*C.uint64)(punSizeOnDisk), unsafeCBytes(pchFolder), C.uint32(cchFolderSize), (*C.uint32)(punTimeStamp)))
}
func SteamAPI_ISteamUGC_GetItemDownloadInfo(nPublishedFileID PublishedFileId, punBytesDownloaded *uint64, punBytesTotal *uint64) bool {
	return bool(C.SteamAPI_ISteamUGC_GetItemDownloadInfo(getSteamUGC(), nPublishedFileID, (*C.uint64)(punBytesDownloaded), (*C.uint64)(punBytesTotal)))
}
func SteamAPI_ISteamUGC_DownloadItem(nPublishedFileID PublishedFileId, bHighPriority bool) bool {
	return bool(C.SteamAPI_ISteamUGC_DownloadItem(getSteamUGC(), nPublishedFileID, C.bool(bHighPriority)))
}
func SteamAPI_ISteamUGC_BInitWorkshopForGameServer(unWorkshopDepotID DepotId, pszFolder string) bool {
	return bool(C.SteamAPI_ISteamUGC_BInitWorkshopForGameServer(getSteamUGC(), unWorkshopDepotID, unsafeCString(pszFolder)))
}
func SteamAPI_ISteamUGC_SuspendDownloads(bSuspend bool) {
	C.SteamAPI_ISteamUGC_SuspendDownloads(getSteamUGC(), C.bool(bSuspend))
}
func SteamAPI_ISteamUGC_StartPlaytimeTracking(pvecPublishedFileID *PublishedFileId, unNumPublishedFileIDs uint32) SteamAPICall {
	return C.SteamAPI_ISteamUGC_StartPlaytimeTracking(getSteamUGC(), pvecPublishedFileID, C.uint32(unNumPublishedFileIDs))
}
func SteamAPI_ISteamUGC_StopPlaytimeTracking(pvecPublishedFileID *PublishedFileId, unNumPublishedFileIDs uint32) SteamAPICall {
	return C.SteamAPI_ISteamUGC_StopPlaytimeTracking(getSteamUGC(), pvecPublishedFileID, C.uint32(unNumPublishedFileIDs))
}
func SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems() SteamAPICall {
	return C.SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(getSteamUGC())
}
func SteamAPI_ISteamUGC_AddDependency(nParentPublishedFileID PublishedFileId, nChildPublishedFileID PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_AddDependency(getSteamUGC(), nParentPublishedFileID, nChildPublishedFileID)
}
func SteamAPI_ISteamUGC_RemoveDependency(nParentPublishedFileID PublishedFileId, nChildPublishedFileID PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_RemoveDependency(getSteamUGC(), nParentPublishedFileID, nChildPublishedFileID)
}
func SteamAPI_ISteamUGC_AddAppDependency(nPublishedFileID PublishedFileId, nAppID AppId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_AddAppDependency(getSteamUGC(), nPublishedFileID, nAppID)
}
func SteamAPI_ISteamUGC_RemoveAppDependency(nPublishedFileID PublishedFileId, nAppID AppId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_RemoveAppDependency(getSteamUGC(), nPublishedFileID, nAppID)
}
func SteamAPI_ISteamUGC_GetAppDependencies(nPublishedFileID PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_GetAppDependencies(getSteamUGC(), nPublishedFileID)
}
func SteamAPI_ISteamUGC_DeleteItem(nPublishedFileID PublishedFileId) SteamAPICall {
	return C.SteamAPI_ISteamUGC_DeleteItem(getSteamUGC(), nPublishedFileID)
}
func SteamAPI_ISteamAppList_GetNumInstalledApps() uint32 {
	return uint32(C.SteamAPI_ISteamAppList_GetNumInstalledApps(getSteamAppList()))
}
func SteamAPI_ISteamAppList_GetInstalledApps(pvecAppID *AppId, unMaxAppIDs uint32) uint32 {
	return uint32(C.SteamAPI_ISteamAppList_GetInstalledApps(getSteamAppList(), pvecAppID, C.uint32(unMaxAppIDs)))
}
func SteamAPI_ISteamAppList_GetAppName(nAppID AppId, pchName []byte, cchNameMax int32) int32 {
	return int32(C.SteamAPI_ISteamAppList_GetAppName(getSteamAppList(), nAppID, unsafeCBytes(pchName), C.int32(cchNameMax)))
}
func SteamAPI_ISteamAppList_GetAppInstallDir(nAppID AppId, pchDirectory []byte, cchNameMax int32) int32 {
	return int32(C.SteamAPI_ISteamAppList_GetAppInstallDir(getSteamAppList(), nAppID, unsafeCBytes(pchDirectory), C.int32(cchNameMax)))
}
func SteamAPI_ISteamAppList_GetAppBuildId(nAppID AppId) int32 {
	return int32(C.SteamAPI_ISteamAppList_GetAppBuildId(getSteamAppList(), nAppID))
}
func SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface() {
	C.SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface(getSteamHTMLSurface())
}
func SteamAPI_ISteamHTMLSurface_Init() bool {
	return bool(C.SteamAPI_ISteamHTMLSurface_Init(getSteamHTMLSurface()))
}
func SteamAPI_ISteamHTMLSurface_Shutdown() bool {
	return bool(C.SteamAPI_ISteamHTMLSurface_Shutdown(getSteamHTMLSurface()))
}
func SteamAPI_ISteamHTMLSurface_CreateBrowser(pchUserAgent string, pchUserCSS string) SteamAPICall {
	return C.SteamAPI_ISteamHTMLSurface_CreateBrowser(getSteamHTMLSurface(), unsafeCString(pchUserAgent), unsafeCString(pchUserCSS))
}
func SteamAPI_ISteamHTMLSurface_RemoveBrowser(unBrowserHandle HHTMLBrowser) {
	C.SteamAPI_ISteamHTMLSurface_RemoveBrowser(getSteamHTMLSurface(), unBrowserHandle)
}
func SteamAPI_ISteamHTMLSurface_LoadURL(unBrowserHandle HHTMLBrowser, pchURL string, pchPostData string) {
	C.SteamAPI_ISteamHTMLSurface_LoadURL(getSteamHTMLSurface(), unBrowserHandle, unsafeCString(pchURL), unsafeCString(pchPostData))
}
func SteamAPI_ISteamHTMLSurface_SetSize(unBrowserHandle HHTMLBrowser, unWidth uint32, unHeight uint32) {
	C.SteamAPI_ISteamHTMLSurface_SetSize(getSteamHTMLSurface(), unBrowserHandle, C.uint32(unWidth), C.uint32(unHeight))
}
func SteamAPI_ISteamHTMLSurface_StopLoad(unBrowserHandle HHTMLBrowser) {
	C.SteamAPI_ISteamHTMLSurface_StopLoad(getSteamHTMLSurface(), unBrowserHandle)
}
func SteamAPI_ISteamHTMLSurface_Reload(unBrowserHandle HHTMLBrowser) {
	C.SteamAPI_ISteamHTMLSurface_Reload(getSteamHTMLSurface(), unBrowserHandle)
}
func SteamAPI_ISteamHTMLSurface_GoBack(unBrowserHandle HHTMLBrowser) {
	C.SteamAPI_ISteamHTMLSurface_GoBack(getSteamHTMLSurface(), unBrowserHandle)
}
func SteamAPI_ISteamHTMLSurface_GoForward(unBrowserHandle HHTMLBrowser) {
	C.SteamAPI_ISteamHTMLSurface_GoForward(getSteamHTMLSurface(), unBrowserHandle)
}
func SteamAPI_ISteamHTMLSurface_AddHeader(unBrowserHandle HHTMLBrowser, pchKey string, pchValue string) {
	C.SteamAPI_ISteamHTMLSurface_AddHeader(getSteamHTMLSurface(), unBrowserHandle, unsafeCString(pchKey), unsafeCString(pchValue))
}
func SteamAPI_ISteamHTMLSurface_ExecuteJavascript(unBrowserHandle HHTMLBrowser, pchScript string) {
	C.SteamAPI_ISteamHTMLSurface_ExecuteJavascript(getSteamHTMLSurface(), unBrowserHandle, unsafeCString(pchScript))
}
func SteamAPI_ISteamHTMLSurface_MouseUp(unBrowserHandle HHTMLBrowser, eMouseButton EHTMLMouseButton) {
	C.SteamAPI_ISteamHTMLSurface_MouseUp(getSteamHTMLSurface(), unBrowserHandle, C.EHTMLMouseButton(eMouseButton))
}
func SteamAPI_ISteamHTMLSurface_MouseDown(unBrowserHandle HHTMLBrowser, eMouseButton EHTMLMouseButton) {
	C.SteamAPI_ISteamHTMLSurface_MouseDown(getSteamHTMLSurface(), unBrowserHandle, C.EHTMLMouseButton(eMouseButton))
}
func SteamAPI_ISteamHTMLSurface_MouseDoubleClick(unBrowserHandle HHTMLBrowser, eMouseButton EHTMLMouseButton) {
	C.SteamAPI_ISteamHTMLSurface_MouseDoubleClick(getSteamHTMLSurface(), unBrowserHandle, C.EHTMLMouseButton(eMouseButton))
}
func SteamAPI_ISteamHTMLSurface_MouseMove(unBrowserHandle HHTMLBrowser, x int32, y int32) {
	C.SteamAPI_ISteamHTMLSurface_MouseMove(getSteamHTMLSurface(), unBrowserHandle, C.int32(x), C.int32(y))
}
func SteamAPI_ISteamHTMLSurface_MouseWheel(unBrowserHandle HHTMLBrowser, nDelta int32) {
	C.SteamAPI_ISteamHTMLSurface_MouseWheel(getSteamHTMLSurface(), unBrowserHandle, C.int32(nDelta))
}
func SteamAPI_ISteamHTMLSurface_KeyDown(unBrowserHandle HHTMLBrowser, nNativeKeyCode uint32, eHTMLKeyModifiers EHTMLKeyModifiers) {
	C.SteamAPI_ISteamHTMLSurface_KeyDown(getSteamHTMLSurface(), unBrowserHandle, C.uint32(nNativeKeyCode), C.EHTMLKeyModifiers(eHTMLKeyModifiers))
}
func SteamAPI_ISteamHTMLSurface_KeyUp(unBrowserHandle HHTMLBrowser, nNativeKeyCode uint32, eHTMLKeyModifiers EHTMLKeyModifiers) {
	C.SteamAPI_ISteamHTMLSurface_KeyUp(getSteamHTMLSurface(), unBrowserHandle, C.uint32(nNativeKeyCode), C.EHTMLKeyModifiers(eHTMLKeyModifiers))
}
func SteamAPI_ISteamHTMLSurface_KeyChar(unBrowserHandle HHTMLBrowser, cUnicodeChar uint32, eHTMLKeyModifiers EHTMLKeyModifiers) {
	C.SteamAPI_ISteamHTMLSurface_KeyChar(getSteamHTMLSurface(), unBrowserHandle, C.uint32(cUnicodeChar), C.EHTMLKeyModifiers(eHTMLKeyModifiers))
}
func SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(unBrowserHandle HHTMLBrowser, nAbsolutePixelScroll uint32) {
	C.SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(getSteamHTMLSurface(), unBrowserHandle, C.uint32(nAbsolutePixelScroll))
}
func SteamAPI_ISteamHTMLSurface_SetVerticalScroll(unBrowserHandle HHTMLBrowser, nAbsolutePixelScroll uint32) {
	C.SteamAPI_ISteamHTMLSurface_SetVerticalScroll(getSteamHTMLSurface(), unBrowserHandle, C.uint32(nAbsolutePixelScroll))
}
func SteamAPI_ISteamHTMLSurface_SetKeyFocus(unBrowserHandle HHTMLBrowser, bHasKeyFocus bool) {
	C.SteamAPI_ISteamHTMLSurface_SetKeyFocus(getSteamHTMLSurface(), unBrowserHandle, C.bool(bHasKeyFocus))
}
func SteamAPI_ISteamHTMLSurface_ViewSource(unBrowserHandle HHTMLBrowser) {
	C.SteamAPI_ISteamHTMLSurface_ViewSource(getSteamHTMLSurface(), unBrowserHandle)
}
func SteamAPI_ISteamHTMLSurface_CopyToClipboard(unBrowserHandle HHTMLBrowser) {
	C.SteamAPI_ISteamHTMLSurface_CopyToClipboard(getSteamHTMLSurface(), unBrowserHandle)
}
func SteamAPI_ISteamHTMLSurface_PasteFromClipboard(unBrowserHandle HHTMLBrowser) {
	C.SteamAPI_ISteamHTMLSurface_PasteFromClipboard(getSteamHTMLSurface(), unBrowserHandle)
}
func SteamAPI_ISteamHTMLSurface_Find(unBrowserHandle HHTMLBrowser, pchSearchStr string, bCurrentlyInFind bool, bReverse bool) {
	C.SteamAPI_ISteamHTMLSurface_Find(getSteamHTMLSurface(), unBrowserHandle, unsafeCString(pchSearchStr), C.bool(bCurrentlyInFind), C.bool(bReverse))
}
func SteamAPI_ISteamHTMLSurface_StopFind(unBrowserHandle HHTMLBrowser) {
	C.SteamAPI_ISteamHTMLSurface_StopFind(getSteamHTMLSurface(), unBrowserHandle)
}
func SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(unBrowserHandle HHTMLBrowser, x int32, y int32) {
	C.SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(getSteamHTMLSurface(), unBrowserHandle, C.int32(x), C.int32(y))
}
func SteamAPI_ISteamHTMLSurface_SetCookie(pchHostname string, pchKey string, pchValue string, pchPath string, nExpires RTime32, bSecure bool, bHTTPOnly bool) {
	C.SteamAPI_ISteamHTMLSurface_SetCookie(getSteamHTMLSurface(), unsafeCString(pchHostname), unsafeCString(pchKey), unsafeCString(pchValue), unsafeCString(pchPath), nExpires, C.bool(bSecure), C.bool(bHTTPOnly))
}
func SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(unBrowserHandle HHTMLBrowser, flZoom float32, nPointX int32, nPointY int32) {
	C.SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(getSteamHTMLSurface(), unBrowserHandle, C.float(flZoom), C.int32(nPointX), C.int32(nPointY))
}
func SteamAPI_ISteamHTMLSurface_SetBackgroundMode(unBrowserHandle HHTMLBrowser, bBackgroundMode bool) {
	C.SteamAPI_ISteamHTMLSurface_SetBackgroundMode(getSteamHTMLSurface(), unBrowserHandle, C.bool(bBackgroundMode))
}
func SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(unBrowserHandle HHTMLBrowser, flDPIScaling float32) {
	C.SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(getSteamHTMLSurface(), unBrowserHandle, C.float(flDPIScaling))
}
func SteamAPI_ISteamHTMLSurface_AllowStartRequest(unBrowserHandle HHTMLBrowser, bAllowed bool) {
	C.SteamAPI_ISteamHTMLSurface_AllowStartRequest(getSteamHTMLSurface(), unBrowserHandle, C.bool(bAllowed))
}
func SteamAPI_ISteamHTMLSurface_JSDialogResponse(unBrowserHandle HHTMLBrowser, bResult bool) {
	C.SteamAPI_ISteamHTMLSurface_JSDialogResponse(getSteamHTMLSurface(), unBrowserHandle, C.bool(bResult))
}
func SteamAPI_ISteamInventory_GetResultStatus(resultHandle SteamInventoryResult) EResult {
	return EResult(C.SteamAPI_ISteamInventory_GetResultStatus(getSteamInventory(), resultHandle))
}
func SteamAPI_ISteamInventory_GetResultItems(resultHandle SteamInventoryResult, pOutItemsArray *SteamItemDetails, punOutItemsArraySize *uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_GetResultItems(getSteamInventory(), resultHandle, pOutItemsArray, (*C.uint32)(punOutItemsArraySize)))
}
func SteamAPI_ISteamInventory_GetResultItemProperty(resultHandle SteamInventoryResult, unItemIndex uint32, pchPropertyName string, pchValueBuffer []byte, punValueBufferSizeOut *uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_GetResultItemProperty(getSteamInventory(), resultHandle, C.uint32(unItemIndex), unsafeCString(pchPropertyName), unsafeCBytes(pchValueBuffer), (*C.uint32)(punValueBufferSizeOut)))
}
func SteamAPI_ISteamInventory_GetResultTimestamp(resultHandle SteamInventoryResult) uint32 {
	return uint32(C.SteamAPI_ISteamInventory_GetResultTimestamp(getSteamInventory(), resultHandle))
}
func SteamAPI_ISteamInventory_CheckResultSteamID(resultHandle SteamInventoryResult, steamIDExpected SteamID) bool {
	return bool(C.SteamAPI_ISteamInventory_CheckResultSteamID(getSteamInventory(), resultHandle, C.CSteamID(steamIDExpected)))
}
func SteamAPI_ISteamInventory_DestroyResult(resultHandle SteamInventoryResult) {
	C.SteamAPI_ISteamInventory_DestroyResult(getSteamInventory(), resultHandle)
}
func SteamAPI_ISteamInventory_GetAllItems(pResultHandle *SteamInventoryResult) bool {
	return bool(C.SteamAPI_ISteamInventory_GetAllItems(getSteamInventory(), pResultHandle))
}
func SteamAPI_ISteamInventory_GetItemsByID(pResultHandle *SteamInventoryResult, pInstanceIDs *SteamItemInstanceID, unCountInstanceIDs uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_GetItemsByID(getSteamInventory(), pResultHandle, pInstanceIDs, C.uint32(unCountInstanceIDs)))
}
func SteamAPI_ISteamInventory_SerializeResult(resultHandle SteamInventoryResult, pOutBuffer unsafe.Pointer, punOutBufferSize *uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_SerializeResult(getSteamInventory(), resultHandle, pOutBuffer, (*C.uint32)(punOutBufferSize)))
}
func SteamAPI_ISteamInventory_DeserializeResult(pOutResultHandle *SteamInventoryResult, pBuffer unsafe.Pointer, unBufferSize uint32, bRESERVED_MUST_BE_FALSE bool) bool {
	return bool(C.SteamAPI_ISteamInventory_DeserializeResult(getSteamInventory(), pOutResultHandle, pBuffer, C.uint32(unBufferSize), C.bool(bRESERVED_MUST_BE_FALSE)))
}
func SteamAPI_ISteamInventory_GenerateItems(pResultHandle *SteamInventoryResult, pArrayItemDefs *SteamItemDef, punArrayQuantity *uint32, unArrayLength uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_GenerateItems(getSteamInventory(), pResultHandle, pArrayItemDefs, (*C.uint32)(punArrayQuantity), C.uint32(unArrayLength)))
}
func SteamAPI_ISteamInventory_GrantPromoItems(pResultHandle *SteamInventoryResult) bool {
	return bool(C.SteamAPI_ISteamInventory_GrantPromoItems(getSteamInventory(), pResultHandle))
}
func SteamAPI_ISteamInventory_AddPromoItem(pResultHandle *SteamInventoryResult, itemDef SteamItemDef) bool {
	return bool(C.SteamAPI_ISteamInventory_AddPromoItem(getSteamInventory(), pResultHandle, itemDef))
}
func SteamAPI_ISteamInventory_AddPromoItems(pResultHandle *SteamInventoryResult, pArrayItemDefs *SteamItemDef, unArrayLength uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_AddPromoItems(getSteamInventory(), pResultHandle, pArrayItemDefs, C.uint32(unArrayLength)))
}
func SteamAPI_ISteamInventory_ConsumeItem(pResultHandle *SteamInventoryResult, itemConsume SteamItemInstanceID, unQuantity uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_ConsumeItem(getSteamInventory(), pResultHandle, itemConsume, C.uint32(unQuantity)))
}
func SteamAPI_ISteamInventory_ExchangeItems(pResultHandle *SteamInventoryResult, pArrayGenerate *SteamItemDef, punArrayGenerateQuantity *uint32, unArrayGenerateLength uint32, pArrayDestroy *SteamItemInstanceID, punArrayDestroyQuantity *uint32, unArrayDestroyLength uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_ExchangeItems(getSteamInventory(), pResultHandle, pArrayGenerate, (*C.uint32)(punArrayGenerateQuantity), C.uint32(unArrayGenerateLength), pArrayDestroy, (*C.uint32)(punArrayDestroyQuantity), C.uint32(unArrayDestroyLength)))
}
func SteamAPI_ISteamInventory_TransferItemQuantity(pResultHandle *SteamInventoryResult, itemIdSource SteamItemInstanceID, unQuantity uint32, itemIdDest SteamItemInstanceID) bool {
	return bool(C.SteamAPI_ISteamInventory_TransferItemQuantity(getSteamInventory(), pResultHandle, itemIdSource, C.uint32(unQuantity), itemIdDest))
}
func SteamAPI_ISteamInventory_SendItemDropHeartbeat() {
	C.SteamAPI_ISteamInventory_SendItemDropHeartbeat(getSteamInventory())
}
func SteamAPI_ISteamInventory_TriggerItemDrop(pResultHandle *SteamInventoryResult, dropListDefinition SteamItemDef) bool {
	return bool(C.SteamAPI_ISteamInventory_TriggerItemDrop(getSteamInventory(), pResultHandle, dropListDefinition))
}
func SteamAPI_ISteamInventory_TradeItems(pResultHandle *SteamInventoryResult, steamIDTradePartner SteamID, pArrayGive *SteamItemInstanceID, pArrayGiveQuantity *uint32, nArrayGiveLength uint32, pArrayGet *SteamItemInstanceID, pArrayGetQuantity *uint32, nArrayGetLength uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_TradeItems(getSteamInventory(), pResultHandle, C.CSteamID(steamIDTradePartner), pArrayGive, (*C.uint32)(pArrayGiveQuantity), C.uint32(nArrayGiveLength), pArrayGet, (*C.uint32)(pArrayGetQuantity), C.uint32(nArrayGetLength)))
}
func SteamAPI_ISteamInventory_LoadItemDefinitions() bool {
	return bool(C.SteamAPI_ISteamInventory_LoadItemDefinitions(getSteamInventory()))
}
func SteamAPI_ISteamInventory_GetItemDefinitionIDs(pItemDefIDs *SteamItemDef, punItemDefIDsArraySize *uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_GetItemDefinitionIDs(getSteamInventory(), pItemDefIDs, (*C.uint32)(punItemDefIDsArraySize)))
}
func SteamAPI_ISteamInventory_GetItemDefinitionProperty(iDefinition SteamItemDef, pchPropertyName string, pchValueBuffer []byte, punValueBufferSizeOut *uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_GetItemDefinitionProperty(getSteamInventory(), iDefinition, unsafeCString(pchPropertyName), unsafeCBytes(pchValueBuffer), (*C.uint32)(punValueBufferSizeOut)))
}
func SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(steamID SteamID) SteamAPICall {
	return C.SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(getSteamInventory(), C.CSteamID(steamID))
}
func SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(steamID SteamID, pItemDefIDs *SteamItemDef, punItemDefIDsArraySize *uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(getSteamInventory(), C.CSteamID(steamID), pItemDefIDs, (*C.uint32)(punItemDefIDsArraySize)))
}
func SteamAPI_ISteamInventory_StartPurchase(pArrayItemDefs *SteamItemDef, punArrayQuantity *uint32, unArrayLength uint32) SteamAPICall {
	return C.SteamAPI_ISteamInventory_StartPurchase(getSteamInventory(), pArrayItemDefs, (*C.uint32)(punArrayQuantity), C.uint32(unArrayLength))
}
func SteamAPI_ISteamInventory_RequestPrices() SteamAPICall {
	return C.SteamAPI_ISteamInventory_RequestPrices(getSteamInventory())
}
func SteamAPI_ISteamInventory_GetNumItemsWithPrices() uint32 {
	return uint32(C.SteamAPI_ISteamInventory_GetNumItemsWithPrices(getSteamInventory()))
}
func SteamAPI_ISteamInventory_GetItemsWithPrices(pArrayItemDefs *SteamItemDef, pPrices *uint64, unArrayLength uint32) bool {
	return bool(C.SteamAPI_ISteamInventory_GetItemsWithPrices(getSteamInventory(), pArrayItemDefs, (*C.uint64)(pPrices), C.uint32(unArrayLength)))
}
func SteamAPI_ISteamInventory_GetItemPrice(iDefinition SteamItemDef, pPrice *uint64) bool {
	return bool(C.SteamAPI_ISteamInventory_GetItemPrice(getSteamInventory(), iDefinition, (*C.uint64)(pPrice)))
}
func SteamAPI_ISteamInventory_StartUpdateProperties() SteamInventoryUpdateHandle {
	return C.SteamAPI_ISteamInventory_StartUpdateProperties(getSteamInventory())
}
func SteamAPI_ISteamInventory_RemoveProperty(handle SteamInventoryUpdateHandle, nItemID SteamItemInstanceID, pchPropertyName string) bool {
	return bool(C.SteamAPI_ISteamInventory_RemoveProperty(getSteamInventory(), handle, nItemID, unsafeCString(pchPropertyName)))
}
func SteamAPI_ISteamInventory_SetProperty(handle SteamInventoryUpdateHandle, nItemID SteamItemInstanceID, pchPropertyName string, pchPropertyValue string) bool {
	return bool(C.SteamAPI_ISteamInventory_SetProperty(getSteamInventory(), handle, nItemID, unsafeCString(pchPropertyName), unsafeCString(pchPropertyValue)))
}
func SteamAPI_ISteamInventory_SetProperty0(handle SteamInventoryUpdateHandle, nItemID SteamItemInstanceID, pchPropertyName string, bValue bool) bool {
	return bool(C.SteamAPI_ISteamInventory_SetProperty0(getSteamInventory(), handle, nItemID, unsafeCString(pchPropertyName), C.bool(bValue)))
}
func SteamAPI_ISteamInventory_SetProperty1(handle SteamInventoryUpdateHandle, nItemID SteamItemInstanceID, pchPropertyName string, nValue int64) bool {
	return bool(C.SteamAPI_ISteamInventory_SetProperty1(getSteamInventory(), handle, nItemID, unsafeCString(pchPropertyName), C.int64(nValue)))
}
func SteamAPI_ISteamInventory_SetProperty2(handle SteamInventoryUpdateHandle, nItemID SteamItemInstanceID, pchPropertyName string, flValue float32) bool {
	return bool(C.SteamAPI_ISteamInventory_SetProperty2(getSteamInventory(), handle, nItemID, unsafeCString(pchPropertyName), C.float(flValue)))
}
func SteamAPI_ISteamInventory_SubmitUpdateProperties(handle SteamInventoryUpdateHandle, pResultHandle *SteamInventoryResult) bool {
	return bool(C.SteamAPI_ISteamInventory_SubmitUpdateProperties(getSteamInventory(), handle, pResultHandle))
}
func SteamAPI_ISteamVideo_GetVideoURL(unVideoAppID AppId) {
	C.SteamAPI_ISteamVideo_GetVideoURL(getSteamVideo(), unVideoAppID)
}
func SteamAPI_ISteamVideo_IsBroadcasting(pnNumViewers *int32) bool {
	return bool(C.SteamAPI_ISteamVideo_IsBroadcasting(getSteamVideo(), (*C.int32)(pnNumViewers)))
}
func SteamAPI_ISteamVideo_GetOPFSettings(unVideoAppID AppId) {
	C.SteamAPI_ISteamVideo_GetOPFSettings(getSteamVideo(), unVideoAppID)
}
func SteamAPI_ISteamVideo_GetOPFStringForApp(unVideoAppID AppId, pchBuffer []byte, pnBufferSize *int32) bool {
	return bool(C.SteamAPI_ISteamVideo_GetOPFStringForApp(getSteamVideo(), unVideoAppID, unsafeCBytes(pchBuffer), (*C.int32)(pnBufferSize)))
}
func SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled() bool {
	return bool(C.SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(getSteamParentalSettings()))
}
func SteamAPI_ISteamParentalSettings_BIsParentalLockLocked() bool {
	return bool(C.SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(getSteamParentalSettings()))
}
func SteamAPI_ISteamParentalSettings_BIsAppBlocked(nAppID AppId) bool {
	return bool(C.SteamAPI_ISteamParentalSettings_BIsAppBlocked(getSteamParentalSettings(), nAppID))
}
func SteamAPI_ISteamParentalSettings_BIsAppInBlockList(nAppID AppId) bool {
	return bool(C.SteamAPI_ISteamParentalSettings_BIsAppInBlockList(getSteamParentalSettings(), nAppID))
}
func SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(eFeature EParentalFeature) bool {
	return bool(C.SteamAPI_ISteamParentalSettings_BIsFeatureBlocked(getSteamParentalSettings(), C.EParentalFeature(eFeature)))
}
func SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(eFeature EParentalFeature) bool {
	return bool(C.SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList(getSteamParentalSettings(), C.EParentalFeature(eFeature)))
}
func SteamAPI_ISteamGameServer_InitGameServer(unIP uint32, usGamePort uint16, usQueryPort uint16, unFlags uint32, nGameAppId AppId, pchVersionString string) bool {
	return bool(C.SteamAPI_ISteamGameServer_InitGameServer(getSteamGameServer(), C.uint32(unIP), C.uint16(usGamePort), C.uint16(usQueryPort), C.uint32(unFlags), nGameAppId, unsafeCString(pchVersionString)))
}
func SteamAPI_ISteamGameServer_SetProduct(pszProduct string) {
	C.SteamAPI_ISteamGameServer_SetProduct(getSteamGameServer(), unsafeCString(pszProduct))
}
func SteamAPI_ISteamGameServer_SetGameDescription(pszGameDescription string) {
	C.SteamAPI_ISteamGameServer_SetGameDescription(getSteamGameServer(), unsafeCString(pszGameDescription))
}
func SteamAPI_ISteamGameServer_SetModDir(pszModDir string) {
	C.SteamAPI_ISteamGameServer_SetModDir(getSteamGameServer(), unsafeCString(pszModDir))
}
func SteamAPI_ISteamGameServer_SetDedicatedServer(bDedicated bool) {
	C.SteamAPI_ISteamGameServer_SetDedicatedServer(getSteamGameServer(), C.bool(bDedicated))
}
func SteamAPI_ISteamGameServer_LogOn(pszToken string) {
	C.SteamAPI_ISteamGameServer_LogOn(getSteamGameServer(), unsafeCString(pszToken))
}
func SteamAPI_ISteamGameServer_LogOnAnonymous() {
	C.SteamAPI_ISteamGameServer_LogOnAnonymous(getSteamGameServer())
}
func SteamAPI_ISteamGameServer_LogOff() {
	C.SteamAPI_ISteamGameServer_LogOff(getSteamGameServer())
}
func SteamAPI_ISteamGameServer_BLoggedOn() bool {
	return bool(C.SteamAPI_ISteamGameServer_BLoggedOn(getSteamGameServer()))
}
func SteamAPI_ISteamGameServer_BSecure() bool {
	return bool(C.SteamAPI_ISteamGameServer_BSecure(getSteamGameServer()))
}
func SteamAPI_ISteamGameServer_GetSteamID() SteamID {
	return SteamID(C.SteamAPI_ISteamGameServer_GetSteamID(getSteamGameServer()))
}
func SteamAPI_ISteamGameServer_WasRestartRequested() bool {
	return bool(C.SteamAPI_ISteamGameServer_WasRestartRequested(getSteamGameServer()))
}
func SteamAPI_ISteamGameServer_SetMaxPlayerCount(cPlayersMax int32) {
	C.SteamAPI_ISteamGameServer_SetMaxPlayerCount(getSteamGameServer(), C.int32(cPlayersMax))
}
func SteamAPI_ISteamGameServer_SetBotPlayerCount(cBotplayers int32) {
	C.SteamAPI_ISteamGameServer_SetBotPlayerCount(getSteamGameServer(), C.int32(cBotplayers))
}
func SteamAPI_ISteamGameServer_SetServerName(pszServerName string) {
	C.SteamAPI_ISteamGameServer_SetServerName(getSteamGameServer(), unsafeCString(pszServerName))
}
func SteamAPI_ISteamGameServer_SetMapName(pszMapName string) {
	C.SteamAPI_ISteamGameServer_SetMapName(getSteamGameServer(), unsafeCString(pszMapName))
}
func SteamAPI_ISteamGameServer_SetPasswordProtected(bPasswordProtected bool) {
	C.SteamAPI_ISteamGameServer_SetPasswordProtected(getSteamGameServer(), C.bool(bPasswordProtected))
}
func SteamAPI_ISteamGameServer_SetSpectatorPort(unSpectatorPort uint16) {
	C.SteamAPI_ISteamGameServer_SetSpectatorPort(getSteamGameServer(), C.uint16(unSpectatorPort))
}
func SteamAPI_ISteamGameServer_SetSpectatorServerName(pszSpectatorServerName string) {
	C.SteamAPI_ISteamGameServer_SetSpectatorServerName(getSteamGameServer(), unsafeCString(pszSpectatorServerName))
}
func SteamAPI_ISteamGameServer_ClearAllKeyValues() {
	C.SteamAPI_ISteamGameServer_ClearAllKeyValues(getSteamGameServer())
}
func SteamAPI_ISteamGameServer_SetKeyValue(pKey string, pValue string) {
	C.SteamAPI_ISteamGameServer_SetKeyValue(getSteamGameServer(), unsafeCString(pKey), unsafeCString(pValue))
}
func SteamAPI_ISteamGameServer_SetGameTags(pchGameTags string) {
	C.SteamAPI_ISteamGameServer_SetGameTags(getSteamGameServer(), unsafeCString(pchGameTags))
}
func SteamAPI_ISteamGameServer_SetGameData(pchGameData string) {
	C.SteamAPI_ISteamGameServer_SetGameData(getSteamGameServer(), unsafeCString(pchGameData))
}
func SteamAPI_ISteamGameServer_SetRegion(pszRegion string) {
	C.SteamAPI_ISteamGameServer_SetRegion(getSteamGameServer(), unsafeCString(pszRegion))
}
func SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(unIPClient uint32, pvAuthBlob unsafe.Pointer, cubAuthBlobSize uint32, pSteamIDUser *SteamID) bool {
	return bool(C.SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate(getSteamGameServer(), C.uint32(unIPClient), pvAuthBlob, C.uint32(cubAuthBlobSize), (*C.CSteamID)(pSteamIDUser)))
}
func SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection() SteamID {
	return SteamID(C.SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(getSteamGameServer()))
}
func SteamAPI_ISteamGameServer_SendUserDisconnect(steamIDUser SteamID) {
	C.SteamAPI_ISteamGameServer_SendUserDisconnect(getSteamGameServer(), C.CSteamID(steamIDUser))
}
func SteamAPI_ISteamGameServer_BUpdateUserData(steamIDUser SteamID, pchPlayerName string, uScore uint32) bool {
	return bool(C.SteamAPI_ISteamGameServer_BUpdateUserData(getSteamGameServer(), C.CSteamID(steamIDUser), unsafeCString(pchPlayerName), C.uint32(uScore)))
}
func SteamAPI_ISteamGameServer_GetAuthSessionTicket(pTicket unsafe.Pointer, cbMaxTicket int32, pcbTicket *uint32) HAuthTicket {
	return C.SteamAPI_ISteamGameServer_GetAuthSessionTicket(getSteamGameServer(), pTicket, C.int32(cbMaxTicket), (*C.uint32)(pcbTicket))
}
func SteamAPI_ISteamGameServer_BeginAuthSession(pAuthTicket unsafe.Pointer, cbAuthTicket int32, steamID SteamID) EBeginAuthSessionResult {
	return EBeginAuthSessionResult(C.SteamAPI_ISteamGameServer_BeginAuthSession(getSteamGameServer(), pAuthTicket, C.int32(cbAuthTicket), C.CSteamID(steamID)))
}
func SteamAPI_ISteamGameServer_EndAuthSession(steamID SteamID) {
	C.SteamAPI_ISteamGameServer_EndAuthSession(getSteamGameServer(), C.CSteamID(steamID))
}
func SteamAPI_ISteamGameServer_CancelAuthTicket(hAuthTicket HAuthTicket) {
	C.SteamAPI_ISteamGameServer_CancelAuthTicket(getSteamGameServer(), hAuthTicket)
}
func SteamAPI_ISteamGameServer_UserHasLicenseForApp(steamID SteamID, appID AppId) EUserHasLicenseForAppResult {
	return EUserHasLicenseForAppResult(C.SteamAPI_ISteamGameServer_UserHasLicenseForApp(getSteamGameServer(), C.CSteamID(steamID), appID))
}
func SteamAPI_ISteamGameServer_RequestUserGroupStatus(steamIDUser SteamID, steamIDGroup SteamID) bool {
	return bool(C.SteamAPI_ISteamGameServer_RequestUserGroupStatus(getSteamGameServer(), C.CSteamID(steamIDUser), C.CSteamID(steamIDGroup)))
}
func SteamAPI_ISteamGameServer_GetGameplayStats() {
	C.SteamAPI_ISteamGameServer_GetGameplayStats(getSteamGameServer())
}
func SteamAPI_ISteamGameServer_GetServerReputation() SteamAPICall {
	return C.SteamAPI_ISteamGameServer_GetServerReputation(getSteamGameServer())
}
func SteamAPI_ISteamGameServer_GetPublicIP() uint32 {
	return uint32(C.SteamAPI_ISteamGameServer_GetPublicIP(getSteamGameServer()))
}
func SteamAPI_ISteamGameServer_HandleIncomingPacket(pData unsafe.Pointer, cbData int32, srcIP uint32, srcPort uint16) bool {
	return bool(C.SteamAPI_ISteamGameServer_HandleIncomingPacket(getSteamGameServer(), pData, C.int32(cbData), C.uint32(srcIP), C.uint16(srcPort)))
}
func SteamAPI_ISteamGameServer_GetNextOutgoingPacket(pOut unsafe.Pointer, cbMaxOut int32, pNetAdr *uint32, pPort *uint16) int32 {
	return int32(C.SteamAPI_ISteamGameServer_GetNextOutgoingPacket(getSteamGameServer(), pOut, C.int32(cbMaxOut), (*C.uint32)(pNetAdr), (*C.uint16)(pPort)))
}
func SteamAPI_ISteamGameServer_EnableHeartbeats(bActive bool) {
	C.SteamAPI_ISteamGameServer_EnableHeartbeats(getSteamGameServer(), C.bool(bActive))
}
func SteamAPI_ISteamGameServer_SetHeartbeatInterval(iHeartbeatInterval int32) {
	C.SteamAPI_ISteamGameServer_SetHeartbeatInterval(getSteamGameServer(), C.int32(iHeartbeatInterval))
}
func SteamAPI_ISteamGameServer_ForceHeartbeat() {
	C.SteamAPI_ISteamGameServer_ForceHeartbeat(getSteamGameServer())
}
func SteamAPI_ISteamGameServer_AssociateWithClan(steamIDClan SteamID) SteamAPICall {
	return C.SteamAPI_ISteamGameServer_AssociateWithClan(getSteamGameServer(), C.CSteamID(steamIDClan))
}
func SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(steamIDNewPlayer SteamID) SteamAPICall {
	return C.SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(getSteamGameServer(), C.CSteamID(steamIDNewPlayer))
}
func SteamAPI_ISteamGameServerStats_RequestUserStats(steamIDUser SteamID) SteamAPICall {
	return C.SteamAPI_ISteamGameServerStats_RequestUserStats(getSteamGameServerStats(), C.CSteamID(steamIDUser))
}
func SteamAPI_ISteamGameServerStats_GetUserStat(steamIDUser SteamID, pchName string, pData *int32) bool {
	return bool(C.SteamAPI_ISteamGameServerStats_GetUserStat(getSteamGameServerStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), (*C.int32)(pData)))
}
func SteamAPI_ISteamGameServerStats_GetUserStat0(steamIDUser SteamID, pchName string, pData *float32) bool {
	return bool(C.SteamAPI_ISteamGameServerStats_GetUserStat0(getSteamGameServerStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), (*C.float)(pData)))
}
func SteamAPI_ISteamGameServerStats_GetUserAchievement(steamIDUser SteamID, pchName string, pbAchieved *bool) bool {
	return bool(C.SteamAPI_ISteamGameServerStats_GetUserAchievement(getSteamGameServerStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), (*C.bool)(pbAchieved)))
}
func SteamAPI_ISteamGameServerStats_SetUserStat(steamIDUser SteamID, pchName string, nData int32) bool {
	return bool(C.SteamAPI_ISteamGameServerStats_SetUserStat(getSteamGameServerStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), C.int32(nData)))
}
func SteamAPI_ISteamGameServerStats_SetUserStat0(steamIDUser SteamID, pchName string, fData float32) bool {
	return bool(C.SteamAPI_ISteamGameServerStats_SetUserStat0(getSteamGameServerStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), C.float(fData)))
}
func SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(steamIDUser SteamID, pchName string, flCountThisSession float32, dSessionLength float64) bool {
	return bool(C.SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(getSteamGameServerStats(), C.CSteamID(steamIDUser), unsafeCString(pchName), C.float(flCountThisSession), C.double(dSessionLength)))
}
func SteamAPI_ISteamGameServerStats_SetUserAchievement(steamIDUser SteamID, pchName string) bool {
	return bool(C.SteamAPI_ISteamGameServerStats_SetUserAchievement(getSteamGameServerStats(), C.CSteamID(steamIDUser), unsafeCString(pchName)))
}
func SteamAPI_ISteamGameServerStats_ClearUserAchievement(steamIDUser SteamID, pchName string) bool {
	return bool(C.SteamAPI_ISteamGameServerStats_ClearUserAchievement(getSteamGameServerStats(), C.CSteamID(steamIDUser), unsafeCString(pchName)))
}
func SteamAPI_ISteamGameServerStats_StoreUserStats(steamIDUser SteamID) SteamAPICall {
	return C.SteamAPI_ISteamGameServerStats_StoreUserStats(getSteamGameServerStats(), C.CSteamID(steamIDUser))
}
func RegisterCallback_SteamAppInstalled(f func(*SteamAppInstalled)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamAppInstalled)(cdata)) }, unsafe.Sizeof(SteamAppInstalled{}), SteamAppListCallbacks+1, 0, false)
}
func RegisterCallback_SteamAppUninstalled(f func(*SteamAppUninstalled)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamAppUninstalled)(cdata)) }, unsafe.Sizeof(SteamAppUninstalled{}), SteamAppListCallbacks+2, 0, false)
}
func RegisterCallback_DlcInstalled(f func(*DlcInstalled)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*DlcInstalled)(cdata)) }, unsafe.Sizeof(DlcInstalled{}), SteamAppsCallbacks+5, 0, false)
}
func RegisterCallback_RegisterActivationCodeResponse(f func(*RegisterActivationCodeResponse)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RegisterActivationCodeResponse)(cdata))
	}, unsafe.Sizeof(RegisterActivationCodeResponse{}), SteamAppsCallbacks+8, 0, false)
}
func RegisterCallback_NewLaunchQueryParameters(f func(*NewLaunchQueryParameters)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*NewLaunchQueryParameters)(cdata)) }, unsafe.Sizeof(NewLaunchQueryParameters{}), SteamAppsCallbacks+14, 0, false)
}
func RegisterCallback_AppProofOfPurchaseKeyResponse(f func(*AppProofOfPurchaseKeyResponse)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*AppProofOfPurchaseKeyResponse)(cdata))
	}, unsafe.Sizeof(AppProofOfPurchaseKeyResponse{}), SteamAppsCallbacks+21, 0, false)
}
func RegisterCallback_FileDetailsResult(f func(*FileDetailsResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*FileDetailsResult)(cdata)) }, unsafe.Sizeof(FileDetailsResult{}), SteamAppsCallbacks+23, 0, false)
}
func RegisterCallback_PersonaStateChange(f func(*PersonaStateChange)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*PersonaStateChange)(cdata)) }, unsafe.Sizeof(PersonaStateChange{}), SteamFriendsCallbacks+4, 0, false)
}
func RegisterCallback_GameOverlayActivated(f func(*GameOverlayActivated)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GameOverlayActivated)(cdata)) }, unsafe.Sizeof(GameOverlayActivated{}), SteamFriendsCallbacks+31, 0, false)
}
func RegisterCallback_GameServerChangeRequested(f func(*GameServerChangeRequested)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GameServerChangeRequested)(cdata)) }, unsafe.Sizeof(GameServerChangeRequested{}), SteamFriendsCallbacks+32, 0, false)
}
func RegisterCallback_AvatarImageLoaded(f func(*AvatarImageLoaded)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*AvatarImageLoaded)(cdata)) }, unsafe.Sizeof(AvatarImageLoaded{}), SteamFriendsCallbacks+34, 0, false)
}
func RegisterCallback_ClanOfficerListResponse(f func(*ClanOfficerListResponse)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*ClanOfficerListResponse)(cdata)) }, unsafe.Sizeof(ClanOfficerListResponse{}), SteamFriendsCallbacks+35, 0, false)
}
func RegisterCallback_FriendRichPresenceUpdate(f func(*FriendRichPresenceUpdate)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*FriendRichPresenceUpdate)(cdata)) }, unsafe.Sizeof(FriendRichPresenceUpdate{}), SteamFriendsCallbacks+36, 0, false)
}
func RegisterCallback_GameRichPresenceJoinRequested(f func(*GameRichPresenceJoinRequested)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*GameRichPresenceJoinRequested)(cdata))
	}, unsafe.Sizeof(GameRichPresenceJoinRequested{}), SteamFriendsCallbacks+37, 0, false)
}
func RegisterCallback_GameConnectedClanChatMsg(f func(*GameConnectedClanChatMsg)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GameConnectedClanChatMsg)(cdata)) }, unsafe.Sizeof(GameConnectedClanChatMsg{}), SteamFriendsCallbacks+38, 0, false)
}
func RegisterCallback_GameConnectedChatJoin(f func(*GameConnectedChatJoin)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GameConnectedChatJoin)(cdata)) }, unsafe.Sizeof(GameConnectedChatJoin{}), SteamFriendsCallbacks+39, 0, false)
}
func RegisterCallback_GameConnectedChatLeave(f func(*GameConnectedChatLeave)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GameConnectedChatLeave)(cdata)) }, unsafe.Sizeof(GameConnectedChatLeave{}), SteamFriendsCallbacks+40, 0, false)
}
func RegisterCallback_DownloadClanActivityCountsResult(f func(*DownloadClanActivityCountsResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*DownloadClanActivityCountsResult)(cdata))
	}, unsafe.Sizeof(DownloadClanActivityCountsResult{}), SteamFriendsCallbacks+41, 0, false)
}
func RegisterCallback_JoinClanChatRoomCompletionResult(f func(*JoinClanChatRoomCompletionResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*JoinClanChatRoomCompletionResult)(cdata))
	}, unsafe.Sizeof(JoinClanChatRoomCompletionResult{}), SteamFriendsCallbacks+42, 0, false)
}
func RegisterCallback_GameConnectedFriendChatMsg(f func(*GameConnectedFriendChatMsg)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GameConnectedFriendChatMsg)(cdata)) }, unsafe.Sizeof(GameConnectedFriendChatMsg{}), SteamFriendsCallbacks+43, 0, false)
}
func RegisterCallback_FriendsGetFollowerCount(f func(*FriendsGetFollowerCount)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*FriendsGetFollowerCount)(cdata)) }, unsafe.Sizeof(FriendsGetFollowerCount{}), SteamFriendsCallbacks+44, 0, false)
}
func RegisterCallback_FriendsIsFollowing(f func(*FriendsIsFollowing)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*FriendsIsFollowing)(cdata)) }, unsafe.Sizeof(FriendsIsFollowing{}), SteamFriendsCallbacks+45, 0, false)
}
func RegisterCallback_FriendsEnumerateFollowingList(f func(*FriendsEnumerateFollowingList)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*FriendsEnumerateFollowingList)(cdata))
	}, unsafe.Sizeof(FriendsEnumerateFollowingList{}), SteamFriendsCallbacks+46, 0, false)
}
func RegisterCallback_GCMessageAvailable(f func(*GCMessageAvailable)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GCMessageAvailable)(cdata)) }, unsafe.Sizeof(GCMessageAvailable{}), SteamGameCoordinatorCallbacks+1, 0, false)
}
func RegisterCallback_GCMessageFailed(f func(*GCMessageFailed)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GCMessageFailed)(cdata)) }, unsafe.Sizeof(GCMessageFailed{}), SteamGameCoordinatorCallbacks+2, 0, false)
}
func RegisterCallback_GSClientApprove(f func(*GSClientApprove)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GSClientApprove)(cdata)) }, unsafe.Sizeof(GSClientApprove{}), SteamGameServerCallbacks+1, 0, false)
}
func RegisterCallback_GSClientDeny(f func(*GSClientDeny)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GSClientDeny)(cdata)) }, unsafe.Sizeof(GSClientDeny{}), SteamGameServerCallbacks+2, 0, false)
}
func RegisterCallback_GSClientKick(f func(*GSClientKick)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GSClientKick)(cdata)) }, unsafe.Sizeof(GSClientKick{}), SteamGameServerCallbacks+3, 0, false)
}
func RegisterCallback_GSClientAchievementStatus(f func(*GSClientAchievementStatus)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GSClientAchievementStatus)(cdata)) }, unsafe.Sizeof(GSClientAchievementStatus{}), SteamGameServerCallbacks+6, 0, false)
}
func RegisterCallback_GSPolicyResponse(f func(*GSPolicyResponse)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GSPolicyResponse)(cdata)) }, unsafe.Sizeof(GSPolicyResponse{}), SteamUserCallbacks+15, 0, false)
}
func RegisterCallback_GSGameplayStats(f func(*GSGameplayStats)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GSGameplayStats)(cdata)) }, unsafe.Sizeof(GSGameplayStats{}), SteamGameServerCallbacks+7, 0, false)
}
func RegisterCallback_GSClientGroupStatus(f func(*GSClientGroupStatus)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GSClientGroupStatus)(cdata)) }, unsafe.Sizeof(GSClientGroupStatus{}), SteamGameServerCallbacks+8, 0, false)
}
func RegisterCallback_AssociateWithClanResult(f func(*AssociateWithClanResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*AssociateWithClanResult)(cdata)) }, unsafe.Sizeof(AssociateWithClanResult{}), SteamGameServerCallbacks+10, 0, false)
}
func RegisterCallback_ComputeNewPlayerCompatibilityResult(f func(*ComputeNewPlayerCompatibilityResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*ComputeNewPlayerCompatibilityResult)(cdata))
	}, unsafe.Sizeof(ComputeNewPlayerCompatibilityResult{}), SteamGameServerCallbacks+11, 0, false)
}
func RegisterCallback_GSStatsStored(f func(*GSStatsStored)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GSStatsStored)(cdata)) }, unsafe.Sizeof(GSStatsStored{}), SteamGameServerStatsCallbacks+1, 0, false)
}
func RegisterCallback_GSStatsUnloaded(f func(*GSStatsUnloaded)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GSStatsUnloaded)(cdata)) }, unsafe.Sizeof(GSStatsUnloaded{}), SteamUserStatsCallbacks+8, 0, false)
}
func RegisterCallback_HTML_BrowserReady(f func(*HTML_BrowserReady)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_BrowserReady)(cdata)) }, unsafe.Sizeof(HTML_BrowserReady{}), SteamHTMLSurfaceCallbacks+1, 0, false)
}
func RegisterCallback_HTML_NeedsPaint(f func(*HTML_NeedsPaint)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_NeedsPaint)(cdata)) }, unsafe.Sizeof(HTML_NeedsPaint{}), SteamHTMLSurfaceCallbacks+2, 0, false)
}
func RegisterCallback_HTML_StartRequest(f func(*HTML_StartRequest)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_StartRequest)(cdata)) }, unsafe.Sizeof(HTML_StartRequest{}), SteamHTMLSurfaceCallbacks+3, 0, false)
}
func RegisterCallback_HTML_CloseBrowser(f func(*HTML_CloseBrowser)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_CloseBrowser)(cdata)) }, unsafe.Sizeof(HTML_CloseBrowser{}), SteamHTMLSurfaceCallbacks+4, 0, false)
}
func RegisterCallback_HTML_URLChanged(f func(*HTML_URLChanged)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_URLChanged)(cdata)) }, unsafe.Sizeof(HTML_URLChanged{}), SteamHTMLSurfaceCallbacks+5, 0, false)
}
func RegisterCallback_HTML_FinishedRequest(f func(*HTML_FinishedRequest)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_FinishedRequest)(cdata)) }, unsafe.Sizeof(HTML_FinishedRequest{}), SteamHTMLSurfaceCallbacks+6, 0, false)
}
func RegisterCallback_HTML_OpenLinkInNewTab(f func(*HTML_OpenLinkInNewTab)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_OpenLinkInNewTab)(cdata)) }, unsafe.Sizeof(HTML_OpenLinkInNewTab{}), SteamHTMLSurfaceCallbacks+7, 0, false)
}
func RegisterCallback_HTML_ChangedTitle(f func(*HTML_ChangedTitle)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_ChangedTitle)(cdata)) }, unsafe.Sizeof(HTML_ChangedTitle{}), SteamHTMLSurfaceCallbacks+8, 0, false)
}
func RegisterCallback_HTML_SearchResults(f func(*HTML_SearchResults)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_SearchResults)(cdata)) }, unsafe.Sizeof(HTML_SearchResults{}), SteamHTMLSurfaceCallbacks+9, 0, false)
}
func RegisterCallback_HTML_CanGoBackAndForward(f func(*HTML_CanGoBackAndForward)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_CanGoBackAndForward)(cdata)) }, unsafe.Sizeof(HTML_CanGoBackAndForward{}), SteamHTMLSurfaceCallbacks+10, 0, false)
}
func RegisterCallback_HTML_HorizontalScroll(f func(*HTML_HorizontalScroll)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_HorizontalScroll)(cdata)) }, unsafe.Sizeof(HTML_HorizontalScroll{}), SteamHTMLSurfaceCallbacks+11, 0, false)
}
func RegisterCallback_HTML_VerticalScroll(f func(*HTML_VerticalScroll)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_VerticalScroll)(cdata)) }, unsafe.Sizeof(HTML_VerticalScroll{}), SteamHTMLSurfaceCallbacks+12, 0, false)
}
func RegisterCallback_HTML_LinkAtPosition(f func(*HTML_LinkAtPosition)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_LinkAtPosition)(cdata)) }, unsafe.Sizeof(HTML_LinkAtPosition{}), SteamHTMLSurfaceCallbacks+13, 0, false)
}
func RegisterCallback_HTML_JSAlert(f func(*HTML_JSAlert)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_JSAlert)(cdata)) }, unsafe.Sizeof(HTML_JSAlert{}), SteamHTMLSurfaceCallbacks+14, 0, false)
}
func RegisterCallback_HTML_JSConfirm(f func(*HTML_JSConfirm)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_JSConfirm)(cdata)) }, unsafe.Sizeof(HTML_JSConfirm{}), SteamHTMLSurfaceCallbacks+15, 0, false)
}
func RegisterCallback_HTML_FileOpenDialog(f func(*HTML_FileOpenDialog)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_FileOpenDialog)(cdata)) }, unsafe.Sizeof(HTML_FileOpenDialog{}), SteamHTMLSurfaceCallbacks+16, 0, false)
}
func RegisterCallback_HTML_NewWindow(f func(*HTML_NewWindow)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_NewWindow)(cdata)) }, unsafe.Sizeof(HTML_NewWindow{}), SteamHTMLSurfaceCallbacks+21, 0, false)
}
func RegisterCallback_HTML_SetCursor(f func(*HTML_SetCursor)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_SetCursor)(cdata)) }, unsafe.Sizeof(HTML_SetCursor{}), SteamHTMLSurfaceCallbacks+22, 0, false)
}
func RegisterCallback_HTML_StatusText(f func(*HTML_StatusText)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_StatusText)(cdata)) }, unsafe.Sizeof(HTML_StatusText{}), SteamHTMLSurfaceCallbacks+23, 0, false)
}
func RegisterCallback_HTML_ShowToolTip(f func(*HTML_ShowToolTip)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_ShowToolTip)(cdata)) }, unsafe.Sizeof(HTML_ShowToolTip{}), SteamHTMLSurfaceCallbacks+24, 0, false)
}
func RegisterCallback_HTML_UpdateToolTip(f func(*HTML_UpdateToolTip)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_UpdateToolTip)(cdata)) }, unsafe.Sizeof(HTML_UpdateToolTip{}), SteamHTMLSurfaceCallbacks+25, 0, false)
}
func RegisterCallback_HTML_HideToolTip(f func(*HTML_HideToolTip)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_HideToolTip)(cdata)) }, unsafe.Sizeof(HTML_HideToolTip{}), SteamHTMLSurfaceCallbacks+26, 0, false)
}
func RegisterCallback_HTML_BrowserRestarted(f func(*HTML_BrowserRestarted)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*HTML_BrowserRestarted)(cdata)) }, unsafe.Sizeof(HTML_BrowserRestarted{}), SteamHTMLSurfaceCallbacks+27, 0, false)
}
func RegisterCallback_SteamInventoryResultReady(f func(*SteamInventoryResultReady)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamInventoryResultReady)(cdata)) }, unsafe.Sizeof(SteamInventoryResultReady{}), ClientInventoryCallbacks+0, 0, false)
}
func RegisterCallback_SteamInventoryFullUpdate(f func(*SteamInventoryFullUpdate)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamInventoryFullUpdate)(cdata)) }, unsafe.Sizeof(SteamInventoryFullUpdate{}), ClientInventoryCallbacks+1, 0, false)
}
func RegisterCallback_SteamInventoryDefinitionUpdate(f func(*SteamInventoryDefinitionUpdate)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*SteamInventoryDefinitionUpdate)(cdata))
	}, unsafe.Sizeof(SteamInventoryDefinitionUpdate{}), ClientInventoryCallbacks+2, 0, false)
}
func RegisterCallback_SteamInventoryEligiblePromoItemDefIDs(f func(*SteamInventoryEligiblePromoItemDefIDs)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*SteamInventoryEligiblePromoItemDefIDs)(cdata))
	}, unsafe.Sizeof(SteamInventoryEligiblePromoItemDefIDs{}), ClientInventoryCallbacks+3, 0, false)
}
func RegisterCallback_SteamInventoryStartPurchaseResult(f func(*SteamInventoryStartPurchaseResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*SteamInventoryStartPurchaseResult)(cdata))
	}, unsafe.Sizeof(SteamInventoryStartPurchaseResult{}), ClientInventoryCallbacks+4, 0, false)
}
func RegisterCallback_SteamInventoryRequestPricesResult(f func(*SteamInventoryRequestPricesResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*SteamInventoryRequestPricesResult)(cdata))
	}, unsafe.Sizeof(SteamInventoryRequestPricesResult{}), ClientInventoryCallbacks+5, 0, false)
}
func RegisterCallback_FavoritesListChanged(f func(*FavoritesListChanged)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*FavoritesListChanged)(cdata)) }, unsafe.Sizeof(FavoritesListChanged{}), SteamMatchmakingCallbacks+2, 0, false)
}
func RegisterCallback_LobbyMatchList(f func(*LobbyMatchList)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*LobbyMatchList)(cdata)) }, unsafe.Sizeof(LobbyMatchList{}), SteamMatchmakingCallbacks+10, 0, false)
}
func RegisterCallback_LobbyKicked(f func(*LobbyKicked)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*LobbyKicked)(cdata)) }, unsafe.Sizeof(LobbyKicked{}), SteamMatchmakingCallbacks+12, 0, false)
}
func RegisterCallback_FavoritesListAccountsUpdated(f func(*FavoritesListAccountsUpdated)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*FavoritesListAccountsUpdated)(cdata))
	}, unsafe.Sizeof(FavoritesListAccountsUpdated{}), SteamMatchmakingCallbacks+16, 0, false)
}
func RegisterCallback_PlaybackStatusHasChanged(f func(*PlaybackStatusHasChanged)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*PlaybackStatusHasChanged)(cdata)) }, unsafe.Sizeof(PlaybackStatusHasChanged{}), SteamMusicCallbacks+1, 0, false)
}
func RegisterCallback_VolumeHasChanged(f func(*VolumeHasChanged)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*VolumeHasChanged)(cdata)) }, unsafe.Sizeof(VolumeHasChanged{}), SteamMusicCallbacks+2, 0, false)
}
func RegisterCallback_MusicPlayerRemoteWillActivate(f func(*MusicPlayerRemoteWillActivate)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*MusicPlayerRemoteWillActivate)(cdata))
	}, unsafe.Sizeof(MusicPlayerRemoteWillActivate{}), SteamMusicRemoteCallbacks+1, 0, false)
}
func RegisterCallback_MusicPlayerRemoteWillDeactivate(f func(*MusicPlayerRemoteWillDeactivate)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*MusicPlayerRemoteWillDeactivate)(cdata))
	}, unsafe.Sizeof(MusicPlayerRemoteWillDeactivate{}), SteamMusicRemoteCallbacks+2, 0, false)
}
func RegisterCallback_MusicPlayerRemoteToFront(f func(*MusicPlayerRemoteToFront)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*MusicPlayerRemoteToFront)(cdata)) }, unsafe.Sizeof(MusicPlayerRemoteToFront{}), SteamMusicRemoteCallbacks+3, 0, false)
}
func RegisterCallback_MusicPlayerWillQuit(f func(*MusicPlayerWillQuit)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*MusicPlayerWillQuit)(cdata)) }, unsafe.Sizeof(MusicPlayerWillQuit{}), SteamMusicRemoteCallbacks+4, 0, false)
}
func RegisterCallback_MusicPlayerWantsPlay(f func(*MusicPlayerWantsPlay)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*MusicPlayerWantsPlay)(cdata)) }, unsafe.Sizeof(MusicPlayerWantsPlay{}), SteamMusicRemoteCallbacks+5, 0, false)
}
func RegisterCallback_MusicPlayerWantsPause(f func(*MusicPlayerWantsPause)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*MusicPlayerWantsPause)(cdata)) }, unsafe.Sizeof(MusicPlayerWantsPause{}), SteamMusicRemoteCallbacks+6, 0, false)
}
func RegisterCallback_MusicPlayerWantsPlayPrevious(f func(*MusicPlayerWantsPlayPrevious)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*MusicPlayerWantsPlayPrevious)(cdata))
	}, unsafe.Sizeof(MusicPlayerWantsPlayPrevious{}), SteamMusicRemoteCallbacks+7, 0, false)
}
func RegisterCallback_MusicPlayerWantsPlayNext(f func(*MusicPlayerWantsPlayNext)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*MusicPlayerWantsPlayNext)(cdata)) }, unsafe.Sizeof(MusicPlayerWantsPlayNext{}), SteamMusicRemoteCallbacks+8, 0, false)
}
func RegisterCallback_MusicPlayerWantsShuffled(f func(*MusicPlayerWantsShuffled)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*MusicPlayerWantsShuffled)(cdata)) }, unsafe.Sizeof(MusicPlayerWantsShuffled{}), SteamMusicRemoteCallbacks+9, 0, false)
}
func RegisterCallback_MusicPlayerWantsLooped(f func(*MusicPlayerWantsLooped)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*MusicPlayerWantsLooped)(cdata)) }, unsafe.Sizeof(MusicPlayerWantsLooped{}), SteamMusicRemoteCallbacks+10, 0, false)
}
func RegisterCallback_MusicPlayerWantsVolume(f func(*MusicPlayerWantsVolume)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*MusicPlayerWantsVolume)(cdata)) }, unsafe.Sizeof(MusicPlayerWantsVolume{}), SteamMusicCallbacks+11, 0, false)
}
func RegisterCallback_MusicPlayerSelectsQueueEntry(f func(*MusicPlayerSelectsQueueEntry)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*MusicPlayerSelectsQueueEntry)(cdata))
	}, unsafe.Sizeof(MusicPlayerSelectsQueueEntry{}), SteamMusicCallbacks+12, 0, false)
}
func RegisterCallback_MusicPlayerSelectsPlaylistEntry(f func(*MusicPlayerSelectsPlaylistEntry)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*MusicPlayerSelectsPlaylistEntry)(cdata))
	}, unsafe.Sizeof(MusicPlayerSelectsPlaylistEntry{}), SteamMusicCallbacks+13, 0, false)
}
func RegisterCallback_MusicPlayerWantsPlayingRepeatStatus(f func(*MusicPlayerWantsPlayingRepeatStatus)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*MusicPlayerWantsPlayingRepeatStatus)(cdata))
	}, unsafe.Sizeof(MusicPlayerWantsPlayingRepeatStatus{}), SteamMusicRemoteCallbacks+14, 0, false)
}
func RegisterCallback_P2PSessionRequest(f func(*P2PSessionRequest)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*P2PSessionRequest)(cdata)) }, unsafe.Sizeof(P2PSessionRequest{}), SteamNetworkingCallbacks+2, 0, false)
}
func RegisterCallback_P2PSessionConnectFail(f func(*P2PSessionConnectFail)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*P2PSessionConnectFail)(cdata)) }, unsafe.Sizeof(P2PSessionConnectFail{}), SteamNetworkingCallbacks+3, 0, false)
}
func RegisterCallback_SocketStatusCallback(f func(*SocketStatusCallback)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SocketStatusCallback)(cdata)) }, unsafe.Sizeof(SocketStatusCallback{}), SteamNetworkingCallbacks+1, 0, false)
}
func RegisterCallback_RemoteStorageAppSyncedClient(f func(*RemoteStorageAppSyncedClient)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageAppSyncedClient)(cdata))
	}, unsafe.Sizeof(RemoteStorageAppSyncedClient{}), ClientRemoteStorageCallbacks+1, 0, false)
}
func RegisterCallback_RemoteStorageAppSyncedServer(f func(*RemoteStorageAppSyncedServer)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageAppSyncedServer)(cdata))
	}, unsafe.Sizeof(RemoteStorageAppSyncedServer{}), ClientRemoteStorageCallbacks+2, 0, false)
}
func RegisterCallback_RemoteStorageAppSyncProgress(f func(*RemoteStorageAppSyncProgress)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageAppSyncProgress)(cdata))
	}, unsafe.Sizeof(RemoteStorageAppSyncProgress{}), ClientRemoteStorageCallbacks+3, 0, false)
}
func RegisterCallback_RemoteStorageAppSyncStatusCheck(f func(*RemoteStorageAppSyncStatusCheck)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageAppSyncStatusCheck)(cdata))
	}, unsafe.Sizeof(RemoteStorageAppSyncStatusCheck{}), ClientRemoteStorageCallbacks+5, 0, false)
}
func RegisterCallback_RemoteStorageFileShareResult(f func(*RemoteStorageFileShareResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageFileShareResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageFileShareResult{}), ClientRemoteStorageCallbacks+7, 0, false)
}
func RegisterCallback_RemoteStoragePublishFileResult(f func(*RemoteStoragePublishFileResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStoragePublishFileResult)(cdata))
	}, unsafe.Sizeof(RemoteStoragePublishFileResult{}), ClientRemoteStorageCallbacks+9, 0, false)
}
func RegisterCallback_RemoteStorageDeletePublishedFileResult(f func(*RemoteStorageDeletePublishedFileResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageDeletePublishedFileResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageDeletePublishedFileResult{}), ClientRemoteStorageCallbacks+11, 0, false)
}
func RegisterCallback_RemoteStorageEnumerateUserPublishedFilesResult(f func(*RemoteStorageEnumerateUserPublishedFilesResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageEnumerateUserPublishedFilesResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageEnumerateUserPublishedFilesResult{}), ClientRemoteStorageCallbacks+12, 0, false)
}
func RegisterCallback_RemoteStorageSubscribePublishedFileResult(f func(*RemoteStorageSubscribePublishedFileResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageSubscribePublishedFileResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageSubscribePublishedFileResult{}), ClientRemoteStorageCallbacks+13, 0, false)
}
func RegisterCallback_RemoteStorageEnumerateUserSubscribedFilesResult(f func(*RemoteStorageEnumerateUserSubscribedFilesResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageEnumerateUserSubscribedFilesResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageEnumerateUserSubscribedFilesResult{}), ClientRemoteStorageCallbacks+14, 0, false)
}
func RegisterCallback_RemoteStorageUnsubscribePublishedFileResult(f func(*RemoteStorageUnsubscribePublishedFileResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageUnsubscribePublishedFileResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageUnsubscribePublishedFileResult{}), ClientRemoteStorageCallbacks+15, 0, false)
}
func RegisterCallback_RemoteStorageUpdatePublishedFileResult(f func(*RemoteStorageUpdatePublishedFileResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageUpdatePublishedFileResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageUpdatePublishedFileResult{}), ClientRemoteStorageCallbacks+16, 0, false)
}
func RegisterCallback_RemoteStorageDownloadUGCResult(f func(*RemoteStorageDownloadUGCResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageDownloadUGCResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageDownloadUGCResult{}), ClientRemoteStorageCallbacks+17, 0, false)
}
func RegisterCallback_RemoteStorageGetPublishedFileDetailsResult(f func(*RemoteStorageGetPublishedFileDetailsResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageGetPublishedFileDetailsResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageGetPublishedFileDetailsResult{}), ClientRemoteStorageCallbacks+18, 0, false)
}
func RegisterCallback_RemoteStorageEnumerateWorkshopFilesResult(f func(*RemoteStorageEnumerateWorkshopFilesResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageEnumerateWorkshopFilesResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageEnumerateWorkshopFilesResult{}), ClientRemoteStorageCallbacks+19, 0, false)
}
func RegisterCallback_RemoteStorageGetPublishedItemVoteDetailsResult(f func(*RemoteStorageGetPublishedItemVoteDetailsResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageGetPublishedItemVoteDetailsResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageGetPublishedItemVoteDetailsResult{}), ClientRemoteStorageCallbacks+20, 0, false)
}
func RegisterCallback_RemoteStoragePublishedFileSubscribed(f func(*RemoteStoragePublishedFileSubscribed)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStoragePublishedFileSubscribed)(cdata))
	}, unsafe.Sizeof(RemoteStoragePublishedFileSubscribed{}), ClientRemoteStorageCallbacks+21, 0, false)
}
func RegisterCallback_RemoteStoragePublishedFileUnsubscribed(f func(*RemoteStoragePublishedFileUnsubscribed)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStoragePublishedFileUnsubscribed)(cdata))
	}, unsafe.Sizeof(RemoteStoragePublishedFileUnsubscribed{}), ClientRemoteStorageCallbacks+22, 0, false)
}
func RegisterCallback_RemoteStoragePublishedFileDeleted(f func(*RemoteStoragePublishedFileDeleted)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStoragePublishedFileDeleted)(cdata))
	}, unsafe.Sizeof(RemoteStoragePublishedFileDeleted{}), ClientRemoteStorageCallbacks+23, 0, false)
}
func RegisterCallback_RemoteStorageUpdateUserPublishedItemVoteResult(f func(*RemoteStorageUpdateUserPublishedItemVoteResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageUpdateUserPublishedItemVoteResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageUpdateUserPublishedItemVoteResult{}), ClientRemoteStorageCallbacks+24, 0, false)
}
func RegisterCallback_RemoteStorageUserVoteDetails(f func(*RemoteStorageUserVoteDetails)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageUserVoteDetails)(cdata))
	}, unsafe.Sizeof(RemoteStorageUserVoteDetails{}), ClientRemoteStorageCallbacks+25, 0, false)
}
func RegisterCallback_RemoteStorageEnumerateUserSharedWorkshopFilesResult(f func(*RemoteStorageEnumerateUserSharedWorkshopFilesResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageEnumerateUserSharedWorkshopFilesResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageEnumerateUserSharedWorkshopFilesResult{}), ClientRemoteStorageCallbacks+26, 0, false)
}
func RegisterCallback_RemoteStorageSetUserPublishedFileActionResult(f func(*RemoteStorageSetUserPublishedFileActionResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageSetUserPublishedFileActionResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageSetUserPublishedFileActionResult{}), ClientRemoteStorageCallbacks+27, 0, false)
}
func RegisterCallback_RemoteStorageEnumeratePublishedFilesByUserActionResult(f func(*RemoteStorageEnumeratePublishedFilesByUserActionResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageEnumeratePublishedFilesByUserActionResult)(cdata))
	}, unsafe.Sizeof(RemoteStorageEnumeratePublishedFilesByUserActionResult{}), ClientRemoteStorageCallbacks+28, 0, false)
}
func RegisterCallback_RemoteStoragePublishFileProgress(f func(*RemoteStoragePublishFileProgress)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStoragePublishFileProgress)(cdata))
	}, unsafe.Sizeof(RemoteStoragePublishFileProgress{}), ClientRemoteStorageCallbacks+29, 0, false)
}
func RegisterCallback_RemoteStoragePublishedFileUpdated(f func(*RemoteStoragePublishedFileUpdated)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStoragePublishedFileUpdated)(cdata))
	}, unsafe.Sizeof(RemoteStoragePublishedFileUpdated{}), ClientRemoteStorageCallbacks+30, 0, false)
}
func RegisterCallback_RemoteStorageFileWriteAsyncComplete(f func(*RemoteStorageFileWriteAsyncComplete)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageFileWriteAsyncComplete)(cdata))
	}, unsafe.Sizeof(RemoteStorageFileWriteAsyncComplete{}), ClientRemoteStorageCallbacks+31, 0, false)
}
func RegisterCallback_RemoteStorageFileReadAsyncComplete(f func(*RemoteStorageFileReadAsyncComplete)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*RemoteStorageFileReadAsyncComplete)(cdata))
	}, unsafe.Sizeof(RemoteStorageFileReadAsyncComplete{}), ClientRemoteStorageCallbacks+32, 0, false)
}
func RegisterCallback_ScreenshotReady(f func(*ScreenshotReady)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*ScreenshotReady)(cdata)) }, unsafe.Sizeof(ScreenshotReady{}), SteamScreenshotsCallbacks+1, 0, false)
}
func RegisterCallback_ScreenshotRequested(f func(*ScreenshotRequested)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*ScreenshotRequested)(cdata)) }, unsafe.Sizeof(ScreenshotRequested{}), SteamScreenshotsCallbacks+2, 0, false)
}
func RegisterCallback_SteamUGCQueryCompleted(f func(*SteamUGCQueryCompleted)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamUGCQueryCompleted)(cdata)) }, unsafe.Sizeof(SteamUGCQueryCompleted{}), ClientUGCCallbacks+1, 0, false)
}
func RegisterCallback_SteamUGCRequestUGCDetailsResult(f func(*SteamUGCRequestUGCDetailsResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*SteamUGCRequestUGCDetailsResult)(cdata))
	}, unsafe.Sizeof(SteamUGCRequestUGCDetailsResult{}), ClientUGCCallbacks+2, 0, false)
}
func RegisterCallback_CreateItemResult(f func(*CreateItemResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*CreateItemResult)(cdata)) }, unsafe.Sizeof(CreateItemResult{}), ClientUGCCallbacks+3, 0, false)
}
func RegisterCallback_SubmitItemUpdateResult(f func(*SubmitItemUpdateResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SubmitItemUpdateResult)(cdata)) }, unsafe.Sizeof(SubmitItemUpdateResult{}), ClientUGCCallbacks+4, 0, false)
}
func RegisterCallback_ItemInstalled(f func(*ItemInstalled)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*ItemInstalled)(cdata)) }, unsafe.Sizeof(ItemInstalled{}), ClientUGCCallbacks+5, 0, false)
}
func RegisterCallback_DownloadItemResult(f func(*DownloadItemResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*DownloadItemResult)(cdata)) }, unsafe.Sizeof(DownloadItemResult{}), ClientUGCCallbacks+6, 0, false)
}
func RegisterCallback_UserFavoriteItemsListChanged(f func(*UserFavoriteItemsListChanged)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*UserFavoriteItemsListChanged)(cdata))
	}, unsafe.Sizeof(UserFavoriteItemsListChanged{}), ClientUGCCallbacks+7, 0, false)
}
func RegisterCallback_SetUserItemVoteResult(f func(*SetUserItemVoteResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SetUserItemVoteResult)(cdata)) }, unsafe.Sizeof(SetUserItemVoteResult{}), ClientUGCCallbacks+8, 0, false)
}
func RegisterCallback_GetUserItemVoteResult(f func(*GetUserItemVoteResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GetUserItemVoteResult)(cdata)) }, unsafe.Sizeof(GetUserItemVoteResult{}), ClientUGCCallbacks+9, 0, false)
}
func RegisterCallback_StartPlaytimeTrackingResult(f func(*StartPlaytimeTrackingResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*StartPlaytimeTrackingResult)(cdata))
	}, unsafe.Sizeof(StartPlaytimeTrackingResult{}), ClientUGCCallbacks+10, 0, false)
}
func RegisterCallback_StopPlaytimeTrackingResult(f func(*StopPlaytimeTrackingResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*StopPlaytimeTrackingResult)(cdata)) }, unsafe.Sizeof(StopPlaytimeTrackingResult{}), ClientUGCCallbacks+11, 0, false)
}
func RegisterCallback_AddUGCDependencyResult(f func(*AddUGCDependencyResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*AddUGCDependencyResult)(cdata)) }, unsafe.Sizeof(AddUGCDependencyResult{}), ClientUGCCallbacks+12, 0, false)
}
func RegisterCallback_RemoveUGCDependencyResult(f func(*RemoveUGCDependencyResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*RemoveUGCDependencyResult)(cdata)) }, unsafe.Sizeof(RemoveUGCDependencyResult{}), ClientUGCCallbacks+13, 0, false)
}
func RegisterCallback_AddAppDependencyResult(f func(*AddAppDependencyResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*AddAppDependencyResult)(cdata)) }, unsafe.Sizeof(AddAppDependencyResult{}), ClientUGCCallbacks+14, 0, false)
}
func RegisterCallback_RemoveAppDependencyResult(f func(*RemoveAppDependencyResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*RemoveAppDependencyResult)(cdata)) }, unsafe.Sizeof(RemoveAppDependencyResult{}), ClientUGCCallbacks+15, 0, false)
}
func RegisterCallback_GetAppDependenciesResult(f func(*GetAppDependenciesResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GetAppDependenciesResult)(cdata)) }, unsafe.Sizeof(GetAppDependenciesResult{}), ClientUGCCallbacks+16, 0, false)
}
func RegisterCallback_DeleteItemResult(f func(*DeleteItemResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*DeleteItemResult)(cdata)) }, unsafe.Sizeof(DeleteItemResult{}), ClientUGCCallbacks+17, 0, false)
}
func RegisterCallback_SteamServersConnected(f func(*SteamServersConnected)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamServersConnected)(cdata)) }, unsafe.Sizeof(SteamServersConnected{}), SteamUserCallbacks+1, 0, false)
}
func RegisterCallback_SteamServerConnectFailure(f func(*SteamServerConnectFailure)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamServerConnectFailure)(cdata)) }, unsafe.Sizeof(SteamServerConnectFailure{}), SteamUserCallbacks+2, 0, false)
}
func RegisterCallback_SteamServersDisconnected(f func(*SteamServersDisconnected)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamServersDisconnected)(cdata)) }, unsafe.Sizeof(SteamServersDisconnected{}), SteamUserCallbacks+3, 0, false)
}
func RegisterCallback_IPCFailure(f func(*IPCFailure)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*IPCFailure)(cdata)) }, unsafe.Sizeof(IPCFailure{}), SteamUserCallbacks+17, 0, false)
}
func RegisterCallback_LicensesUpdated(f func(*LicensesUpdated)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*LicensesUpdated)(cdata)) }, unsafe.Sizeof(LicensesUpdated{}), SteamUserCallbacks+25, 0, false)
}
func RegisterCallback_ValidateAuthTicketResponse(f func(*ValidateAuthTicketResponse)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*ValidateAuthTicketResponse)(cdata)) }, unsafe.Sizeof(ValidateAuthTicketResponse{}), SteamUserCallbacks+43, 0, false)
}
func RegisterCallback_MicroTxnAuthorizationResponse(f func(*MicroTxnAuthorizationResponse)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*MicroTxnAuthorizationResponse)(cdata))
	}, unsafe.Sizeof(MicroTxnAuthorizationResponse{}), SteamUserCallbacks+52, 0, false)
}
func RegisterCallback_GetAuthSessionTicketResponse(f func(*GetAuthSessionTicketResponse)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*GetAuthSessionTicketResponse)(cdata))
	}, unsafe.Sizeof(GetAuthSessionTicketResponse{}), SteamUserCallbacks+63, 0, false)
}
func RegisterCallback_GameWebCallback(f func(*GameWebCallback)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GameWebCallback)(cdata)) }, unsafe.Sizeof(GameWebCallback{}), SteamUserCallbacks+64, 0, false)
}
func RegisterCallback_StoreAuthURLResponse(f func(*StoreAuthURLResponse)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*StoreAuthURLResponse)(cdata)) }, unsafe.Sizeof(StoreAuthURLResponse{}), SteamUserCallbacks+65, 0, false)
}
func RegisterCallback_UserStatsReceived(f func(*UserStatsReceived)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*UserStatsReceived)(cdata)) }, unsafe.Sizeof(UserStatsReceived{}), SteamUserStatsCallbacks+1, 0, false)
}
func RegisterCallback_UserStatsStored(f func(*UserStatsStored)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*UserStatsStored)(cdata)) }, unsafe.Sizeof(UserStatsStored{}), SteamUserStatsCallbacks+2, 0, false)
}
func RegisterCallback_LeaderboardFindResult(f func(*LeaderboardFindResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*LeaderboardFindResult)(cdata)) }, unsafe.Sizeof(LeaderboardFindResult{}), SteamUserStatsCallbacks+4, 0, false)
}
func RegisterCallback_LeaderboardScoresDownloaded(f func(*LeaderboardScoresDownloaded)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) {
		f((*LeaderboardScoresDownloaded)(cdata))
	}, unsafe.Sizeof(LeaderboardScoresDownloaded{}), SteamUserStatsCallbacks+5, 0, false)
}
func RegisterCallback_LeaderboardScoreUploaded(f func(*LeaderboardScoreUploaded)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*LeaderboardScoreUploaded)(cdata)) }, unsafe.Sizeof(LeaderboardScoreUploaded{}), SteamUserStatsCallbacks+6, 0, false)
}
func RegisterCallback_NumberOfCurrentPlayers(f func(*NumberOfCurrentPlayers)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*NumberOfCurrentPlayers)(cdata)) }, unsafe.Sizeof(NumberOfCurrentPlayers{}), SteamUserStatsCallbacks+7, 0, false)
}
func RegisterCallback_UserStatsUnloaded(f func(*UserStatsUnloaded)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*UserStatsUnloaded)(cdata)) }, unsafe.Sizeof(UserStatsUnloaded{}), SteamUserStatsCallbacks+8, 0, false)
}
func RegisterCallback_LeaderboardUGCSet(f func(*LeaderboardUGCSet)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*LeaderboardUGCSet)(cdata)) }, unsafe.Sizeof(LeaderboardUGCSet{}), SteamUserStatsCallbacks+11, 0, false)
}
func RegisterCallback_GlobalStatsReceived(f func(*GlobalStatsReceived)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GlobalStatsReceived)(cdata)) }, unsafe.Sizeof(GlobalStatsReceived{}), SteamUserStatsCallbacks+12, 0, false)
}
func RegisterCallback_IPCountry(f func(*IPCountry)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*IPCountry)(cdata)) }, unsafe.Sizeof(IPCountry{}), SteamUtilsCallbacks+1, 0, false)
}
func RegisterCallback_LowBatteryPower(f func(*LowBatteryPower)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*LowBatteryPower)(cdata)) }, unsafe.Sizeof(LowBatteryPower{}), SteamUtilsCallbacks+2, 0, false)
}
func RegisterCallback_SteamAPICallCompleted(f func(*SteamAPICallCompleted)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamAPICallCompleted)(cdata)) }, unsafe.Sizeof(SteamAPICallCompleted{}), SteamUtilsCallbacks+3, 0, false)
}
func RegisterCallback_SteamShutdown(f func(*SteamShutdown)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*SteamShutdown)(cdata)) }, unsafe.Sizeof(SteamShutdown{}), SteamUtilsCallbacks+4, 0, false)
}
func RegisterCallback_CheckFileSignature(f func(*CheckFileSignature)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*CheckFileSignature)(cdata)) }, unsafe.Sizeof(CheckFileSignature{}), SteamUtilsCallbacks+5, 0, false)
}
func RegisterCallback_GamepadTextInputDismissed(f func(*GamepadTextInputDismissed)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GamepadTextInputDismissed)(cdata)) }, unsafe.Sizeof(GamepadTextInputDismissed{}), SteamUtilsCallbacks+14, 0, false)
}
func RegisterCallback_BroadcastUploadStart(f func(*BroadcastUploadStart)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*BroadcastUploadStart)(cdata)) }, unsafe.Sizeof(BroadcastUploadStart{}), ClientVideoCallbacks+4, 0, false)
}
func RegisterCallback_BroadcastUploadStop(f func(*BroadcastUploadStop)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*BroadcastUploadStop)(cdata)) }, unsafe.Sizeof(BroadcastUploadStop{}), ClientVideoCallbacks+5, 0, false)
}
func RegisterCallback_GetVideoURLResult(f func(*GetVideoURLResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GetVideoURLResult)(cdata)) }, unsafe.Sizeof(GetVideoURLResult{}), ClientVideoCallbacks+11, 0, false)
}
func RegisterCallback_GetOPFSettingsResult(f func(*GetOPFSettingsResult)) registeredCallback {
	return registerCallback(func(cdata unsafe.Pointer, _ uintptr, _ bool, _ SteamAPICall) { f((*GetOPFSettingsResult)(cdata)) }, unsafe.Sizeof(GetOPFSettingsResult{}), ClientVideoCallbacks+24, 0, false)
}
